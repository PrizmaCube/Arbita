// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
const express = require('express');
const axios = require('axios');
const cors = require('cors');
const dotenv = require('dotenv');
const fs = require('fs-extra');
const path = require('path');
const http = require('http');
const brain = require('brain.js');
const Parser = require('rss-parser');
const natural = require('natural');
const moment = require('moment');
const chalk = require('chalk');// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ –∫–æ–Ω—Å–æ–ª—å
const socketIo = require('socket.io');
const { RestClientV5 } = require('bybit-api');
const NodeCache = require('node-cache');
const Decimal = require('decimal.js');
//const { isWsFormattedSpotUserDataListStatusEvent } = require('binance');

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Express –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const app = express();
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "*",
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
        allowedHeaders: ['Content-Type', 'Authorization']
    }
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Socet
io.on('connection', (socket) => {
  console.log('–ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

  if (!socket.initialized) {
    socket.initialized = true;
  }

  socket.on('disconnect', () => {
    console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
    socket.removeAllListeners();
  });

  socket.on('requestUpdate', async () => {
      const portfolioData = await fetchPortfolioData();
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', portfolioData);
      const tradeHistoryData = await fetchTradeHistoryData();
      console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É:', tradeHistoryData);
      
      socket.emit('portfolioUpdate', portfolioData);
      socket.emit('tradeHistoryUpdate', tradeHistoryData);
  });

  socket.on('disconnect', () => {
      console.log('–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏–ª—Å—è');
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞

  });
});


// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API –∫–ª—é—á–µ–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
const bybitApiKey = process.env.BYBIT_API_KEY;
const bybitSecretKey = process.env.BYBIT_SECRET_KEY;
const testBybitApiKey = process.env.TEST_BYBIT_API_KEY;
const testBybitSecretKey = process.env.TEST_BYBIT_API_SECRET;
const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
const telegramChatId = process.env.TELEGRAM_CHAT_ID;
//const etherscanApiKey = process.env.ETHERSCAN_API_KEY;

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
const RISK_PER_TRADE = 0.01;
const COMMISSION_RATE = 0.001;
let lastKnownAccuracy = null;
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
let GRID_STEP_PERCENTAGE = 1; // –®–∞–≥ —Å–µ—Ç–∫–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
let GRID_LEVELS = 10; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Ä–æ–≤–Ω–µ–π —Å–µ—Ç–∫–∏


// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Bybit –∫–ª–∏–µ–Ω—Ç–∞
const bybitClient = new RestClientV5({
  testnet: false,
  key: bybitApiKey,
  secret: bybitSecretKey,
  recv_window: 10000 // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Å–µ–∫—É–Ω–¥
});
try {
  // –ö–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞:', error);
 
}
// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Bybit –∫–ª–∏–µ–Ω—Ç–∞
const testBybitClient = new RestClientV5({
  testnet: true,
  key: testBybitApiKey,
  secret: testBybitSecretKey,
  recv_window: 10000
});
try {
  // –ö–æ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Bybit –∫–ª–∏–µ–Ω—Ç–∞
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ test Bybit –∫–ª–∏–µ–Ω—Ç–∞:', error);
 
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ Bybit
async function getBybitServerTime() {
  try {
    const response = await bybitClient.getServerTime();
    if (response.retCode !== 0) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞: ${response.retMsg}`);
    }
    return parseInt(response.result.timeSecond);
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞ Bybit: ${error.message}`, 'error', 'getBybitServerTime');
    throw error;
  }
}


// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
const priceCache = new Map();
const CACHE_TTL = 6000; // 1 –º–∏–Ω—É—Ç–∞ (–≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã
async function getPrice(symbol, maxRetries = 3, retryDelay = 1000) {
  await log(`üèÅ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}`, 'info', 'getPrice');

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
  const cachedPrice = priceCache.get(symbol);
  if (cachedPrice && Date.now() - cachedPrice.timestamp < CACHE_TTL) {
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol}: ${cachedPrice.price}`, 'info', 'getPrice');
    return cachedPrice.price;
  }

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∏–∑ ${maxRetries} –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}`, 'info', 'getPrice');
      
      const response = await axios.get(`https://api.bybit.com/v5/market/tickers?category=spot&symbol=${symbol}`, {
        timeout: 10000,
        headers: {
          'User-Agent': 'YourTradingBot/1.0'
        }
      });
      
     // await log(`üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API Bybit`, 'debug', 'getPrice');
      
      if (response.data && response.data.result && Array.isArray(response.data.result.list) && response.data.result.list.length > 0) {
        const priceData = response.data.result.list[0];
        await log(`üîç –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–µ: ${JSON.stringify(priceData)}`, 'debug', 'getPrice');
        
        if (priceData && typeof priceData.lastPrice === 'string') {
          const price = parseFloat(priceData.lastPrice);
          if (!isNaN(price) && price > 0) {
            await log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è ${symbol}: ${price}`, 'info', 'getPrice');
            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –≤ –∫—ç—à
            priceCache.set(symbol, { price, timestamp: Date.now() });
            await log(`üíæ –¶–µ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –∫—ç—à`, 'debug', 'getPrice');
            return price;
          }
        }
      }
      
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ');
    } catch (error) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ ${attempt}: ${error.message}`, 'error', 'getPrice');
      
      if (attempt === maxRetries) {
        await log(`üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`, 'error', 'getPrice');
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫: ${error.message}`);
      }
      
      await log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`, 'info', 'getPrice');
      await new Promise(resolve => setTimeout(resolve, retryDelay));
    }
  }
}

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤ –∏ –¥–∞–Ω–Ω—ã—Ö
const tradeHistoryPath = path.join(__dirname, 'trade_history.json');
const logPath = path.join(__dirname, 'logs');
const errorLogPath = path.join(logPath, 'error.log');
const infoLogPath = path.join(logPath, 'info.log');
const detailLogPath = path.join(logPath, 'detail.log');
const performanceLogPath = path.join(logPath, 'performance.log');

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
fs.ensureDirSync(logPath);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
const INITIAL_BALANCE_RUB = new Decimal(10000); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö
let testPortfolio = { ETH: 0, RUB: INITIAL_BALANCE_RUB };
let totalTrades = 0;
let profitableTrades = 0;
let unprofitableTrades = 0;
const signals = [];
let currentTradingMode = 'test'; // –∏–ª–∏ 'live', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
let isBacktestEnabled = false; // –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞
let isNeuralNetworkTrainingEnabled = false;
const MIN_ORDER_VALUE_USD = new Decimal(1);
const MIN_POSITION_SIZE = new Decimal('0.00092');
let lastPrice = null;
let lastPriceTime = 0;
let lastUsdRubRate = null;
let lastUsdRubRateTime = 0;
global.bybitTimeOffset = 0;
const VIRTUAL_BALANCE_FILE = path.join(__dirname, 'virtualBalance.json');
const previousSignals = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
let neuralNet; // –û–±—ä—è–≤–ª—è–µ–º neuralNet –≥–ª–æ–±–∞–ª—å–Ω–æ
const LSTM_MODEL_DIR = path.join(__dirname, 'lstm_models');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
let signalParams = {
  rsiOverbought: 70, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 65
  rsiOversold: 30, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 35
  macdThreshold: 0,
  volumeThreshold: 1.03, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 1.05
  trendStrengthThreshold: 8, // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 10
  minSignalStrength: 0.15 // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.2
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è middlewares
app.use(cors());
app.use(express.json());


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function log(message, type = 'info', functionName = '', isOrderLog = false) {
  const timestamp = moment().format('YYYY-MM-DD HH:mm:ss');
  let logMessage = `[${timestamp}] [${type.toUpperCase()}] [${functionName}] `;
  
  if (isOrderLog) {
    logMessage += '\n========================\n';
    logMessage += message;
    logMessage += '\n========================\n';
  } else {
    logMessage += message;
  }
  
  let logFile;
  switch(type) {
    case 'error':
      logFile = path.join(__dirname, 'logs', 'error.log');
      console.error(logMessage);
      break;
    case 'warn':
      logFile = path.join(__dirname, 'logs', 'warn.log');
      console.warn(logMessage);
      break;
    case 'detail':
      logFile = path.join(__dirname, 'logs', 'detail.log');
      console.log(logMessage);
      break;
    default:
      logFile = path.join(__dirname, 'logs', 'info.log');
      console.log(logMessage);
  }

  try {
    await fs.appendFile(logFile, logMessage + '\n');
    io.emit('log', { type, message: logMessage });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: ${error.message}`);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async function getAvailableBalance(asset) {
  try {
    await log(`üîç –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${asset} üí∞`, 'info', 'getAvailableBalance');

    if (asset !== 'ETH' && asset !== 'USDT' && asset !== 'RUB') {
      throw new Error('‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å ETH, USDT –∏ RUB ‚õî');
    }

    if (currentTradingMode === 'test') {
      await log('üß™ –†–∞–±–æ—Ç–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ø–æ–ª—É—á–µ–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ üß™', 'info', 'getAvailableBalance');

      let balance = await getVirtualBalance(asset);
      
      if (asset === 'ETH') {
        const ethPrice = new Decimal(await getPrice('ETHUSDT'));
        const usdToRubRate = new Decimal(await getUsdToRubRate());

        // üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ —Ä—É–±–ª—è—Ö
        const initialBalanceRub = new Decimal(10000);
        const initialBalanceETH = initialBalanceRub.dividedBy(ethPrice.times(usdToRubRate));
        
        // üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH
        await updateVirtualBalance('ETH', initialBalanceETH);

        balance = initialBalanceETH;
        await log(`üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH: ${balance.toFixed(8)} ETH üí∞`, 'info', 'getAvailableBalance');
      } else if (asset === 'RUB') {
        balance = new Decimal(10000); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ RUB
      }

      await log(`üí∞ –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${asset}: ${balance.toString()} üí∞`, 'info', 'getAvailableBalance');
      return balance;
    } else {
      await log('üíº –†–∞–±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ, –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Bybit API', 'info', 'getAvailableBalance');
      
      try {
        const balance = await bybitClient.getWalletBalance({ accountType: "UNIFIED", coin: asset });
        await log(`üìä –û—Ç–≤–µ—Ç –æ—Ç Bybit API: ${JSON.stringify(balance)}`, 'info', 'getAvailableBalance');
        
        if (!balance.result || !balance.result.list || balance.result.list.length === 0) {
          throw new Error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API');
        }
        
        const assetBalance = new Decimal(balance.result.list[0].coin.find(c => c.coin === asset).walletBalance);
        
        if (assetBalance.isNaN()) {
          throw new Error(`‚ùì –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å ${asset} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º`);
        }
        
        await log(`üí∞ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${asset}: ${assetBalance.toString()}`, 'info', 'getAvailableBalance');
        return assetBalance;
      } catch (apiError) {
        throw new Error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ API: ${apiError.message}`);
      }
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ${asset}: ${error.message}`, 'error', 'getAvailableBalance');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const minBalance = asset === 'ETH' ? new Decimal(0.01) : new Decimal(10);
    await log(`‚ö†Ô∏è –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ${asset}: ${minBalance.toString()}`, 'warn', 'getAvailableBalance');
    return minBalance;
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
async function checkBalance(asset, requiredAmount) {
  const maxRetries = 3;
  const initialRetryDelay = 1000;

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
          await log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è ${asset}. –¢—Ä–µ–±—É–µ–º–∞—è —Å—É–º–º–∞: ${requiredAmount}. –†–µ–∂–∏–º: ${currentTradingMode}`, 'info', 'checkBalance');
          
          if (currentTradingMode === 'test') {
              const virtualBalance = await getVirtualBalance(asset);
              await log(`–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º. –í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å ${asset}: ${virtualBalance}`, 'info', 'checkBalance');
              if (virtualBalance >= requiredAmount) {
                  await log(`–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}, –î–æ—Å—Ç—É–ø–Ω–æ: ${virtualBalance}`, 'info', 'checkBalance');
                  return true;
              } else {
                  await log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}, –î–æ—Å—Ç—É–ø–Ω–æ: ${virtualBalance}`, 'warn', 'checkBalance');
                  return false;
              }
          }

          await syncTimeWithBybit();

          const client = currentTradingMode === 'test' ? testBybitClient : bybitClient;
          const accountType = "UNIFIED";
          
          await log(`–ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞: accountType=${accountType}, asset=${asset}`, 'detail', 'checkBalance');

          const response = await client.getWalletBalance({ 
              accountType: accountType,
              coin: asset,
              timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º-–∞—É—Ç–∞
          });
          
          await log(`–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: ${JSON.stringify(response)}`, 'detail', 'checkBalance');
          
          if (response.retCode !== 0) {
              throw new Error(`–û—à–∏–±–∫–∞ API Bybit: ${response.retMsg}`);
          }

          if (!response.result || !response.result.list || response.result.list.length === 0) {
              throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API');
          }

          const accountInfo = response.result.list[0];
          await log(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–∫–∫–∞—É–Ω—Ç–µ: ${JSON.stringify(accountInfo)}`, 'detail', 'checkBalance');

          if (!accountInfo.coin || !Array.isArray(accountInfo.coin) || accountInfo.coin.length === 0) {
              throw new Error('–ë–∞–ª–∞–Ω—Å –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          }

          const assetBalance = accountInfo.coin.find(coin => coin.coin === asset);

          if (!assetBalance) {
              throw new Error(`–ë–∞–ª–∞–Ω—Å –¥–ª—è –∞–∫—Ç–∏–≤–∞ ${asset} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
          }

          await log(`–ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –¥–ª—è ${asset}: ${JSON.stringify(assetBalance)}`, 'detail', 'checkBalance');

          const freeBalance = parseFloat(assetBalance.walletBalance || '0');
          await log(`–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ${asset}: ${freeBalance}`, 'detail', 'checkBalance');

          if (freeBalance >= requiredAmount) {
              await log(`–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}, –î–æ—Å—Ç—É–ø–Ω–æ: ${freeBalance}`, 'info', 'checkBalance');
              return true;
          } else {
              await log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${requiredAmount}, –î–æ—Å—Ç—É–ø–Ω–æ: ${freeBalance}`, 'warn', 'checkBalance');
              return false;
          }
      } catch (error) {
          await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ ${asset} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}): ${error.message}`, 'error', 'checkBalance');
          
          if (error.response) {
              await log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API: ${JSON.stringify(error.response.data)}`, 'error', 'checkBalance');
          } else if (error.request) {
              await log('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API', 'error', 'checkBalance');
          }
          
          await log(`–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'error', 'checkBalance');
          
          if (attempt === maxRetries) {
              await log(`–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –∏—Å—á–µ—Ä–ø–∞–Ω—ã. –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error', 'checkBalance');
              return false;
          }

          const retryDelay = initialRetryDelay * Math.pow(2, attempt - 1);
          await log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ ${retryDelay}–º—Å...`, 'info', 'checkBalance');
          await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
  }

  return false;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
async function closePosition(symbol, order, currentPrice, reason = 'Manual') {
  try {
    await log(`üîí –ù–∞—á–∞–ª–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'closePosition');

    const usdToRubRate = await getUsdToRubRate();
    const { profitLoss, profitLossPercentage, commission } = await calculateProfitLoss(order, currentPrice);
    const profitLossRub = profitLoss * usdToRubRate;

    let closedOrder;
    if (currentTradingMode === 'test') {
      closedOrder = {
        orderId: order.orderId,
        symbol: symbol,
        side: order.side === 'Buy' ? 'Sell' : 'Buy',
        orderType: 'MARKET',
        price: currentPrice,
        qty: order.qty,
        status: profitLossRub > 0 ? '–ü–†–ò–ë–´–õ–¨–ù–´–ô' : '–£–ë–´–¢–û–ß–ù–´–ô'
      };
      await log(`üîÑ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –°–∏–º—É–ª—è—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'closePosition');
    } else {
      closedOrder = await bybitClient.submitOrder({
        category: 'spot',
        symbol: symbol,
        side: order.side === 'Buy' ? 'Sell' : 'Buy',
        orderType: 'MARKET',
        qty: order.qty
      });
      await log(`üîÑ –†–µ–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏–µ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'closePosition');
    }

    closedOrder.status = profitLossRub > 0 ? '–ü–†–ò–ë–´–õ–¨–ù–´–ô' : '–£–ë–´–¢–û–ß–ù–´–ô';

    await log(`üîí –û–†–î–ï–† –ó–ê–ö–†–´–¢ (ID: ${order.orderId})
    ‚è∞ –í—Ä–µ–º—è: ${moment().format('YYYY-MM-DD HH:mm:ss')}
    üìä –¢–∏–ø: ${order.side}
    üîÄ –ü—Ä–∏—á–∏–Ω–∞: ${reason}
    üí∞ –°—É–º–º–∞: ${order.qty} ${symbol.replace('USDT', '')}
    üí± –¶–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${order.price} USD (${(parseFloat(order.price) * usdToRubRate).toFixed(2)} RUB)
    üí± –¶–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${currentPrice} USD (${(currentPrice * usdToRubRate).toFixed(2)} RUB)
    üìà –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLossRub > 0 ? '+' : ''}${profitLossRub.toFixed(2)} RUB
    üìä –ü—Ä–æ—Ü–µ–Ω—Ç P/L: ${profitLossPercentage > 0 ? '+' : ''}${profitLossPercentage.toFixed(2)}%
    üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${commission.toFixed(2)} USD (${(commission * usdToRubRate).toFixed(2)} RUB)`, 'info', 'closePosition', true);

    const updatedPortfolio = await updatePortfolio(profitLossRub);
    const currentPortfolioValueRub = updatedPortfolio.totalValueRUB;

    await updateTradeHistory(order.orderId, order.side === 'Buy' ? 'sell' : 'buy', currentPrice, order.qty, profitLossRub);

    await sendTradeNotificationToTelegram(closedOrder, profitLossRub, currentPortfolioValueRub, parseFloat(order.qty) * currentPrice * usdToRubRate);

    return { 
      closedOrder, 
      closePrice: currentPrice, 
      profitLoss, 
      profitLossRub, 
      profitLossPercentage,
      commission,
      updatedPortfolio
    };
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`, 'error', 'closePosition');
    throw error;
  }
}

// –†–∞—Å—á–µ—Ç KPI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function calculateStrategyKPI() {
  try {
    const initialBalanceETH = new Decimal(0.04033385); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ ETH
    const currentEthBalance = await getVirtualBalance('ETH');
    const ethPrice = await getPrice('ETHUSDT');
    const usdToRubRate = await getUsdToRubRate();

    const totalProfitETH = new Decimal(currentEthBalance).minus(initialBalanceETH);
    const totalProfitRUB = totalProfitETH.times(ethPrice).times(usdToRubRate);
    const averageProfitETH = totalTrades > 0 ? totalProfitETH.dividedBy(totalTrades) : new Decimal(0);
    const averageProfitRUB = totalTrades > 0 ? totalProfitRUB.dividedBy(totalTrades) : new Decimal(0);

    return {
      totalTrades,
      profitableTrades,
      unprofitableTrades,
      winRate: totalTrades > 0 ? (profitableTrades / totalTrades) * 100 : 0,
      totalProfitETH: totalProfitETH.toNumber(),
      totalProfitRUB: totalProfitRUB.toNumber(),
      averageProfitETH: averageProfitETH.toNumber(),
      averageProfitRUB: averageProfitRUB.toNumber()
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ KPI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`, 'error', 'calculateStrategyKPI');
    return {
      totalTrades: 0,
      profitableTrades: 0,
      unprofitableTrades: 0,
      winRate: 0,
      totalProfitETH: 0,
      totalProfitRUB: 0,
      averageProfitETH: 0,
      averageProfitRUB: 0
    };
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è
async function updatePortfolio(profitLossEth = 0) {
  try {
    await log('–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è', 'info', 'updatePortfolio');

    const ethPrice = await getPrice('ETHUSDT');
    const usdToRubRate = await getUsdToRubRate();

    let currentEthBalance;
    if (currentTradingMode === 'test') {
      const testPortfolio = await getVirtualBalance();
      currentEthBalance = new Decimal(testPortfolio.ETH || 0);
    } else {
      const balances = await bybitClient.getWalletBalance({ accountType: "UNIFIED" });
      currentEthBalance = new Decimal(balances.result.list.find(b => b.coin === 'ETH')?.free || '0');
    }

    const currentPortfolioValueRUB = currentEthBalance.times(ethPrice).times(usdToRubRate);
    const profitLossRub = new Decimal(profitLossEth).times(ethPrice).times(usdToRubRate);

    await log(`üíº –û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–û–†–¢–§–ï–õ–Ø`, 'info', 'updatePortfolio', true);
    await log(`üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentEthBalance.toFixed(8)} ETH (${currentPortfolioValueRUB.toFixed(2)} RUB)`, 'info', 'updatePortfolio', true);
    await log(`üìà –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLossEth.toFixed(8)} ETH (${profitLossRub.toFixed(2)} RUB)`, 'info', 'updatePortfolio', true);

    const kpi = await calculateStrategyKPI();
    await log(`üìä KPI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:`, 'info', 'updatePortfolio', true);
    await log(`üìä –í–∏–Ω—Ä–µ–π—Ç: ${kpi.winRate.toFixed(2)}%`, 'info', 'updatePortfolio', true);

    return {
      totalValueRUB: currentPortfolioValueRUB.toNumber(),
      changeETH: profitLossEth,
      changeRUB: profitLossRub.toNumber(),
      currentETHBalance: currentEthBalance.toNumber(),
      kpi: kpi
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${error.message}`, 'error', 'updatePortfolio');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –ø–æ —Å–¥–µ–ª–∫–µ
async function calculateProfitLoss(order, currentPrice = null) {
  try {
    await log(`–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞: ${JSON.stringify(order)}`, 'info', 'calculateProfitLoss');
    
    if (currentPrice === null) {
      currentPrice = await getPrice(order.symbol);
    }
    
    const entryValue = new Decimal(order.price).times(order.size);
    const exitValue = new Decimal(currentPrice).times(order.size);
    
    let profitLoss = 0;
    if (order.side.toLowerCase() === 'buy') {
      profitLoss = exitValue - entryValue;
    } else if (order.side.toLowerCase() === 'sell') {
      profitLoss = entryValue - exitValue;
    } else {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ä–¥–µ—Ä–∞: ${order.side}`);
    }
    
    const commission = (entryValue + exitValue) * COMMISSION_RATE / 2; // –ö–æ–º–∏—Å—Å–∏—è –Ω–∞ –≤—Ö–æ–¥ –∏ –≤—ã—Ö–æ–¥
    profitLoss -= commission;
    
    const profitLossPercentage = (profitLoss / entryValue) * 100;
    
    await log(`–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${order.price}, –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.size}`, 'info', 'calculateProfitLoss');
    await log(`–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${profitLoss.toFixed(8)} USD (${profitLossPercentage.toFixed(2)}%)`, 'info', 'calculateProfitLoss');
    await log(`–ö–æ–º–∏—Å—Å–∏—è: ${commission.toFixed(8)} USD`, 'info', 'calculateProfitLoss');

    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ —Ä—É–±–ª–∏
    const usdToRubRate = await getUsdToRubRateWithRetry();
    const profitLossRub = profitLoss * usdToRubRate;
    
    await log(`–ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫ –≤ —Ä—É–±–ª—è—Ö: ${profitLossRub.toFixed(2)} RUB`, 'info', 'calculateProfitLoss');

    return {
      profitLoss,
      profitLossPercentage,
      commission,
      profitLossRub
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞: ${error.message}`, 'error', 'calculateProfitLoss');
    return {
      profitLoss: 0,
      profitLossPercentage: 0,
      commission: 0,
      profitLossRub: 0
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ 24 —á–∞—Å–∞
async function getPortfolioStats24h() {
  try {
    const balances = await bybitClient.getWalletBalance({ accountType: "UNIFIED" });
    console.log('–û—Ç–≤–µ—Ç –æ—Ç Bybit API:', JSON.stringify(balances));
    
    if (!balances || !balances.result || !Array.isArray(balances.result.list)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API');
    }

    const ethBalance = balances.result.list.find((b) => b.coin === 'ETH')?.free || '0';
    
    const ethPrice = await getPrice('ETHUSDT');
    if (ethPrice === null) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ETH');
    }

    const tickerInfo = await bybitClient.getTickers({ category: 'spot', symbol: 'ETHUSDT' });
    
    if (!tickerInfo.result || !tickerInfo.result.list || tickerInfo.result.list.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ç–∏–∫–µ—Ä–µ');
    }

    const priceChangePercent = parseFloat(tickerInfo.result.list[0].price24hPcnt) * 100;
    const balanceChangePercent = priceChangePercent;
    const balanceChangeUSD = parseFloat(ethBalance) * (priceChangePercent / 100) * ethPrice;

    const usdToRub = await getUsdToRubRate();
    const balanceChangeRUB = balanceChangeUSD * usdToRub;

    await log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ 24—á: ${balanceChangePercent.toFixed(2)}%`, 'detail', 'getPortfolioStats24h');

    return {
      balanceChangePercent: balanceChangePercent.toFixed(2),
      balanceChangeUSD: balanceChangeUSD.toFixed(2),
      balanceChangeRUB: balanceChangeRUB.toFixed(2)
    };
  } catch (error) {
    console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:', error);
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${error.message}`, 'error', 'getPortfolioStats24h');
    throw error;
  }
}



// –†–∞—Å—á–µ—Ç SMA
function calculateSMA(data, period) {
  if (!data || data.length < period) {
    log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ SMA. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${period}, –ø–æ–ª—É—á–µ–Ω–æ: ${data ? data.length : 0}`, 'warn', 'calculateSMA');
    return 0; // –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  }
  let sum = 0;
  for (let i = data.length - period; i < data.length; i++) {
    sum += data[i];
  }
  return sum / period;
}

// –†–∞—Å—á–µ—Ç EMA
async function calculateEMA(data, period) {
  try {
    // await log(`üßÆ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ EMA. –ü–µ—Ä–∏–æ–¥: ${period}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: ${data.length}`, 'detail', 'calculateEMA');

    if (!Array.isArray(data) || data.length === 0) {
      throw new Error('‚ùå –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è EMA –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
    }

    if (data.length < period) {
      await log(`‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ EMA. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${period}, –ø–æ–ª—É—á–µ–Ω–æ: ${data.length}. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.`, 'warn', 'calculateEMA');
      if (data.length === 1) {
        await log(`üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: ${data[0]}`, 'detail', 'calculateEMA');
        return data[0];
      }
      const average = data.reduce((sum, value) => sum + value, 0) / data.length;
     // await log(`üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –ø—Ä–æ—Å—Ç–æ–µ —Å—Ä–µ–¥–Ω–µ–µ: ${average}`, 'detail', 'calculateEMA');
      return average;
    }

    let ema = data.slice(0, period).reduce((sum, price) => sum + price, 0) / period;
    const multiplier = 2 / (period + 1);

    for (let i = period; i < data.length; i++) {
      ema = (data[i] - ema) * multiplier + ema;
    }

    // await log(`üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ EMA: ${ema}`, 'detail', 'calculateEMA');
    return ema;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ EMA: ${error.message}`, 'error', 'calculateEMA');
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ 0, —á—Ç–æ–±—ã —è–≤–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
  }
}

// –†–∞—Å—á–µ—Ç RSI
function calculateRSI(closes, period = 14) {
  if (!closes || closes.length < period + 1) {
    log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${period + 1}, –ø–æ–ª—É—á–µ–Ω–æ: ${closes ? closes.length : 0}`, 'warn', 'calculateRSI');
    return 50; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  }

  let gains = 0;
  let losses = 0;
  
  for (let i = 1; i <= period; i++) {
    const difference = closes[i] - closes[i - 1];
    if (difference > 0) {
      gains += difference;
    } else {
      losses -= difference;
    }
  }

  if (gains === 0 && losses === 0) {
    console.log('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ RSI');
    return 50;
  }

  let avgGain = gains / period;
  let avgLoss = losses / period;

  for (let i = period + 1; i < closes.length; i++) {
    const difference = closes[i] - closes[i - 1];
    const currentGain = Math.max(difference, 0);
    const currentLoss = Math.max(-difference, 0);

    avgGain = ((avgGain * (period - 1)) + currentGain) / period;
    avgLoss = ((avgLoss * (period - 1)) + currentLoss) / period;
  }

  if (avgLoss === 0) {
    console.log('–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ —Ä–∞–≤–µ–Ω 0, RSI = 100');
    return 100;
  }

  const rs = avgGain / avgLoss;
  const rsi = 100 - (100 / (1 + rs));
  
  console.log(`RSI calculation: avgGain = ${avgGain}, avgLoss = ${avgLoss}, rs = ${rs}, rsi = ${rsi}`);
  
  return rsi;
}

// –†–∞—Å—á–µ—Ç MACD
async function calculateMACD(closes, fastPeriod = 12, slowPeriod = 26, signalPeriod = 9) {
  try {
    if (!Array.isArray(closes) || closes.length === 0) {
      throw new Error('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è MACD –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–µ–ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
    }

  //  await log(`üßÆ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ MACD. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è: ${closes.length}`, 'detail', 'calculateMACD');

    // üßÆ –†–∞—Å—á–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–π MACD Line
    const macdLineData = [];
    for (let i = slowPeriod; i < closes.length; i++) {
      const fastEMA = await calculateEMA(closes.slice(0, i + 1), fastPeriod);
      const slowEMA = await calculateEMA(closes.slice(0, i + 1), slowPeriod);
      macdLineData.push(fastEMA - slowEMA);
    }

    // üßÆ –†–∞—Å—á–µ—Ç —Å–∏–≥–Ω–∞–ª—å–Ω–æ–π –ª–∏–Ω–∏–∏
    const signalLineData = [];
    for (let i = signalPeriod; i < macdLineData.length; i++) {
      const signalEMA = await calculateEMA(macdLineData.slice(0, i + 1), signalPeriod);
      signalLineData.push(signalEMA);
    }

    // üßÆ  –†–∞—Å—á–µ—Ç –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã MACD
    const histogramData = [];
    for (let i = 0; i < signalLineData.length; i++) {
      histogramData.push(macdLineData[i + signalPeriod] - signalLineData[i]);
    }

    // üìä –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    const macdLine = macdLineData[macdLineData.length - 1];
    const signalLine = signalLineData[signalLineData.length - 1];
    const histogram = histogramData[histogramData.length - 1];
   
    /*
    await log(`üìä MACD —Ä–∞—Å—Å—á–∏—Ç–∞–Ω. 
    –õ–∏–Ω–∏—è MACD: ${macdLine}, 
    –°–∏–≥–Ω–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è: ${signalLine}, 
    –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: ${histogram}`, 'debug', 'calculateMACD');
    */
   
    return [macdLine, signalLine, histogram];
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ MACD: ${error.message}`, 'error', 'calculateMACD');
    return [0, 0, 0]; 
  }
}

// –†–∞—Å—á–µ—Ç OBV
function calculateOBV(closes, volumes) {
  let obv = 0;
  for (let i = 1; i < closes.length; i++) {
    if (closes[i] > closes[i - 1]) {
      obv += volumes[i];
    } else if (closes[i] < closes[i - 1]) {
      obv -= volumes[i];
    }
    // –ï—Å–ª–∏ —Ü–µ–Ω—ã —Ä–∞–≤–Ω—ã, OBV –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è
  }
  return Math.abs(obv); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

const MAX_POSITION_SIZE = 0.6; // 30% –æ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è
const INITIAL_PORTFOLIO_VALUE_RUB = 10000; // –ù–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ä—É–±–ª—è—Ö

let currentPortfolioValueRUB = INITIAL_PORTFOLIO_VALUE_RUB;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async function initializeOrUpdateVirtualBalance(forceReset = false) {
  try {
    await log(`üîÑ –ù–∞—á–∞–ª–æ initializeOrUpdateVirtualBalance. ForceReset: ${forceReset}`, 'debug', 'initializeOrUpdateVirtualBalance');

    let balance; // –û–±—ä—è–≤–ª—è–µ–º balance —Å –ø–æ–º–æ—â—å—é let

    if (forceReset) {
      balance = { RUB: new Decimal(INITIAL_BALANCE_RUB), ETH: new Decimal(0) };
      await log(`üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'initializeOrUpdateVirtualBalance');
    } else {
      try {
        const savedBalance = await fs.readJson(VIRTUAL_BALANCE_FILE);

        // üêõ –°–æ–∑–¥–∞–µ–º –≥–ª—É–±–æ–∫—É—é –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ savedBalance
        balance = JSON.parse(JSON.stringify(savedBalance));

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ Decimal
        balance.RUB = new Decimal(balance.RUB);
        balance.ETH = new Decimal(balance.ETH);

        await log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'initializeOrUpdateVirtualBalance');
      } catch (error) {
        balance = { RUB: new Decimal(INITIAL_BALANCE_RUB), ETH: new Decimal(0) };
        await log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–ª–∞–Ω—Å. –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π: ${JSON.stringify(balance)}. –û—à–∏–±–∫–∞: ${error.message}`, 'warn', 'initializeOrUpdateVirtualBalance');
      }
    }

    const ethPriceUsd = new Decimal(await getPrice('ETHUSDT'));
    const usdToRubRate = new Decimal(await getUsdToRubRate());

    await log(`üí∞ –¶–µ–Ω–∞ ETH/USD: ${ethPriceUsd}, –ö—É—Ä—Å USD/RUB: ${usdToRubRate}`, 'debug', 'initializeOrUpdateVirtualBalance');

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å ETH –Ω–∞ –æ—Å–Ω–æ–≤–µ RUB, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (!balance.ETH) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ balance.ETH (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞)
      const newEthBalance = balance.RUB.dividedBy(ethPriceUsd.times(usdToRubRate));
      balance.ETH = newEthBalance;
      await log(`üßÆ –†–∞—Å—á–µ—Ç –±–∞–ª–∞–Ω—Å–∞ ETH: ${balance.RUB} / (${ethPriceUsd} * ${usdToRubRate}) = ${newEthBalance}`, 'debug', 'initializeOrUpdateVirtualBalance');
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –≤ —Ñ–∞–π–ª, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—è Decimal –≤ —Å—Ç—Ä–æ–∫–∏
    await fs.writeJson(VIRTUAL_BALANCE_FILE, {
      RUB: balance.RUB.toString(),
      ETH: balance.ETH.toString()
    }, { spaces: 2 });

    await log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'initializeOrUpdateVirtualBalance');

    return balance;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ initializeOrUpdateVirtualBalance: ${error.message}`, 'error', 'initializeOrUpdateVirtualBalance');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ (—Å –ø–æ–ª–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º)
async function calculateDynamicPositionSize(symbol, risk, volatility, signalStrength) {
  try {
    await log(`‚û°Ô∏è –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è ${symbol} üí∞`, 'info', 'calculateDynamicPositionSize');
    await log(`‚û°Ô∏è –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: symbol=${symbol}, risk=${risk}, volatility=${volatility}, signalStrength=${signalStrength}`, 'debug', 'calculateDynamicPositionSize');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (typeof symbol !== 'string' || symbol.trim() === '') {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª ‚õî');
    }
    if (typeof risk !== 'number' || isNaN(risk) || risk <= 0 || risk > 1) {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ ‚õî');
    }
    if (typeof volatility !== 'number' || isNaN(volatility) || volatility < 0) {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏ ‚õî');
    }
    if (typeof signalStrength !== 'number' || isNaN(signalStrength) || signalStrength < 0 || signalStrength > 1) {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞ ‚õî');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ ETH
    const availableBalanceETH = new Decimal(await getAvailableBalance('ETH'));
    await log(`üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH: ${availableBalanceETH.toString()} üí∞`, 'info', 'calculateDynamicPositionSize');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
    const currentPrice = new Decimal(await getCachedPrice(symbol));
    await log(`üìà –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${symbol}: ${currentPrice.toString()} üìà`, 'info', 'calculateDynamicPositionSize');

    // –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞)
    let positionSize = availableBalanceETH.times(risk);
    await log(`üßÆ –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞): ${positionSize.toString()} üßÆ`, 'info', 'calculateDynamicPositionSize');

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å (–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π)
    const volatilityAdjustment = Decimal.max(new Decimal(0.5), new Decimal(1).minus(volatility));
    await log(`üìä –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatilityAdjustment.toString()} üìä`, 'info', 'calculateDynamicPositionSize');

    // –£—á–µ—Ç —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
    positionSize = positionSize.times(volatilityAdjustment).times(signalStrength);
    await log(`üßÆ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${positionSize.toString()} üßÆ`, 'info', 'calculateDynamicPositionSize');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞
    const orderValueUSD = positionSize.times(currentPrice);
    await log(`üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ USD: ${orderValueUSD.toString()} üí≤`, 'info', 'calculateDynamicPositionSize');
    if (orderValueUSD.lessThan(MIN_ORDER_VALUE_USD)) {
      positionSize = new Decimal(MIN_ORDER_VALUE_USD).dividedBy(currentPrice);
      
      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ positionSize –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
      if (positionSize.greaterThan(availableBalanceETH)) {
        positionSize = availableBalanceETH;
        await log(`üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –¥–æ—Å—Ç—É–ø–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º: ${positionSize.toString()} üìà`, 'info', 'calculateDynamicPositionSize');
      } else {
        await log(`üìà –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏: ${positionSize.toString()} üìà`, 'info', 'calculateDynamicPositionSize');
      }
    }

    // ‚õî –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –±–∞–ª–∞–Ω—Å—É (—Å–≤–µ—Ä—Ö—É –∏ —Å–Ω–∏–∑—É)
    positionSize = Decimal.max(new Decimal(0), Decimal.min(positionSize, availableBalanceETH.times(0.95)));
    await log(`üßÆ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–º: ${positionSize.toString()} üßÆ`, 'info', 'calculateDynamicPositionSize');

    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É –ø–æ–∑–∏—Ü–∏–∏
    positionSize = Decimal.max(positionSize, new Decimal(MIN_POSITION_SIZE));
    await log(`üßÆ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –º–∏–Ω–∏–º—É–º–æ–º: ${positionSize.toString()} üßÆ`, 'info', 'calculateDynamicPositionSize');

    // –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    positionSize = positionSize.toDecimalPlaces(8);
    await log(`üßÆ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è: ${positionSize.toString()} üßÆ`, 'info', 'calculateDynamicPositionSize');

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if (positionSize.isNaN() || positionSize.lessThanOrEqualTo(0)) {
      throw new Error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${positionSize.toString()} ‚õî`);
    }

    await log(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${positionSize.toString()} ETH ‚úÖ`, 'info', 'calculateDynamicPositionSize');
    await log(`‚¨ÖÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞—Å—á–µ—Ç–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ üí∞`, 'info', 'calculateDynamicPositionSize');
    return positionSize;

  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ calculateDynamicPositionSize: ${error.message} ‚ùå`, 'error', 'calculateDynamicPositionSize');
    return new Decimal(MIN_POSITION_SIZE);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
async function calculateVolatility(data, period = 14) {
  try {
    if (!Array.isArray(data) || data.length < period + 1) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è ${period + 1}, –ø–æ–ª—É—á–µ–Ω–æ ${data.length}`);
    }

    const closes = data.map(d => parseFloat(d.close));
    if (closes.some(isNaN)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–µ–Ω –∑–∞–∫—Ä—ã—Ç–∏—è');
    }

    let gains = 0;
    let losses = 0;
    
    for (let i = 1; i <= period; i++) {
      const difference = closes[i] - closes[i - 1];
      if (difference > 0) {
        gains += difference;
      } else {
        losses -= difference;
      }
    }

    if (gains === 0 && losses === 0) {
      await log('–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω—ã –≤ –ø–µ—Ä–∏–æ–¥ —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏', 'warn', 'calculateVolatility');
      return 0;
    }

    let avgGain = gains / period;
    let avgLoss = losses / period;

    for (let i = period + 1; i < closes.length; i++) {
      const difference = closes[i] - closes[i - 1];
      const currentGain = Math.max(difference, 0);
      const currentLoss = Math.max(-difference, 0);

      avgGain = ((avgGain * (period - 1)) + currentGain) / period;
      avgLoss = ((avgLoss * (period - 1)) + currentLoss) / period;
    }

    if (avgLoss === 0) {
      await log('–°—Ä–µ–¥–Ω–∏–π —É–±—ã—Ç–æ–∫ —Ä–∞–≤–µ–Ω 0, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞', 'warn', 'calculateVolatility');
      return 0;
    }

    const rs = avgGain / avgLoss;
    const rsi = 100 - (100 / (1 + rs));
    
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º RSI –≤ –¥–∏–∞–ø–∞–∑–æ–Ω –æ—Ç 0 –¥–æ 1 –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –º–µ—Ä—ã –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    const volatility = Math.abs(50 - rsi) / 50;
    
    await log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(4)}`, 'info', 'calculateVolatility');
    
    return volatility;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: ${error.message}`, 'error', 'calculateVolatility');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
async function getPreviousSignal(symbol = 'ETHUSDT') {
  try {
    await log(`–ù–∞—á–∞–ª–æ getPreviousSignal –¥–ª—è ${symbol}`, 'debug', 'getPreviousSignal');

    const signal = previousSignals.find(s => s.symbol === symbol);
    await log(`–ù–∞–π–¥–µ–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: ${JSON.stringify(signal) || 'null'}`, 'debug', 'getPreviousSignal');
    return signal ? signal.type : null;

  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –≤ getPreviousSignal: ${error.message}`, 'error', 'getPreviousSignal');
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
async function saveSignal(signal) {
try {
  await log(`–ù–∞—á–∞–ª–æ saveSignal: ${JSON.stringify(signal)}`, 'debug', 'saveSignal');

  if (!signal || !signal.symbol || !signal.type) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç —Å–∏–≥–Ω–∞–ª–∞');
  }

  const existingSignalIndex = previousSignals.findIndex(s => s.symbol === signal.symbol);
  if (existingSignalIndex !== -1) {
    previousSignals[existingSignalIndex] = signal; // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Å–∏–≥–Ω–∞–ª
  } else {
    previousSignals.push(signal); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
  }
  await log(`–°–∏–≥–Ω–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${JSON.stringify(signal)}`, 'debug', 'saveSignal');


} catch (error) {
  await log(`–û—à–∏–±–∫–∞ –≤ saveSignal: ${error.message}`, 'error', 'saveSignal');
}
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function analyzeDataWithNN(symbol, interval = '15m') {
  try {
    await log(`–ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è ${symbol}`, 'info', 'analyzeDataWithNN');
    
    const input = await prepareInputDataForNN(symbol, interval);
    const neuralNet = await loadLatestModel();
    
    if (!neuralNet || !neuralNet.model) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
    }

    const prediction = await predictWithNeuralNetwork(neuralNet.model, input);
    
    if (!prediction || !Array.isArray(prediction) || prediction.length !== 3 || prediction.some(isNaN)) {
      throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${JSON.stringify(prediction)}`);
    }

    await log(`–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: ${JSON.stringify(prediction)}`, 'info', 'analyzeDataWithNN');

    const [upProbability, downProbability, neutralProbability] = prediction.map(p => new Decimal(p));

    let signal;
    let signalStrength;
    const previousSignal = getPreviousSignal(); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
    const HYSTERESIS = 0.1; // –ó–Ω–∞—á–µ–Ω–∏–µ –≥–∏—Å—Ç–µ—Ä–µ–∑–∏—Å–∞

    if (upProbability.minus(downProbability).greaterThan(HYSTERESIS) || 
        (previousSignal === 'buy' && upProbability.greaterThan(downProbability))) {
      signal = 'buy';
      signalStrength = upProbability;
    } else if (downProbability.minus(upProbability).greaterThan(HYSTERESIS) || 
               (previousSignal === 'sell' && downProbability.greaterThan(upProbability))) {
      signal = 'sell';
      signalStrength = downProbability;
    } else {
      signal = 'hold';
      signalStrength = neutralProbability;
    }

    const currentPrice = new Decimal(await getPrice(symbol));
    const usdToRubRate = new Decimal(await getUsdToRubRate());
    const currentPriceRub = currentPrice.times(usdToRubRate);
    const volume = new Decimal(await getAverageVolume(symbol, interval));

    const risk = new Decimal(calculateRisk(prediction));
    const stopLoss = calculateStopLoss(currentPrice, risk, signal);
    const takeProfit = calculateTakeProfit(currentPrice, risk, signal);
    const trailingStop = calculateTrailingStop(currentPrice, risk, signal);
    const tradeVolume = await calculateTradeVolume(symbol, interval, risk, signalStrength);

    const tradeVolumeRub = tradeVolume.times(currentPrice).times(usdToRubRate);

    await log(`–ö–æ–Ω–µ—Ü –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è ${symbol}`, 'info', 'analyzeDataWithNN');

    const result = {
      signal,
      signalStrength: signalStrength.toNumber(),
      currentPrice: currentPrice.toNumber(),
      currentPriceRub: currentPriceRub.toNumber(),
      risk: risk.toNumber(),
      stopLoss: stopLoss.toNumber(),
      takeProfit: takeProfit.toNumber(),
      trailingStop: trailingStop.toNumber(),
      positionSize: tradeVolume.toNumber(),
      tradeVolume: tradeVolume.toNumber(),
      tradeVolumeRub: tradeVolumeRub.toNumber(),
      volume: volume.toNumber(),
      rawPrediction: prediction
    };

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∏–≥–Ω–∞–ª
    await saveSignal({ symbol, type: signal, time: new Date(), data: result  }); // <-- –î–æ–±–∞–≤–ª–µ–Ω–æ

    for (const key in result) {
      if (typeof result[key] === 'number' && (isNaN(result[key]) || !isFinite(result[key]))) {
        throw new Error(`–ó–Ω–∞—á–µ–Ω–∏–µ ${key} –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: ${result[key]}`);
      }
    }

    return result;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: ${error.message}`, 'error', 'analyzeDataWithNN');
    throw error;
  }
}

/**
 * –ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç LSTM –º–æ–¥–µ–ª—å
 * @returns {Promise<void>}
 */
async function retrainLSTMModel() {
  const startTime = Date.now();
  try {
    await log('üîÑ –ù–∞—á–∞–ª–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏', 'info', 'retrainLSTMModel');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'retrainLSTMModel');

    await log('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö', 'debug', 'retrainLSTMModel');
    const historicalData = await fetchHistoricalData('ETHUSDT', '15m', 1000);
    await log(`üìà –ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π`, 'info', 'retrainLSTMModel');

    await log('üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM', 'debug', 'retrainLSTMModel');
    const trainingData = await prepareDataForLSTM(historicalData);
    await log(`üß™ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ ${trainingData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è`, 'info', 'retrainLSTMModel');

    await log('üß† –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏', 'debug', 'retrainLSTMModel');
    global.lstmModel = await trainLSTMModel(trainingData);
    await log('üéì LSTM –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∞', 'info', 'retrainLSTMModel');

    const executionTime = Date.now() - startTime;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è retrainLSTMModel: ${executionTime}ms`, 'info', 'retrainLSTMModel');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'retrainLSTMModel');
  } catch (error) {
    const executionTime = Date.now() - startTime;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–∏ LSTM –º–æ–¥–µ–ª–∏: ${error.message}`, 'error', 'retrainLSTMModel');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'retrainLSTMModel');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime}ms`, 'error', 'retrainLSTMModel');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'retrainLSTMModel');
  }
}

// –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏ –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
setInterval(retrainLSTMModel, 24 * 60 * 60 * 1000);

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ–¥–µ–ª—å LSTM –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
 * @returns {brain.recurrent.LSTM} –ú–æ–¥–µ–ª—å LSTM
 */
function createLSTMModel() {
  const startTime = Date.now();
  try {
    log('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ LSTM', 'info', 'createLSTMModel');
    log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'createLSTMModel');
    
    log('üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ LSTM', 'debug', 'createLSTMModel');
    const modelConfig = {
      inputSize: 250,
      hiddenLayers: [128, 64],
      outputSize: 3,
      activation: 'leaky-relu',
      learningRate: 0.01,
      decayRate: 0.999,
      dropout: 0.1,
    };
    log(`üìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ LSTM: ${JSON.stringify(modelConfig)}`, 'debug', 'createLSTMModel');

    const model = new brain.recurrent.LSTM(modelConfig);
    
    log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏', 'debug', 'createLSTMModel');
    
    log('‚úÖ –ú–æ–¥–µ–ª—å LSTM —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', 'info', 'createLSTMModel');
    
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    log(`‚è±Ô∏è –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏ LSTM: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'info', 'createLSTMModel');
    log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'createLSTMModel');
    
    return model;
  } catch (error) {
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ–¥–µ–ª–∏ LSTM: ${error.message}`, 'error', 'createLSTMModel');
    log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'createLSTMModel');
    log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'error', 'createLSTMModel');
    log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'createLSTMModel');
    throw error;
  }
}

/**
 * –û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å LSTM –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {Array} trainingData –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
 * @param {number} startingEpoch –ù–∞—á–∞–ª—å–Ω–∞—è —ç–ø–æ—Ö–∞ (–¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è)
 * @param {number} totalEpochs –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
 * @returns {Promise<brain.recurrent.LSTM>} –û–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å LSTM
 */
async function trainLSTMModel(trainingData, startingEpoch = 1, totalEpochs = 100) { 
  const startTime = Date.now();
  try {
    await log('üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∞–ª–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ LSTM –º–æ–¥–µ–ª–∏ ü§ñ', 'info', 'trainLSTMModel');
   // await log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—É—á–µ–Ω–∏—è: startingEpoch=${startingEpoch}, totalEpochs=${totalEpochs}`, 'debug', 'trainLSTMModel');
   // await log(`üìö –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞: ${trainingData.length}`, 'debug', 'trainLSTMModel');
   // await log(`üñ•Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${JSON.stringify(process.versions)}`, 'debug', 'trainLSTMModel');
    
    if (!Array.isArray(trainingData) || trainingData.length === 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
    }

   // await log(`üìä –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è: ${JSON.stringify(trainingData[0])}`, 'debug', 'trainLSTMModel');

   // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
   for (let i = 0; i < trainingData.length; i++) {
    const { input, output } = trainingData[i];
    if (input.some(isNaN) || output.some(isNaN)) {
      throw new Error(`‚ùå –û—à–∏–±–∫–∞: NaN –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ trainingData[${i}]. input: ${JSON.stringify(input)}, output: ${JSON.stringify(output)}`);
    }
    if (!Array.isArray(input) || !Array.isArray(output)) {
      throw new Error(`‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –≤ trainingData[${i}]. input: ${JSON.stringify(input)}, output: ${JSON.stringify(output)}`);

    }
  }

    let model = await loadLSTMModelFromEpoch(startingEpoch);
    if (!model) {
      await log('üÜï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏ LSTM', 'info', 'trainLSTMModel');
      model = await createLSTMModel();
     // await log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏: ${JSON.stringify(model.toJSON())}`, 'detail', 'trainLSTMModel');
    } else {
      await log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å —Å —ç–ø–æ—Ö–∏ ${startingEpoch}`, 'info', 'trainLSTMModel');
      await log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: ${JSON.stringify(model.toJSON())}`, 'detail', 'trainLSTMModel');
    }

    const validationData = trainingData.slice(-Math.floor(trainingData.length * 0.2));
    const trainingDataSet = trainingData.slice(0, -validationData.length);

    await log(`üìä –†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–≥–æ –Ω–∞–±–æ—Ä–∞: ${trainingDataSet.length}, –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞: ${validationData.length}`, 'debug', 'trainLSTMModel');
    await log(`üìä –§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö: 
      –î–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${trainingDataSet[0].input.length},
      –î–ª–∏–Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${trainingDataSet[0].output.length}`, 'debug', 'trainLSTMModel');

    const epochStartTime = Date.now();
    let bestValidationError = Infinity;
    let bestModel = null;
    let totalEpochTime = 0;

    for (let epoch = startingEpoch; epoch <= totalEpochs; epoch++) {
      const iterationStartTime = Date.now();
      await log(`üîÑ –ù–∞—á–∞–ª–æ —ç–ø–æ—Ö–∏ ${epoch}/${totalEpochs}`, 'debug', 'trainLSTMModel');

      try {
        const usedMemory = process.memoryUsage().heapUsed / 1024 / 1024;
       // await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—É—á–µ–Ω–∏–µ–º: ${usedMemory.toFixed(2)} MB`, 'debug', 'trainLSTMModel');
       //await log(`üîß –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏: ${JSON.stringify(model.toJSON())}`, 'detail', 'trainLSTMModel');

        const stats = await new Promise((resolve, reject) => {
          const timeout = setTimeout(() => {
            reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è'));
          }, 300000); // 5 –º–∏–Ω—É—Ç

          try {
            const result = model.train(trainingDataSet, {
              iterations: 1,
              errorThresh: 0.005,
              log: true,
              logPeriod: 1,
              callback: (stats) => {
                log(`üîÑ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: ${JSON.stringify(stats)}`, 'debug', 'trainLSTMModel');
              }
            });
            clearTimeout(timeout);
            resolve(result); 
          } catch (error) {
            clearTimeout(timeout);
            reject(error);
          }
        });

        const iterationEndTime = Date.now();
        const iterationDuration = (iterationEndTime - iterationStartTime) / 1000;
        totalEpochTime += iterationDuration;

        const accuracy = calculateAccuracy(model, trainingDataSet);
        const validationError = calculateValidationError(model, validationData);
        const avgEpochTime = totalEpochTime / (epoch - startingEpoch + 1);
        const remainingTime = (totalEpochs - epoch) * avgEpochTime;

        await log(
          `üí™ –≠–ø–æ—Ö–∞ ${epoch}/${totalEpochs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞! 
          –û—à–∏–±–∫–∞: ${stats.error.toFixed(4)}, 
          –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy.toFixed(2)}%, 
          –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${validationError.toFixed(4)},
          –í—Ä–µ–º—è —ç–ø–æ—Ö–∏: ${iterationDuration.toFixed(2)}—Å,
          –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è —ç–ø–æ—Ö–∏: ${avgEpochTime.toFixed(2)}—Å,
          –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è: ${formatTime(remainingTime)}`, 
          'info',
          'trainLSTMModel'
        );

        await log(`üìä –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —ç–ø–æ—Ö–∏: ${JSON.stringify(stats)}`, 'debug', 'trainLSTMModel');
        await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ —ç–ø–æ—Ö–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'trainLSTMModel');

        if (validationError < bestValidationError) {
          bestValidationError = validationError;
          bestModel = model.toJSON();
          await saveLSTMModel(model, epoch);
          await log(`üèÜ –ù–æ–≤–∞—è –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (—ç–ø–æ—Ö–∞ ${epoch})`, 'info', 'trainLSTMModel');
          await log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: ${JSON.stringify(bestModel)}`, 'debug', 'trainLSTMModel');
        }

        if (epoch % 10 === 0) {
          await saveLSTMModel(model, epoch);
          await log(`üíæ –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ (—ç–ø–æ—Ö–∞ ${epoch})`, 'info', 'trainLSTMModel');
          await log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏: ${JSON.stringify(model.toJSON())}`, 'debug', 'trainLSTMModel');
        }

        setImmediate(() => {
          log('üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞', 'debug', 'trainLSTMModel');
        });

      } catch (error) {
        await log(`‚ùå –û—à–∏–±–∫–∞ –≤ —ç–ø–æ—Ö–µ ${epoch}: ${error.message}`, 'error', 'trainLSTMModel');
        await log(`‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'error', 'trainLSTMModel');
        await log(`üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'error', 'trainLSTMModel');
        break; // –ü—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª –æ–±—É—á–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
      }
    }

    if (bestModel) {
      model.fromJSON(bestModel);
      await log('üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –ª—É—á—à–∞—è –º–æ–¥–µ–ª—å', 'info', 'trainLSTMModel');
      await log(`üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏: ${JSON.stringify(model.toJSON())}`, 'debug', 'trainLSTMModel');
    }

    const totalExecutionTime = (Date.now() - startTime) / 1000;
    const totalEpochsTime = (Date.now() - epochStartTime) / 1000;
    await log(`üéì LSTM –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞–Ω–∞! 
               –û–±—â–µ–µ –≤—Ä–µ–º—è: ${totalExecutionTime.toFixed(2)}—Å, 
               –í—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è: ${totalEpochsTime.toFixed(2)}—Å, 
               –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —ç–ø–æ—Ö—É: ${(totalEpochsTime / (totalEpochs - startingEpoch + 1)).toFixed(2)}—Å üéâ`, 
               'info', 'trainLSTMModel');
    await log(`üíæ –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'trainLSTMModel');
    return model;
  } catch (error) {
    const totalExecutionTime = (Date.now() - startTime) / 1000;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ LSTM –º–æ–¥–µ–ª–∏ ü§ñ: ${error.message}. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalExecutionTime.toFixed(2)}—Å`, 'error', 'trainLSTMModel');
    await log(`‚ùå –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'error', 'trainLSTMModel');
    await sendTelegramNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ LSTM: ${error.message}`);
    throw error; 
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å LSTM –∏–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π —ç–ø–æ—Ö–∏
 * @param {number} epoch –ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏
 * @returns {Promise<brain.recurrent.LSTM|null>} –ú–æ–¥–µ–ª—å LSTM –∏–ª–∏ null, –µ—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
 */
async function loadLSTMModelFromEpoch(epoch) {
  const modelPath = path.join(LSTM_MODEL_DIR, `lstm_model_epoch_${epoch}.json`);
  try {
    if (await fs.pathExists(modelPath)) {
      const modelData = await fs.readJson(modelPath);
      const model = new brain.recurrent.LSTM();
      model.fromJSON(modelData);
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
      if (typeof model.run !== 'function') {
        throw new Error('–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');
      }
      
      await log(`‚úÖ –ú–æ–¥–µ–ª—å LSTM —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —ç–ø–æ—Ö–∏ ${epoch}`, 'info', 'loadLSTMModelFromEpoch');
      return model;
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏ LSTM –∏–∑ —ç–ø–æ—Ö–∏ ${epoch}: ${error.message}`, 'error', 'loadLSTMModelFromEpoch');
  }
  return null;
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å LSTM –≤ —Ñ–∞–π–ª
 * @param {brain.recurrent.LSTM} model –ú–æ–¥–µ–ª—å LSTM
 * @param {number} epoch –ù–æ–º–µ—Ä —ç–ø–æ—Ö–∏
 * @returns {Promise<void>}
 */
async function saveLSTMModel(model, epoch) {
  const modelPath = path.join(LSTM_MODEL_DIR, `lstm_model_epoch_${epoch}.json`);
  try {
    await fs.ensureDir(LSTM_MODEL_DIR);
    await fs.writeJson(modelPath, model.toJSON(), { spaces: 2 });
    await log(`üíæ –ú–æ–¥–µ–ª—å LSTM —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —ç–ø–æ—Ö—É ${epoch}`, 'info', 'saveLSTMModel');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ LSTM: ${error.message}`, 'error', 'saveLSTMModel');
    throw error;
  }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é —ç–ø–æ—Ö—É LSTM –º–æ–¥–µ–ª–∏
 * @returns {Promise} –ù–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —ç–ø–æ—Ö–∏ –∏–ª–∏ 0, –µ—Å–ª–∏ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
 */
async function findLastSavedEpoch() {
  const startTime = Date.now();
  try {
    await log('üîç –ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —ç–ø–æ—Ö–∏ LSTM', 'info', 'findLastSavedEpoch');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'findLastSavedEpoch');

    await log(`üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${LSTM_MODEL_DIR}`, 'debug', 'findLastSavedEpoch');
    await fs.ensureDir(LSTM_MODEL_DIR);
    
    await log('üìö –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏', 'debug', 'findLastSavedEpoch');
    const files = await fs.readdir(LSTM_MODEL_DIR);
    await log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: ${files.length}`, 'debug', 'findLastSavedEpoch');

    const epochNumbers = files
      .filter(file => file.startsWith('lstm_model_epoch_') && file.endsWith('.json'))
      .map(file => parseInt(file.replace('lstm_model_epoch_', '').replace('.json', '')))
      .filter(num => !isNaN(num));

    await log(`üî¢ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —ç–ø–æ—Ö: ${JSON.stringify(epochNumbers)}`, 'debug', 'findLastSavedEpoch');

    const lastEpoch = epochNumbers.length > 0 ? Math.max(...epochNumbers) : 0;
    
    const executionTime = Date.now() - startTime;
    await log(`‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü–æ—Å–ª–µ–¥–Ω—è—è —ç–ø–æ—Ö–∞: ${lastEpoch}. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`, 'info', 'findLastSavedEpoch');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'findLastSavedEpoch');

    return lastEpoch;
  } catch (error) {
    const executionTime = Date.now() - startTime;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —ç–ø–æ—Ö–∏: ${error.message}`, 'error', 'findLastSavedEpoch');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'findLastSavedEpoch');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime}ms`, 'error', 'findLastSavedEpoch');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'findLastSavedEpoch');
    return 0;
  }
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–æ–¥–µ–ª–∏ LSTM. –î–æ–±–∞–≤–ª–µ–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
 * @param {brain.recurrent.LSTM} model –ú–æ–¥–µ–ª—å LSTM.
 * @param {Array} inputData –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
 * @returns {Array} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
 */
function predictWithLSTM(model, inputData) {
  try {
    log('üîÆ –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LSTM', 'info', 'predictWithLSTM');
    log(`‚û°Ô∏è –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: ${JSON.stringify(inputData)}`, 'debug', 'predictWithLSTM');

    if (!model || typeof model.run !== 'function') {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å LSTM: –º–æ–¥–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –º–µ—Ç–æ–¥ run.');
    }

    if (!Array.isArray(inputData) || inputData.length === 0 || !inputData.every(Array.isArray)) {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: –Ω–µ –º–∞—Å—Å–∏–≤, –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤, –∏–ª–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ —è–≤–ª—è—é—Ç—Å—è –º–∞—Å—Å–∏–≤–∞–º–∏.');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for (let i = 0; i < inputData.length; i++) {
      if (inputData[i].some(value => typeof value === 'undefined')) {
        throw new Error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: undefined –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ inputData[${i}]: ${JSON.stringify(inputData[i])}`);
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for (let i = 0; i < inputData.length; i++) {
      if (inputData[i].some(isNaN)) {
        throw new Error(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: NaN –∑–Ω–∞—á–µ–Ω–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤ inputData[${i}]: ${JSON.stringify(inputData[i])}`);
      }
    }

    const prediction = model.run(inputData);
    log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è LSTM: ${JSON.stringify(prediction)}`, 'info', 'predictWithLSTM');
    return prediction;
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é LSTM: ${error.message}`, 'error', 'predictWithLSTM');
    log(`‚ùå –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ trace –æ—à–∏–±–∫–∏: ${error.stack}`, 'error', 'predictWithLSTM');
    throw error;
  }
}

/**
 * –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏
 * @param {Array} historicalData –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {Array} –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
 */
async function prepareDataForLSTM(historicalData) {
  try {
    if (!Array.isArray(historicalData) || historicalData.length === 0) {
      throw new Error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –Ω–µ –º–∞—Å—Å–∏–≤ –∏–ª–∏ –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤.");
    }
    
    await log('üîß –ù–∞—á–∞–ª–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM', 'info', 'prepareDataForLSTM');
    
    const preparedData = await Promise.all(historicalData.map(async (data, index) => {
      const input = historicalData.slice(Math.max(0, index - 49), index + 1).map(candle => {
        const normalizedValues = [
          normalize(candle.open, 0, 10000),
          normalize(candle.high, 0, 10000),
          normalize(candle.low, 0, 10000),
          normalize(candle.close, 0, 10000),
          normalize(candle.volume, 0, 1000000)
        ];
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ undefined
        if (normalizedValues.some(value => typeof value === 'undefined')) {
          throw new Error(`Undefined –æ–±–Ω–∞—Ä—É–∂–µ–Ω –≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ ${index}`);
        }
        
        return normalizedValues;
      }).flat();

      let output;
      if (index < historicalData.length - 1) {
        const nextCandle = historicalData[index + 1];
        const priceChange = data.close !== 0 ? (nextCandle.close - data.close) / data.close : 0;
        if (typeof priceChange === 'undefined') {
          throw new Error(`Undefined –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ ${index}`);
        }
        if (priceChange > 0.005) output = [1, 0, 0];
        else if (priceChange < -0.005) output = [0, 1, 0];
        else output = [0, 0, 1];
      } else {
        output = [0, 0, 1];
      }

     //  await log(`–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞ ${index}: input.length=${input.length}, output=${JSON.stringify(output)}`, 'detail', 'prepareDataForLSTM');

      return { input, output };
    }));
    
    await log(`‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${preparedData.length}`, 'info', 'prepareDataForLSTM');
    return preparedData;
  } catch (error) {
    await log(`‚ùå –ü–æ–ª–Ω—ã–π —Å—Ç–µ–∫ trace –æ—à–∏–±–∫–∏: ${error.stack}`, 'error', 'prepareDataForLSTM');
    throw error;
  }
}


/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç –æ—à–∏–±–∫—É –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö
 * @param {brain.recurrent.LSTM} model –ú–æ–¥–µ–ª—å LSTM
 * @param {Array} validationData –í–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {number} –û—à–∏–±–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ
 */
function calculateValidationError(model, validationData) {
  let totalError = 0;
  for (const sample of validationData) {
    const prediction = model.run(sample.input);
    const error = prediction.reduce((sum, value, index) => sum + Math.pow(value - sample.output[index], 2), 0);
    totalError += error;
  }
  return totalError / validationData.length;
}

/**
 * –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
 * @param {string} symbol –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã
 * @param {string} interval –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π
 * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
 */
async function analyzeDataWithCombinedModels(symbol, interval = '15m') {
  const startTime = Date.now();
  try {
    await log(`üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏ –¥–ª—è ${symbol} –Ω–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ ${interval}`, 'info', 'analyzeDataWithCombinedModels');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'analyzeDataWithCombinedModels');
    
    if (!neuralNet || !neuralNet.model) {
      throw new Error('–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
    }
    await log(`‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏`, 'debug', 'analyzeDataWithCombinedModels');
    const inputData = await prepareInputDataForNN(symbol, interval);
    await log(`üìä –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${inputData.length}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM`, 'debug', 'analyzeDataWithCombinedModels');
    const lstmInputData = await prepareInputDataForLSTM(symbol, interval, 50, 1);
    await log(`üìä –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM: ${lstmInputData.length}`, 'debug', 'analyzeDataWithCombinedModels');

    let nnPrediction = [0.33, 0.33, 0.34]; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    let lstmPrediction = [0.33, 0.33, 0.34]; // –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    try {
      await log(`üß† –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏`, 'debug', 'analyzeDataWithCombinedModels');
      nnPrediction = await predictWithNeuralNetwork(neuralNet.model, inputData);
      await log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${JSON.stringify(nnPrediction)}`, 'debug', 'analyzeDataWithCombinedModels');
    } catch (nnError) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${nnError.message}`, 'error', 'analyzeDataWithCombinedModels');
      await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${nnError.stack}`, 'debug', 'analyzeDataWithCombinedModels');
    }

    if (global.lstmModel) { 
      try {
        await log(`üß† –ù–∞—á–∞–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é LSTM`, 'debug', 'analyzeDataWithCombinedModels');
        lstmPrediction = predictWithLSTM(global.lstmModel, lstmInputData[0]);
        await log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è LSTM: ${JSON.stringify(lstmPrediction)}`, 'debug', 'analyzeDataWithCombinedModels');
      } catch (lstmError) {
        await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ LSTM: ${lstmError.message}`, 'error', 'analyzeDataWithCombinedModels');
        await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏ LSTM: ${lstmError.stack}`, 'debug', 'analyzeDataWithCombinedModels');
      }
    } else {
      await log('‚ö†Ô∏è LSTM –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞', 'warn', 'analyzeDataWithCombinedModels'); 
    }

    const combinedPrediction = nnPrediction.map((value, index) => 
      (value + lstmPrediction[index]) / 2
    );
    await log(`üìä –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${JSON.stringify(combinedPrediction)}`, 'info', 'analyzeDataWithCombinedModels');

    const [upProbability, downProbability, neutralProbability] = combinedPrediction;
    await log(`üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞: ${upProbability}, üìâ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–∞–¥–µ–Ω–∏—è: ${downProbability}, üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è: ${neutralProbability}`, 'debug', 'analyzeDataWithCombinedModels');
    
    let signal, signalStrength;
    if (upProbability > downProbability && upProbability > neutralProbability) {
      signal = 'buy';
      signalStrength = upProbability;
    } else if (downProbability > upProbability && downProbability > neutralProbability) {
      signal = 'sell';
      signalStrength = downProbability;
    } else {
      signal = 'hold';
      signalStrength = neutralProbability;
    }
    await log(`üö¶ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª: ${signal}, –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${signalStrength}`, 'info', 'analyzeDataWithCombinedModels');

    await log(`üíπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è ${symbol}`, 'debug', 'analyzeDataWithCombinedModels');
    const currentPrice = new Decimal(await getPrice(symbol));
    await log(`üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${symbol}: ${currentPrice}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üßÆ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞`, 'debug', 'analyzeDataWithCombinedModels');
    const risk = calculateRisk(combinedPrediction);
    await log(`‚ö†Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∏—Å–∫: ${risk}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üõë –†–∞—Å—á–µ—Ç Stop Loss`, 'debug', 'analyzeDataWithCombinedModels');
    const stopLoss = calculateStopLoss(currentPrice, risk, signal);
    await log(`üõë –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π Stop Loss: ${stopLoss}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üéØ –†–∞—Å—á–µ—Ç Take Profit`, 'debug', 'analyzeDataWithCombinedModels');
    const takeProfit = calculateTakeProfit(currentPrice, risk, signal);
    await log(`üéØ –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π Take Profit: ${takeProfit}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üèÉ‚Äç‚ôÇÔ∏è –†–∞—Å—á–µ—Ç Trailing Stop`, 'debug', 'analyzeDataWithCombinedModels');
    const trailingStop = calculateTrailingStop(currentPrice, risk, signal);
    await log(`üèÉ‚Äç‚ôÇÔ∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π Trailing Stop: ${trailingStop}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üìä –†–∞—Å—á–µ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏`, 'debug', 'analyzeDataWithCombinedModels');
    const volatility = await calculateVolatility(historicalData);
    await log(`üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üíº –†–∞—Å—á–µ—Ç —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏`, 'debug', 'analyzeDataWithCombinedModels');
    const positionSize = await calculateDynamicPositionSize(symbol, risk, volatility, signalStrength);
    await log(`üíº –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${positionSize}`, 'debug', 'analyzeDataWithCombinedModels');

    await log(`üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞`, 'debug', 'analyzeDataWithCombinedModels');
    const volume = await getAverageVolume(symbol, interval);
    await log(`üìä –°—Ä–µ–¥–Ω–∏–π –æ–±—ä–µ–º: ${volume}`, 'debug', 'analyzeDataWithCombinedModels');

    const result = {
      signal,
      signalStrength,
      currentPrice: currentPrice.toNumber(),
      risk,
      stopLoss: stopLoss.toNumber(),
      takeProfit: takeProfit.toNumber(),
      trailingStop: trailingStop.toNumber(),
      positionSize: positionSize.toNumber(),
      volume,
      rawPrediction: combinedPrediction
    };

    await log(`‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: ${JSON.stringify(result)}`, 'info', 'analyzeDataWithCombinedModels');
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'info', 'analyzeDataWithCombinedModels');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'analyzeDataWithCombinedModels');
    return result;
  } catch (error) {
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏: ${error.message}`, 'error', 'analyzeDataWithCombinedModels');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'analyzeDataWithCombinedModels');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'error', 'analyzeDataWithCombinedModels');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'analyzeDataWithCombinedModels');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return {
      signal: 'hold',
      signalStrength: 0,
      currentPrice: await getPrice(symbol),
      risk: 0,
      stopLoss: 0,
      takeProfit: 0,
      trailingStop: 0,
      positionSize: 0,
      volume: 0,
      rawPrediction: [0.33, 0.33, 0.34]
    };
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π
async function adjustModelWeights() {
  const startTime = Date.now();
  try {
    await log('‚öñÔ∏è –ù–∞—á–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π', 'info', 'adjustModelWeights');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'adjustModelWeights');
    
    await log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'debug', 'adjustModelWeights');
    const validationData = await getValidationData();
    await log(`üìä –†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞: ${validationData.length}`, 'debug', 'adjustModelWeights');

    await log('üß† –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ Brain.js', 'debug', 'adjustModelWeights');
    const brainAccuracy = await evaluateModelAccuracy(neuralNet, validationData);
    await log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å Brain.js: ${brainAccuracy.toFixed(4)}`, 'info', 'adjustModelWeights');

    await log('üß† –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏ LSTM', 'debug', 'adjustModelWeights');
    const lstmAccuracy = await evaluateModelAccuracy(global.lstmModel, validationData);
    await log(`üéØ –¢–æ—á–Ω–æ—Å—Ç—å LSTM: ${lstmAccuracy.toFixed(4)}`, 'info', 'adjustModelWeights');

    const totalAccuracy = brainAccuracy + lstmAccuracy;
    await log(`üìä –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ${totalAccuracy.toFixed(4)}`, 'debug', 'adjustModelWeights');

    const brainWeight = brainAccuracy / totalAccuracy;
    const lstmWeight = lstmAccuracy / totalAccuracy;

    await log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π', 'debug', 'adjustModelWeights');
    await saveModelWeights(brainWeight, lstmWeight);

    await log(`‚úÖ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Å–∞ –º–æ–¥–µ–ª–µ–π: Brain.js - ${brainWeight.toFixed(4)}, LSTM - ${lstmWeight.toFixed(4)}`, 'info', 'adjustModelWeights');

    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'info', 'adjustModelWeights');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'adjustModelWeights');

    return { brainWeight, lstmWeight };
  } catch (error) {
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π: ${error.message}`, 'error', 'adjustModelWeights');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'adjustModelWeights');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'error', 'adjustModelWeights');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'adjustModelWeights');
    return { brainWeight: 0.5, lstmWeight: 0.5 };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π
async function saveModelWeights(brainWeight, lstmWeight) {
  const weightsPath = path.join(__dirname, 'model_weights.json');
  try {
    await fs.writeJson(weightsPath, { brainWeight, lstmWeight });
    await log('üíæ –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'info', 'saveModelWeights');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π: ${error.message}`, 'error', 'saveModelWeights');
    throw error;
  }
}

//  –§—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤
function scheduleModelWeightAdjustment() {
  const ADJUSTMENT_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞
  setInterval(async () => {
    try {
      await log('üïí –ó–∞–ø—É—Å–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π', 'info', 'scheduleModelWeightAdjustment');
      await adjustModelWeights();
    } catch (error) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–µ–π: ${error.message}`, 'error', 'scheduleModelWeightAdjustment');
    }
  }, ADJUSTMENT_INTERVAL);
}

// –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
scheduleModelWeightAdjustment();


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
async function evaluateModelAccuracy(model, validationData) {
  const startTime = Date.now();
  try {
    await log('üéØ –ù–∞—á–∞–ª–æ –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏', 'info', 'evaluateModelAccuracy');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'evaluateModelAccuracy');
    await log(`üìä –†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞: ${validationData.length}`, 'debug', 'evaluateModelAccuracy');
    
    let correctPredictions = 0;
    let totalPredictions = 0;
    
    for (const sample of validationData) {
      await log(`üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞–∑—Ü–∞ ${totalPredictions + 1}/${validationData.length}`, 'debug', 'evaluateModelAccuracy');
      const prediction = await model.predict(sample.input);
      await log(`üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏: ${JSON.stringify(prediction)}`, 'debug', 'evaluateModelAccuracy');
      
      const predictedClass = prediction.indexOf(Math.max(...prediction));
      const actualClass = sample.output.indexOf(Math.max(...sample.output));
      
      await log(`üîç –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å: ${predictedClass}, –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∫–ª–∞—Å—Å: ${actualClass}`, 'debug', 'evaluateModelAccuracy');
      
      if (predictedClass === actualClass) {
        correctPredictions++;
        await log('‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ', 'debug', 'evaluateModelAccuracy');
      } else {
        await log('‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ', 'debug', 'evaluateModelAccuracy');
      }
      
      totalPredictions++;
    }
    
    const accuracy = correctPredictions / validationData.length;
    
    await log(`üìä –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ${(accuracy * 100).toFixed(2)}%`, 'info', 'evaluateModelAccuracy');
    await log(`‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: ${correctPredictions}/${totalPredictions}`, 'info', 'evaluateModelAccuracy');
    
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'info', 'evaluateModelAccuracy');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'evaluateModelAccuracy');
    
    return accuracy;
  } catch (error) {
    const endTime = Date.now();
    const executionTime = (endTime - startTime) / 1000;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ü–µ–Ω–∫–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏: ${error.message}`, 'error', 'evaluateModelAccuracy');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'evaluateModelAccuracy');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime} —Å–µ–∫—É–Ω–¥`, 'error', 'evaluateModelAccuracy');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'evaluateModelAccuracy');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π
 * @returns {Promise<Array>} –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
 */
async function getValidationData() {
  try {
    await log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 'info', 'getValidationData');
    
    const symbol = 'ETHUSDT';
    const interval = '15m';
    const lookback = 100;
    
    const historicalData = await fetchHistoricalDataForTraining(symbol, interval, lookback * 2);
    const preparedData = prepareDataForLSTM(historicalData);
    
    const validationData = preparedData.slice(-lookback);  // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    
    await log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${validationData.length} –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏`, 'info', 'getValidationData');
    
    return validationData;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.message}`, 'error', 'getValidationData');
    throw error;
  }
}

// –†–∞—Å—á–µ—Ç –æ–±—å–µ–º–∞ —Å–¥–µ–ª–∫–∏
async function calculateTradeVolume(symbol, interval, risk, signalStrength) {
  try {
    await log(`–ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–∫–∏ –¥–ª—è ${symbol}`, 'info', 'calculateTradeVolume');

    const averageVolume = new Decimal(await getAverageVolume(symbol, interval)); // Decimal
    const currentPrice = new Decimal(await getPrice(symbol)); // Decimal
    const usdToRubRate = new Decimal(await getUsdToRubRate()); // Decimal
    const availableBalance = new Decimal(await getAvailableBalance('ETH')); // Decimal
    const availableBalanceRub = availableBalance.times(currentPrice).times(usdToRubRate);

    await log(`–î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${availableBalance.toFixed(8)} ETH (${availableBalanceRub.toFixed(2)} RUB)`, 'info', 'calculateTradeVolume');


    const basePositionSize = averageVolume.times(0.03); // 1% –æ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞ (Decimal)
    let adjustedPositionSize = basePositionSize.times(signalStrength).times(new Decimal(1).minus(risk));  // Decimal


    const maxPositionSize = availableBalance.times(0.1); // –ú–∞–∫—Å–∏–º—É–º 10% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (Decimal)
    adjustedPositionSize = Decimal.min(adjustedPositionSize, maxPositionSize);  // Decimal

    const tradeVolume = Decimal.max(adjustedPositionSize, MIN_POSITION_SIZE);  // Decimal

    const tradeVolumeRub = tradeVolume.times(currentPrice).times(usdToRubRate);

    await log(`–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏: ${tradeVolume.toFixed(8)} ETH (${tradeVolumeRub.toFixed(2)} RUB)`, 'info', 'calculateTradeVolume');
    await log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞: –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞=${signalStrength.toFixed(4)}, –†–∏—Å–∫=${(risk.times(100)).toFixed(2)}%`, 'info', 'calculateTradeVolume'); // risk - Decimal

    return tradeVolume; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Decimal
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –æ–±—ä–µ–º–∞ —Å–¥–µ–ª–∫–∏: ${error.message}`, 'error', 'calculateTradeVolume');
    return new Decimal(0); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º Decimal 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤
async function getAverageVolume(symbol, interval, period = 24) {
  try {
    const historicalData = await fetchHistoricalData(symbol, interval, period);
    const volumes = historicalData.map(candle => candle.volume);
    const averageVolume = volumes.reduce((sum, volume) => sum + volume, 0) / volumes.length;


    await log(`–†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤ –¥–ª—è ${symbol}:`, 'info', 'getAverageVolume');
    await log(`–ü–µ—Ä–∏–æ–¥: ${period} –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤`, 'info', 'getAverageVolume');

    return averageVolume;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ä–µ–¥–Ω–µ–≥–æ –æ–±—ä–µ–º–∞ —Ç–æ—Ä–≥–æ–≤: ${error.message}`, 'error', 'getAverageVolume');
    return 0;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–∞
async function logRouteData(routeName, data) {
  const logDir = path.join(__dirname, 'route_logs');
  const logFile = path.join(logDir, `${routeName}.json`);

  try {
    await fs.ensureDir(logDir);
    if (!(await fs.pathExists(logFile))) {
      await fs.writeJson(logFile, data, { spaces: 2 });
      console.log(`Log created for route: ${routeName}`);
    }
  } catch (error) {
    console.error(`Error logging data for route ${routeName}:`, error);
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∏—Å–∫–∞
function calculateRisk(prediction) {
  const [upProbability, downProbability, neutralProbability] = prediction.map(p => new Decimal(p));
  const maxProbability = Decimal.max(upProbability, downProbability, neutralProbability);
  const risk = new Decimal(1).minus(maxProbability);
  return Decimal.min(Decimal.max(risk, new Decimal(0.01)), new Decimal(0.05)); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∏—Å–∫ –æ—Ç 1% –¥–æ 5%
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –°—Ç–æ–ø –ª–æ—Å—Å–∞
function calculateStopLoss(currentPrice, risk, signal) {
  const stopLossPercentage = risk.times(2); // –£–¥–≤–∞–∏–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
  return signal === 'buy' 
    ? currentPrice.times(new Decimal(1).minus(stopLossPercentage))
    : currentPrice.times(new Decimal(1).plus(stopLossPercentage));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ç—ç–π–∫ –ø—Ä–æ—Ñ–∏—Ç–∞
function calculateTakeProfit(currentPrice, risk, signal) {
  const takeProfitPercentage = risk.times(3); // –£—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
  return signal === 'buy' 
    ? currentPrice.times(new Decimal(1).plus(takeProfitPercentage))
    : currentPrice.times(new Decimal(1).minus(takeProfitPercentage));
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ADX (Average Directional Index)
function calculateADX(historicalData) {
  if (historicalData.length < 14) {
    return 0;
  }

  const highs = historicalData.map(data => data.high);
  const lows = historicalData.map(data => data.low);
  const closes = historicalData.map(data => data.close);

  let plusDM = [];
  let minusDM = [];
  let trueRange = [];

  for (let i = 1; i < highs.length; i++) {
    const highChange = highs[i] - highs[i-1];
    const lowChange = lows[i-1] - lows[i];

    plusDM.push(highChange > lowChange && highChange > 0 ? highChange : 0);
    minusDM.push(lowChange > highChange && lowChange > 0 ? lowChange : 0);

    trueRange.push(Math.max(
      highs[i] - lows[i],
      Math.abs(highs[i] - closes[i-1]),
      Math.abs(lows[i] - closes[i-1])
    ));
  }

  const smoothedPlusDM = calculateSmoothedAverage(plusDM, 14);
  const smoothedMinusDM = calculateSmoothedAverage(minusDM, 14);
  const smoothedTR = calculateSmoothedAverage(trueRange, 14);

  const plusDI = (smoothedPlusDM / smoothedTR) * 100;
  const minusDI = (smoothedMinusDM / smoothedTR) * 100;

  const dx = Math.abs((plusDI - minusDI) / (plusDI + minusDI)) * 100;

  return dx;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–≥–ª–∞–∂–µ–Ω–Ω–æ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ
function calculateSmoothedAverage(arr, period) {
  let smoothed = arr.slice(0, period).reduce((a, b) => a + b, 0) / period;
  for (let i = period; i < arr.length; i++) {
    smoothed = ((smoothed * (period - 1)) + arr[i]) / period;
  }
  return smoothed;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
function average(arr) {
  if (arr.length === 0) return 0;
  return arr.reduce((sum, val) => sum + val, 0) / arr.length;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
function calculateVolatility(closes) {
  if (closes.length < 2) return 0;
  
  const returns = closes.slice(1).map((price, index) => 
    (price - closes[index]) / closes[index]
  );
  
  const avgReturn = average(returns);
  const squaredDiffs = returns.map(r => Math.pow(r - avgReturn, 2));
  const variance = average(squaredDiffs);
  
  return Math.sqrt(variance) * Math.sqrt(252) * 100; // –ì–æ–¥–æ–≤–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π —Ç—Ä–µ–π–¥–µ—Ä–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º Fear and Greed Index –∫–∞–∫ –ø—Ä–∏–º–µ—Ä)
async function analyzeSentiment() {
  try {
    await log('üòä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–æ—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π', 'info', 'analyzeSentiment');
    const [fngData, cryptoData] = await Promise.all([fetchSentimentData(), fetchCryptoSentimentData()]);
    
    if (!fngData && !cryptoData) {
      return {
        fearGreedIndex: 50,
        cryptoSentiment: 50,
        sentiment: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
        description: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö)',
        value: 50,
        marketCapChange: 0
      };
    }

    const fearGreedIndex = fngData ? parseInt(fngData.value) : 50;
    const cryptoSentiment = cryptoData ? cryptoData.value : 50;
    
    let sentiment;
    let description;

    const averageSentiment = (fearGreedIndex + cryptoSentiment) / 2;

    if (averageSentiment > 75) {
      sentiment = '–ö—Ä–∞–π–Ω—è—è –∂–∞–¥–Ω–æ—Å—Ç—å';
      description = '–†—ã–Ω–æ–∫ –∫—Ä–∞–π–Ω–µ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ–Ω, –≤–æ–∑–º–æ–∂–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è';
    } else if (averageSentiment > 50) {
      sentiment = '–ñ–∞–¥–Ω–æ—Å—Ç—å';
      description = '–†—ã–Ω–æ–∫ –æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–µ–Ω, –Ω–æ –µ—Å—Ç—å —Ä–∏—Å–∫–∏';
    } else if (averageSentiment > 25) {
      sentiment = '–°—Ç—Ä–∞—Ö';
      description = '–†—ã–Ω–æ–∫ –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–µ–Ω, –Ω–æ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏';
    } else {
      sentiment = '–ö—Ä–∞–π–Ω–∏–π —Å—Ç—Ä–∞—Ö';
      description = '–†—ã–Ω–æ–∫ –∫—Ä–∞–π–Ω–µ –ø–µ—Å—Å–∏–º–∏—Å—Ç–∏—á–µ–Ω, –≤–æ–∑–º–æ–∂–µ–Ω —Ä–∞–∑–≤–æ—Ä–æ—Ç';
    }

    return {
      fearGreedIndex: fearGreedIndex,
      cryptoSentiment: cryptoSentiment,
      sentiment: sentiment,
      description: description,
      value: averageSentiment,
      marketCapChange: cryptoData ? cryptoData.marketCapChange : 0
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–π: ${error.message}`, 'error', 'analyzeSentiment');
    return {
      fearGreedIndex: 50,
      cryptoSentiment: 50,
      sentiment: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π',
      description: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π (–æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞)',
      value: 50,
      marketCapChange: 0
    };
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
function calculateStopLoss(currentPrice, risk, signal) {
  const stopLossPercentage = risk.times(2); // –£–¥–≤–∞–∏–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
  return signal === 'buy' 
    ? currentPrice.times(new Decimal(1).minus(stopLossPercentage))
    : currentPrice.times(new Decimal(1).plus(stopLossPercentage));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ü–µ–Ω—ã —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
function calculateTakeProfit(currentPrice, risk, signal) {
  const takeProfitPercentage = risk.times(3); // –£—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∏—Å–∫ –¥–ª—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç–∞
  return signal === 'buy' 
    ? currentPrice.times(new Decimal(1).plus(takeProfitPercentage))
    : currentPrice.times(new Decimal(1).minus(takeProfitPercentage));
}



// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–Ω—Ç–º–µ–Ω—Ç–∞
async function fetchSentimentData() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedData = sentimentCache.get('fearGreedIndex');
    if (cachedData) {
      return cachedData;
    }

    const response = await axios.get('https://api.alternative.me/fng/', { 
      timeout: 10000,
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'YourBotName/1.0'
      }
    });

    if (response.data && response.data.data && response.data.data.length > 0) {
      const result = response.data.data[0];
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
      sentimentCache.set('fearGreedIndex', result);

      return result;
    } else {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API Fear and Greed Index');
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö (Fear and Greed Index): ${error.message}`, 'error', 'fetchSentimentData');
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Ö –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    const cachedData = sentimentCache.get('fearGreedIndex');
    if (cachedData) {
      await log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Fear and Greed Index', 'warn', 'fetchSentimentData');
      return cachedData;
    }

    // –ï—Å–ª–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return { value: "50", value_classification: "Neutral" };
  }
}

const sentimentCache = new NodeCache({ stdTTL: 6 * 60 * 60 }); // –∫—ç—à –Ω–∞ 6 —á–∞—Å–æ–≤

let lastRequestTime = 0;
const REQUEST_INTERVAL = 400000; // 61 —Å–µ–∫—É–Ω–¥–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

async function fetchCryptoSentimentData() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedData = sentimentCache.get('cryptoSentiment');
    if (cachedData) {
      return cachedData;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    const now = Date.now();
    if (now - lastRequestTime < REQUEST_INTERVAL) {
      const waitTime = REQUEST_INTERVAL - (now - lastRequestTime);
      await new Promise(resolve => setTimeout(resolve, waitTime));
    }

    lastRequestTime = Date.now();

    const response = await axios.get('https://api.coingecko.com/api/v3/global', { 
      timeout: 5000,
      headers: {
        'Accept': 'application/json',
        'User-Agent': 'YourBotName/1.0'
      }
    });

    if (response.data && response.data.data && typeof response.data.data.market_cap_change_percentage_24h_usd === 'number') {
      const marketCapChange = response.data.data.market_cap_change_percentage_24h_usd;
      let sentimentValue;
      if (marketCapChange > 10) sentimentValue = 90;
      else if (marketCapChange > 5) sentimentValue = 75;
      else if (marketCapChange > 2.5) sentimentValue = 65;
      else if (marketCapChange > 0) sentimentValue = 55;
      else if (marketCapChange > -2.5) sentimentValue = 45;
      else if (marketCapChange > -5) sentimentValue = 35;
      else if (marketCapChange > -10) sentimentValue = 25;
      else sentimentValue = 10;

      const result = {
        value: sentimentValue,
        marketCapChange: marketCapChange
      };

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
      sentimentCache.set('cryptoSentiment', result);

      return result;
    } else {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API CoinGecko');
    }
  } catch (error) {
    if (error.response && error.response.status === 429) {
      await log('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ CoinGecko API. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.', 'warn', 'fetchCryptoSentimentData');
      return sentimentCache.get('cryptoSentiment') || { value: 50, marketCapChange: 0 };
    }
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è—Ö (CoinGecko): ${error.message}`, 'error', 'fetchCryptoSentimentData');
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
async function analyzeNews() {
  const parser = new Parser();
  const tokenizer = new natural.WordTokenizer();
  const analyzer = new natural.SentimentAnalyzer('English', natural.PorterStemmer, 'afinn');

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π RSS-—Ñ–∏–¥
    const feed = await parser.parseURL('https://cointelegraph.com/rss');
    const news = feed.items.slice(0, 10); // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –Ω–æ–≤–æ—Å—Ç–µ–π

    const analyzedNews = news.map(item => {
      const tokens = tokenizer.tokenize(item.title + ' ' + item.content);
      const sentiment = analyzer.getSentiment(tokens);
      return {
        title: item.title,
        sentiment: sentiment
      };
    });

    const overallSentiment = analyzedNews.reduce((sum, item) => sum + item.sentiment, 0) / analyzedNews.length;

    return {
      latestNews: analyzedNews.map(item => item.title),
      sentiment: overallSentiment
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –Ω–æ–≤–æ—Å—Ç–µ–π: ${error.message}`, 'error', 'analyzeNews');
    return {
      latestNews: [],
      sentiment: 0
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–¥–µ–ª–æ–∫

//—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫
async function analyzeTrades(startDate, endDate) {
  const tradeLogDir = path.join(__dirname, 'trade_logs');
  let allTrades = [];

  try {
    const files = await fs.readdir(tradeLogDir);
    for (const file of files) {
      if (file.startsWith('trades_') && file.endsWith('.json')) {
        const fileDate = file.split('_')[1].split('.')[0];
        if (fileDate >= startDate && fileDate <= endDate) {
          const trades = await fs.readJson(path.join(tradeLogDir, file));
          allTrades = allTrades.concat(trades);
        }
      }
    }

    const totalTrades = allTrades.length;
    const profitableTrades = allTrades.filter(trade => trade.order.profit > 0).length;
    const totalProfit = allTrades.reduce((sum, trade) => sum + (trade.order.profit || 0), 0);

    const analysis = {
      totalTrades,
      profitableTrades,
      unprofitableTrades: totalTrades - profitableTrades,
      totalProfit,
      winRate: (profitableTrades / totalTrades) * 100,
      averageProfit: totalProfit / totalTrades
    };

    await log(`–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω: ${JSON.stringify(analysis)}`, 'info', 'analyzeTrades');
    return analysis;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'analyzeTrades');
    throw error;
  }
}

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–∞–º, –≥–¥–µ —É –≤–∞—Å –æ–±—ä—è–≤–ª–µ–Ω—ã –¥—Ä—É–≥–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
const TRADE_ANALYSIS_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –≤ –≤–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
async function performPeriodicTradeAnalysis() {
  try {
    const endDate = new Date().toISOString().split('T')[0];
    const startDate = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0]; // 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    
    const analysis = await analyzeTrades(startDate, endDate);
    
    await log(`–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫: ${JSON.stringify(analysis)}`, 'info', 'performPeriodicTradeAnalysis');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ –≤ Telegram
    await sendTelegramMessage(`–ê–Ω–∞–ª–∏–∑ —Å–¥–µ–ª–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n${JSON.stringify(analysis, null, 2)}`);
    
    // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
    if (analysis.winRate < 50) {
      await log('–ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.', 'warn', 'performPeriodicTradeAnalysis');
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'performPeriodicTradeAnalysis');
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
setInterval(performPeriodicTradeAnalysis, TRADE_ANALYSIS_INTERVAL);

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è executeTrade —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
async function executeTrade(symbol, action, amount, signalId) {
  try {
    await log(`üöÄ –ù–∞—á–∞–ª–æ executeTrade. Symbol: ${symbol}, Action: ${action}, Amount: ${amount}, SignalId: ${signalId}`, 'debug', 'executeTrade');
    const currentPrice = await getPrice(symbol);
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ (–æ—Ç -0.1% –¥–æ +0.1%)
    const slippage = 1 + (Math.random() * 0.002 - 0.001);
    const executionPrice = currentPrice * slippage;
    
    await log(`–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}, –¶–µ–Ω–∞ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏—è: ${executionPrice}. Signal ID: ${signalId}`, 'info', 'executeTrade');

    let orderResult;
    if (currentTradingMode === 'test') {
      orderResult = await executeTestTrade(symbol, action, amount, executionPrice, signalId);
    } else {
      orderResult = await placeOrderWithAdvancedExecution(symbol, action.toUpperCase(), amount.toString(), executionPrice.toString());
    }

    if (orderResult.success) {
      const order = orderResult.order;
      await log(`üìà –û—Ä–¥–µ—Ä –≤—ã–ø–æ–ª–Ω–µ–Ω: ${JSON.stringify(order)}. Signal ID: ${signalId}`, 'info', 'executeTrade');
      await updateTradeHistory(order.orderId, action, order.price, amount, signalId);
      const updatedPortfolio = await updatePortfolio();
      
      const { profitLoss, profitLossPercentage } = await calculateProfitLoss(order, order.price);
      await log(`üìà –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${profitLoss.toFixed(8)} USD (${profitLossPercentage.toFixed(2)}%). Signal ID: ${signalId}`, 'info', 'executeTrade');

      const usdToRubRate = await getUsdToRubRate();
      const orderAmountRub = amount * order.price * usdToRubRate;
      const profitLossRub = profitLoss * usdToRubRate;
      await logTradingPerformance();
      await sendTradeNotificationToTelegram(order, profitLossRub, updatedPortfolio.totalValueRUB, orderAmountRub, signalId);
      
      return { 
        order, 
        profitLoss, 
        profitLossRub, 
        profitLossPercentage,
        signalId,
        updatedPortfolio
      };
    } else {
      await log(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—Ä–¥–µ—Ä. –ü—Ä–∏—á–∏–Ω–∞: ${orderResult.reason}. Signal ID: ${signalId}`, 'error', 'executeTrade');
      return null;
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: ${error.message}. Signal ID: ${signalId}`, 'error', 'executeTrade');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è
function calculateAdaptiveHoldTime(marketConditions, orderType) {
  const baseHoldTime = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –±–∞–∑–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
  let multiplier = 1;

  if (marketConditions.volatility > 0.02) {
    multiplier *= 0.8; // –£–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  } else if (marketConditions.volatility < 0.005) {
    multiplier *= 1.2; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∏ –Ω–∏–∑–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  }

  if (marketConditions.volume > 1.5) {
    multiplier *= 0.9; // –°–ª–µ–≥–∫–∞ —É–º–µ–Ω—å—à–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–º –æ–±—ä–µ–º–µ
  }

  if (orderType === 'buy' && marketConditions.trend === '–í–æ—Å—Ö–æ–¥—è—â–∏–π') {
    multiplier *= 1.1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–æ–∫ –≤ –≤–æ—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
  } else if (orderType === 'sell' && marketConditions.trend === '–ù–∏—Å—Ö–æ–¥—è—â–∏–π') {
    multiplier *= 1.1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∂ –≤ –Ω–∏—Å—Ö–æ–¥—è—â–µ–º —Ç—Ä–µ–Ω–¥–µ
  }

  const adaptiveHoldTime = Math.round(baseHoldTime * multiplier);
  
  log(`‚è±Ô∏è –†–∞—Å—á–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è:
  üìä –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è: ${baseHoldTime} –º—Å
  üìà –ú–Ω–æ–∂–∏—Ç–µ–ª—å: ${multiplier.toFixed(2)}
  üî¢ –ò—Ç–æ–≥–æ–≤–æ–µ –≤—Ä–µ–º—è: ${adaptiveHoldTime} –º—Å
  üíπ –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${marketConditions.volatility.toFixed(4)}
  üìä –û–±—ä–µ–º: ${marketConditions.volume.toFixed(2)}
  üîÄ –¢—Ä–µ–Ω–¥: ${marketConditions.trend}
  üîÑ –¢–∏–ø –æ—Ä–¥–µ—Ä–∞: ${orderType}`, 'info', 'calculateAdaptiveHoldTime');

  return adaptiveHoldTime;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–∑–∏—Ü–∏–∏
async function checkAndClosePosition(symbol, order, stopLossPrice, takeProfitPrice) {
  try {
    await log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'checkAndClosePosition');
    const currentPrice = new Decimal(await getPrice(symbol));
    const decimalStopLossPrice = new Decimal(stopLossPrice);
    const decimalTakeProfitPrice = new Decimal(takeProfitPrice);
    
    await log(`üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toString()}
    üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${decimalStopLossPrice.toString()}
    üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${decimalTakeProfitPrice.toString()}`, 'detail', 'checkAndClosePosition');

    if ((order.side === 'BUY' && currentPrice.lessThanOrEqualTo(decimalStopLossPrice)) || 
        (order.side === 'SELL' && currentPrice.greaterThanOrEqualTo(decimalStopLossPrice))) {
      await log(`üö® –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç–æ–ø-–ª–æ—Å—Å`, 'warn', 'checkAndClosePosition');
      await closePosition(symbol, order, currentPrice, 'Stop Loss');
    } else if ((order.side === 'BUY' && currentPrice.greaterThanOrEqualTo(decimalTakeProfitPrice)) || 
               (order.side === 'SELL' && currentPrice.lessThanOrEqualTo(decimalTakeProfitPrice))) {
      await log(`üéâ –î–æ—Å—Ç–∏–≥–Ω—É—Ç —É—Ä–æ–≤–µ–Ω—å —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç`, 'info', 'checkAndClosePosition');
      await closePosition(symbol, order, currentPrice, 'Take Profit');
    } else {
      await log(`‚è≥ –ü–æ–∑–∏—Ü–∏—è –Ω–µ –∑–∞–∫—Ä—ã—Ç–∞. –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice.toString()}`, 'info', 'checkAndClosePosition');
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`, 'error', 'checkAndClosePosition');
    await handleApiError(error, 'checkAndClosePosition');
  }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏
async function executeTestTrade(symbol, action, amount, executionPrice, signalId) {
  try {
    await log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏: ${action} ${amount} ${symbol} –ø–æ —Ü–µ–Ω–µ ${executionPrice}. Signal ID: ${signalId}`, 'detail', 'executeTestTrade');

    const usdToRubRate = await getUsdToRubRate(); // –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å USD/RUB
    const orderValueRub = amount * executionPrice * usdToRubRate; // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ —Ä—É–±–ª—è—Ö

    const commission = amount * executionPrice * COMMISSION_RATE;
    const commissionRub = commission * usdToRubRate;


    const currentBalance = await fs.readJson(VIRTUAL_BALANCE_FILE);
    await log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(currentBalance)}`, 'detail', 'executeTestTrade');

    if (action === 'buy') {
      const cost = amount * executionPrice * (1 + COMMISSION_RATE);
      const costRub = cost * usdToRubRate;

      if (new Decimal(currentBalance.RUB).greaterThanOrEqualTo(costRub)) {

        const newRubBalance = new Decimal(currentBalance.RUB).minus(costRub); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        const newEthBalance = new Decimal(currentBalance.ETH).plus(amount);

        await updateVirtualBalance('RUB', newRubBalance);
        await updateVirtualBalance('ETH', newEthBalance);

        await log(`–ü–æ–∫—É–ø–∫–∞ ${amount} ETH –ø–æ —Ü–µ–Ω–µ ${executionPrice}. –ö–æ–º–∏—Å—Å–∏—è: ${commissionRub.toFixed(2)} RUB. –ë–∞–ª–∞–Ω—Å RUB: ${newRubBalance}, ETH: ${newEthBalance}. Signal ID: ${signalId}`, 'info', 'executeTestTrade');

      } else {
        const errorMessage = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏. Signal ID: ${signalId}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${costRub.toFixed(2)} RUB, –î–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance.RUB} RUB`;
        await log(errorMessage, 'error', 'executeTestTrade');
        throw new Error(errorMessage);
      }
    } else if (action === 'sell') {
      if (new Decimal(currentBalance.ETH).greaterThanOrEqualTo(amount)) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è

        const revenue = amount * executionPrice * (1 - COMMISSION_RATE);
        const revenueRub = revenue * usdToRubRate;
        const newRubBalance = new Decimal(currentBalance.RUB).plus(revenueRub); // –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
        const newEthBalance = new Decimal(currentBalance.ETH).minus(amount);

        await updateVirtualBalance('RUB', newRubBalance);
        await updateVirtualBalance('ETH', newEthBalance);

        await log(`–ü—Ä–æ–¥–∞–∂–∞ ${amount} ETH –ø–æ —Ü–µ–Ω–µ ${executionPrice}. –ö–æ–º–∏—Å—Å–∏—è: ${commissionRub.toFixed(2)} RUB. –ë–∞–ª–∞–Ω—Å RUB: ${newRubBalance}, ETH: ${newEthBalance}. Signal ID: ${signalId}`, 'info', 'executeTestTrade');
      } else {
        const errorMessage = `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. Signal ID: ${signalId}, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${amount}, –î–æ—Å—Ç—É–ø–Ω–æ: ${currentBalance.ETH}`;
        await log(errorMessage, 'error', 'executeTestTrade');
        throw new Error(errorMessage);
      }
    }

    const updatedBalance = await fs.readJson(VIRTUAL_BALANCE_FILE);
    await log(`–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${JSON.stringify(updatedBalance)}. Signal ID: ${signalId}`, 'info', 'executeTestTrade');

    await updateTradingStatistics(action, amount, executionPrice, orderValueRub);

    return {
      success: true,
      order: {
        orderId: Date.now().toString(),
        symbol: symbol,
        side: action === 'buy' ? 'Buy' : 'Sell',
        orderType: 'Market',
        qty: amount.toString(),
        price: executionPrice,
        status: 'FILLED',
        signalId: signalId
      }
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π —Å–¥–µ–ª–∫–∏: ${error.message}. Signal ID: ${signalId}`, 'error', 'executeTestTrade');
    return { success: false, reason: error.message };
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
let tradeHistory = [];

async function updateTradeHistory(orderId, action, price, amount, profitLoss = null) {
  await log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫`, 'detail', 'updateTradeHistory');
  if (await fs.pathExists(tradeHistoryPath)) {
    tradeHistory = await fs.readJson(tradeHistoryPath);
  }

  const commission = price * amount * COMMISSION_RATE; 
  const newTrade = {
    id: orderId,
    date: moment().format('YYYY-MM-DD HH:mm:ss'),
    type: action,
    price: price,
    amount: amount,
    result: profitLoss === null ? 'pending' : (profitLoss > 0 ? 'positive' : 'negative'),
    profit: profitLoss !== null ? profitLoss.toFixed(2) : '0',
    commission: commission.toFixed(2)
  };

  const existingTradeIndex = tradeHistory.findIndex(trade => trade.id === orderId);
  if (existingTradeIndex !== -1) {
    tradeHistory[existingTradeIndex] = newTrade;
  } else {
    tradeHistory.unshift(newTrade);
  }

  await fs.writeJson(tradeHistoryPath, tradeHistory, { spaces: 2 });
  await log(`–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${JSON.stringify(newTrade)}`, 'info', 'updateTradeHistory');
  return tradeHistory;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å Bybit
async function getPortfolioState() {
  const maxRetries = 3;
  const initialRetryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è`, 'info', 'getPortfolioState');
      
      await syncTimeWithBybit(); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º
      const adjustedTimestamp = getAdjustedTime() * 1000; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
      
      const accountType = 'UNIFIED';
      await log(`üì° –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è accountType: ${accountType}, timestamp: ${adjustedTimestamp}`, 'debug', 'getPortfolioState');

      const balances = await bybitClient.getWalletBalance({ 
        accountType: accountType,
        timestamp: adjustedTimestamp,
        recv_window: 20000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–∫–Ω–æ –ø—Ä–∏–µ–º–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥
      });

      await log(`üì• –û—Ç–≤–µ—Ç –æ—Ç Bybit API –ø–æ–ª—É—á–µ–Ω`, 'debug', 'getPortfolioState');

      if (!balances || balances.retCode !== 0) {
        throw new Error(`–û—à–∏–±–∫–∞ API Bybit: ${balances.retMsg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }

      const portfolio = {};
      for (const asset of balances.result.list) {
        const coin = asset.coin;
        portfolio[coin] = {
          total: parseFloat(asset.walletBalance) || 0,
          free: parseFloat(asset.free) || 0,
          locked: parseFloat(asset.locked) || 0
        };

        await log(`üí∞ –ë–∞–ª–∞–Ω—Å ${coin}: total=${portfolio[coin].total}, free=${portfolio[coin].free}, locked=${portfolio[coin].locked}`, 'info', 'getPortfolioState');
      }

      await log(`üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –ø–æ–ª—É—á–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 'info', 'getPortfolioState');
      return portfolio;

    } catch (error) {
      await log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${error.message}`, 'error', 'getPortfolioState');
      
      if (error.response) {
        await log(`üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API: ${JSON.stringify(error.response.data)}`, 'error', 'getPortfolioState');
      }
      
      if (attempt === maxRetries) {
        await log(`üòû –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã`, 'error', 'getPortfolioState');
        throw error;
      }

      const retryDelay = initialRetryDelay * Math.pow(2, attempt - 1);
      await log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`, 'info', 'getPortfolioState');
      await new Promise(resolve => setTimeout(resolve, retryDelay));
    }
  }
}

function getAdjustedTime() {
  const adjustedTime = Math.floor(Date.now() / 1000) + (global.bybitTimeOffset || 0);
  console.log(`‚è∞ –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è: ${adjustedTime}`);
  return adjustedTime;
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
async function syncTimeWithBybit() {
  try {
    const startTime = Date.now();
    const serverTime = await bybitClient.getServerTime();
    const endTime = Date.now();
    const requestTime = endTime - startTime;

    if (serverTime && serverTime.result && serverTime.result.timeSecond) {
      const serverTimestamp = serverTime.result.timeSecond * 1000;
      const localTimestamp = Math.floor((startTime + endTime) / 2); // –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞
      global.bybitTimeOffset = serverTimestamp - localTimestamp;

      await log(`‚è∞ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å Bybit. –°–º–µ—â–µ–Ω–∏–µ: ${global.bybitTimeOffset}–º—Å, –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${requestTime}–º—Å`, 'info', 'syncTimeWithBybit');
    } else {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ Bybit');
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å Bybit: ${error.message}`, 'error', 'syncTimeWithBybit');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
async function getPortfolioValue() {
  const ethPrice = new Decimal(await getPrice('ETHUSDT'));
  const usdToRubRate = new Decimal(await getUsdToRubRate());
  const ethBalance = new Decimal(await getVirtualBalance('ETH'));
  const rubBalance = new Decimal(await getVirtualBalance('RUB'));
  const portfolioValueRub = ethBalance.times(ethPrice).times(usdToRubRate).plus(rubBalance);
  return portfolioValueRub.toNumber(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∏—Å–ª–æ
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
async function autoTrade(analysisResult, minSignalStrength, maxRisk) {
  await log('–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è autoTrade', 'info', 'autoTrade');

  try {
    const { signal, signalStrength, signalData, risk, price, recommendedTradeVolume } = analysisResult;

    await log(`–ê–Ω–∞–ª–∏–∑ —Å–∏–≥–Ω–∞–ª–∞: –°–∏–≥–Ω–∞–ª: ${signal}, –°–∏–ª–∞: ${signalStrength.toFixed(2)}, –†–∏—Å–∫: ${risk.toFixed(2)}`, 'detail', 'autoTrade');
    await log(`–ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: –ú–∏–Ω. —Å–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${minSignalStrength.toFixed(2)}, –ú–∞–∫—Å. —Ä–∏—Å–∫: ${maxRisk.toFixed(2)}`, 'detail', 'autoTrade');
    await log(`–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏: ${currentTradingMode}`, 'detail', 'autoTrade');

    if ((signal === '–ü–æ–∫—É–ø–∞—Ç—å' || signal === '–ü—Ä–æ–¥–∞–≤–∞—Ç—å') && 
    signalStrength >= minSignalStrength * 0.4 && // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 0.6
    risk <= maxRisk * 2.5) { // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2
        const action = signal === '–ü–æ–∫—É–ø–∞—Ç—å' ? 'buy' : 'sell';
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USD/RUB
        const usdToRubRate = await getUsdToRubRate();
        
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ –∏–∑ USD –≤ RUB
        const tradeVolumeRUB = recommendedTradeVolume * usdToRubRate;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏ –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if (tradeVolumeRUB > currentPortfolioValueRUB) {
          await log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏ (${tradeVolumeRUB.toFixed(2)} RUB) –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (${currentPortfolioValueRUB.toFixed(2)} RUB). –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–º.`, 'warn', 'autoTrade');
          tradeVolumeRUB = currentPortfolioValueRUB * MAX_POSITION_SIZE;
        }
        
        const amount = tradeVolumeRUB / (price * usdToRubRate); // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º RUB –≤ ETH

        try {
            const signalId = Date.now();
            await log(`–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É: ${action} ${amount.toFixed(4)} ETH (${tradeVolumeRUB.toFixed(2)} RUB)`, 'info', 'autoTrade');
            const { order } = await executeTrade(action, amount, signalId);
            await log(`–°–¥–µ–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: ${JSON.stringify(order)}`, 'detail', 'autoTrade');
            
            try {
                await updatePortfolio();
            } catch (updateError) {
                await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${updateError.message}`, 'error', 'autoTrade');
            }

            const newSignal = {
                id: signalId,
                type: action,
                timeframe: '15m',
                date: moment().format('YYYY-MM-DD HH:mm:ss'),
                price: order.price,
                signalData: signalData,
                signalStrength,
                completed: false
            };

            signals.unshift(newSignal);
            io.emit('signal', newSignal);

            let portfolioValue;
            try {
                portfolioValue = await getPortfolioValue();
                currentPortfolioValueRUB = portfolioValue * usdToRubRate;
            } catch (portfolioError) {
                await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${portfolioError.message}`, 'error', 'autoTrade');
                portfolioValue = null;
            }

            const telegramMessage = `–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è (${currentTradingMode}): ${action.toUpperCase()} ${amount.toFixed(4)} ETH\n–¶–µ–Ω–∞: ${order.price} USD\n–°—É–º–º–∞: ${tradeVolumeRUB.toFixed(2)} RUB\n–°–∏–≥–Ω–∞–ª: ${signal}\n–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${signalStrength}\n–†–∏—Å–∫: ${risk}\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${currentPortfolioValueRUB.toFixed(2)} RUB\n–î–µ—Ç–∞–ª–∏: ${JSON.stringify(signalData, null, 2)}`;
            await sendTelegramMessage(telegramMessage);
        } catch (error) {
            await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–∫–∏: ${error.message}`, 'error', 'autoTrade');
            await handleApiError(error, 'autoTrade');
        }
    } else {
      await log(`–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏. –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${signalStrength.toFixed(2)}, –¢—Ä–µ–±—É–µ–º–∞—è —Å–∏–ª–∞: ${minSignalStrength.toFixed(2)}, –†–∏—Å–∫: ${risk.toFixed(2)}, –ú–∞–∫—Å. –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ä–∏—Å–∫: ${maxRisk.toFixed(2)}`, 'detail', 'autoTrade');
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –≤ autoTrade: ${error.message}`, 'error', 'autoTrade');
    await handleApiError(error, 'autoTrade');
  } finally {
    await log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ autoTrade', 'info', 'autoTrade');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message) {
  try {
    const response = await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
      chat_id: telegramChatId,
      text: message
    });

    if (!response.data.ok) {
      throw new Error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram');
    }

    await log('–°–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'detail', 'sendTelegramMessage');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${error.message}`, 'error', 'sendTelegramMessage');
    // –ù–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ 
async function getNeuralNetworkPrediction(symbol, interval = '15m') {
  try {
    await log(`–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –¥–ª—è ${symbol}`, 'info', 'getNeuralNetworkPrediction');
    
    const recentData = await fetchRecentData(symbol, interval, 100);
    if (!recentData || recentData.length < 50) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 50 —Ç–æ—á–µ–∫)');
    }
    
    const input = prepareInputData(recentData);
    
    try {
      validateInputData(input);
    } catch (validationError) {
      await log(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${validationError.message}`, 'error', 'getNeuralNetworkPrediction');
      return [0.33, 0.33, 0.34];
    }
    
    const neuralNet = await loadLatestModel();
    if (!neuralNet || !neuralNet.model) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏');
    }
    
    const prediction = await predictWithNeuralNetwork(neuralNet.model, input);
    await log(`–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è ${symbol}: ${JSON.stringify(prediction)}`, 'info', 'getNeuralNetworkPrediction');
    
    return prediction;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${error.message}`, 'error', 'getNeuralNetworkPrediction');
    return [0.33, 0.33, 0.34];
  }
}

// –†–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
async function placeGridOrders(symbol) {
  const startTime = Date.now();
  try {
    await log(`–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –¥–ª—è —Å–∏–º–≤–æ–ª–∞: ${symbol}. –†–µ–∂–∏–º: ${currentTradingMode}`, 'info', 'placeGridOrders');

    const usdToRubRate = await getUsdToRubRate();
    const ethPrice = await getPrice('ETHUSDT');
    const initialBalanceRUB = 10000;
    const initialBalanceETH = initialBalanceRUB / (usdToRubRate * ethPrice);

    await log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalanceETH.toFixed(8)} ETH (${initialBalanceRUB.toFixed(2)} RUB)`, 'info', 'placeGridOrders');

    const currentPrice = await getPrice(symbol);
    if (!currentPrice) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É');
    }
    const gridStep = currentPrice * (GRID_STEP_PERCENTAGE / 100);

    let remainingBalance = initialBalanceETH;
    const placedOrders = [];
    const MIN_ORDER_SIZE = 0.00092; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞ –≤ ETH
    let levelIndex = 0; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º levelIndex –≤–Ω–µ —Ü–∏–∫–ª–∞

    while (placedOrders.length < 500 && remainingBalance >= MIN_ORDER_SIZE) {
      // –í—ã—á–∏—Å–ª—è–µ–º —Ü–µ–Ω—ã –¥–ª—è buy –∏ sell –æ—Ä–¥–µ—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ levelIndex
      const buyPrice = currentPrice - (levelIndex + 1) * gridStep;
      const sellPrice = currentPrice + (levelIndex + 1) * gridStep;
      levelIndex++; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º levelIndex –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è —Å–µ—Ç–∫–∏

      const orderSize = Math.max(Math.min(remainingBalance * 0.01, MIN_ORDER_SIZE), MIN_POSITION_SIZE);

      try {
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ—Ä–¥–µ—Ä–∞
        const analysisResult = await analyzeDataWithCombinedModels(symbol);
        
        if (!analysisResult || typeof analysisResult !== 'object') {
          throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞');
        }

        if (remainingBalance >= orderSize) {
          const buyOrder = await placeOrder(symbol, 'Buy', orderSize, buyPrice, analysisResult);
          if (buyOrder) {
            placedOrders.push(buyOrder);
            remainingBalance -= orderSize;
            await log(`–†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É: ${orderSize.toFixed(8)} ETH –ø–æ —Ü–µ–Ω–µ ${buyPrice.toFixed(2)} USD`, 'info', 'placeGridOrders');
          } else {
            await log(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø–æ–∫—É–ø–∫—É –ø–æ —Ü–µ–Ω–µ ${buyPrice.toFixed(2)} USD`, 'warn', 'placeGridOrders');
          }

          const sellOrder = await placeOrder(symbol, 'Sell', orderSize, sellPrice, analysisResult);
          if (sellOrder) {
            placedOrders.push(sellOrder);
            remainingBalance -= orderSize;
            await log(`–†–∞–∑–º–µ—â–µ–Ω –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É: ${orderSize.toFixed(8)} ETH –ø–æ —Ü–µ–Ω–µ ${sellPrice.toFixed(2)} USD`, 'info', 'placeGridOrders');
          } else {
            await log(`–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –ø–æ —Ü–µ–Ω–µ ${sellPrice.toFixed(2)} USD`, 'warn', 'placeGridOrders');
          }
        }

        await log(`–û—Å—Ç–∞–≤—à–∏–π—Å—è –±–∞–ª–∞–Ω—Å: ${remainingBalance.toFixed(8)} ETH (${(remainingBalance * currentPrice * usdToRubRate).toFixed(2)} RUB)`, 'info', 'placeGridOrders');

      } catch (orderError) {
        await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: ${orderError.message}`, 'error', 'placeGridOrders');
        // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –æ—Ä–¥–µ—Ä
        continue;
      }

      if (placedOrders.length >= 500) {
        await log('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 500 –æ—Ä–¥–µ—Ä–æ–≤. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.', 'warn', 'placeGridOrders');
        break;
      }
    }

    const placementTime = Date.now() - startTime;
    await log(`–°–µ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –∑–∞ ${placementTime} –º—Å`, 'info', 'placeGridOrders');

    await log(`–°–µ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω–∞ –¥–ª—è ${symbol}. –í—Å–µ–≥–æ —Ä–∞–∑–º–µ—â–µ–Ω–æ –æ—Ä–¥–µ—Ä–æ–≤: ${placedOrders.length}`, 'info', 'placeGridOrders');
    await log(`–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${(initialBalanceETH - remainingBalance).toFixed(8)} ETH`, 'info', 'placeGridOrders');
    await log(`–°—É–º–º–∞—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ RUB: ${((initialBalanceETH - remainingBalance) * currentPrice * usdToRubRate).toFixed(2)} RUB`, 'info', 'placeGridOrders');

    return placedOrders;

  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤: ${error.message}`, 'error', 'placeGridOrders');
    const placementTime = Date.now() - startTime;
    await log(`–†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–æ–π –∑–∞ ${placementTime} –º—Å`, 'error', 'placeGridOrders');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
async function updateTestPortfolio(side, size, price) {
  try {
    await log(`üìä –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${side} ${size} ETH –ø–æ —Ü–µ–Ω–µ ${price} USD`, 'info', 'updateTestPortfolio');

    let balance = await getVirtualBalance();
    const ethPriceUsd = new Decimal(price);
    const usdToRubRate = new Decimal(await getUsdToRubRate());
    const sizeDecimal = new Decimal(size);

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ balance.ETH - —ç—Ç–æ Decimal
    balance.ETH = new Decimal(balance.ETH);

    const orderValueRub = sizeDecimal.times(ethPriceUsd).times(usdToRubRate);
    
    await log(`üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${balance.ETH.toFixed(8)} ETH`, 'info', 'updateTestPortfolio');
    await log(`üí∞ –°—É–º–º–∞ –æ—Ä–¥–µ—Ä–∞: ${sizeDecimal.toFixed(8)} ETH (${orderValueRub.toFixed(2)} RUB)`, 'info', 'updateTestPortfolio');

    let profitLossEth;
    if (side.toUpperCase() === 'BUY') {
      profitLossEth = sizeDecimal;
      balance.ETH = balance.ETH.plus(sizeDecimal);
    } else if (side.toUpperCase() === 'SELL') {
      if (balance.ETH.lt(sizeDecimal)) {
        throw new Error(`üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è: ${sizeDecimal} ETH, –î–æ—Å—Ç—É–ø–Ω–æ: ${balance.ETH} ETH`);
      }
      profitLossEth = sizeDecimal.negated();
      balance.ETH = balance.ETH.minus(sizeDecimal);
    } else {
      throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ä–¥–µ—Ä–∞: ${side}`);
    }

    await updateVirtualBalance('ETH', balance.ETH);

    const totalValueRub = balance.ETH.times(ethPriceUsd).times(usdToRubRate);
    const profitLossRub = profitLossEth.times(ethPriceUsd).times(usdToRubRate);
    
    await log(`‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω: ${balance.ETH.toFixed(8)} ETH (${totalValueRub.toFixed(2)} RUB)`, 'info', 'updateTestPortfolio');
    await log(`üìà –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLossEth.toFixed(8)} ETH (${profitLossRub.toFixed(2)} RUB)`, 'info', 'updateTestPortfolio');

    return {
      ETH: balance.ETH,
      RUB: totalValueRub,
      profitLossEth: profitLossEth,
      profitLossRub: profitLossRub
    };
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${error.message}`, 'error', 'updateTestPortfolio');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è
async function placeOrderWithAdvancedExecution(symbol, side, size, price) {
  try {
    await log(`üîÑ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${symbol} ${side} ${size} –ø–æ —Ü–µ–Ω–µ ${price}`, 'info', 'placeOrderWithAdvancedExecution');
    
    const order = await placeOrder(symbol, side, size, price);
    if (!order || !order.orderId) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä');
    }

    const executionResult = await waitForOrderExecution(order, symbol);
    return executionResult;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –º–µ—Ö–∞–Ω–∏–∑–º–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${error.message}`, 'error', 'placeOrderWithAdvancedExecution');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ trailing stop
async function waitForOrderExecution(order, symbol) {
  const MAX_WAIT_TIME = 30 * 60 * 1000; // 30 –º–∏–Ω—É—Ç
  const CHECK_INTERVAL = 10 * 1000; // 10 —Å–µ–∫—É–Ω–¥
  const TRAILING_STOP_PERCENT = 0.005; // 0.5%

  let startTime = Date.now();
  let bestPrice = order.side === 'BUY' ? Infinity : 0;
  let trailingStopPrice = order.side === 'BUY' ? Infinity : 0;

  await log(`‚è≥ –ù–∞—á–∞–ª–æ –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'waitForOrderExecution');

  while (Date.now() - startTime < MAX_WAIT_TIME) {
    try {
      const orderStatus = await checkOrderStatus(order.orderId, symbol);
      
      if (orderStatus.status === 'FILLED') {
        await log(`‚úÖ –û—Ä–¥–µ—Ä ${order.orderId} –∏—Å–ø–æ–ª–Ω–µ–Ω`, 'info', 'waitForOrderExecution');
        return { success: true, order: orderStatus };
      }

      const currentPrice = await getPrice(symbol);
      
      if (order.side === 'BUY') {
        if (currentPrice < bestPrice) {
          bestPrice = currentPrice;
          trailingStopPrice = bestPrice * (1 + TRAILING_STOP_PERCENT);
          await log(`üìâ –ù–æ–≤–∞—è –ª—É—á—à–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏: ${bestPrice}, Trailing stop: ${trailingStopPrice}`, 'info', 'waitForOrderExecution');
        } else if (currentPrice > trailingStopPrice) {
          await log(`üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç trailing stop –¥–ª—è –ø–æ–∫—É–ø–∫–∏. –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'waitForOrderExecution');
          await cancelOrder(symbol, order.orderId);
          return { success: false, reason: 'TRAILING_STOP_TRIGGERED' };
        }
      } else { // SELL
        if (currentPrice > bestPrice) {
          bestPrice = currentPrice;
          trailingStopPrice = bestPrice * (1 - TRAILING_STOP_PERCENT);
          await log(`üìà –ù–æ–≤–∞—è –ª—É—á—à–∞—è —Ü–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏: ${bestPrice}, Trailing stop: ${trailingStopPrice}`, 'info', 'waitForOrderExecution');
        } else if (currentPrice < trailingStopPrice) {
          await log(`üö´ –î–æ—Å—Ç–∏–≥–Ω—É—Ç trailing stop –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ ${order.orderId}`, 'info', 'waitForOrderExecution');
          await cancelOrder(symbol, order.orderId);
          return { success: false, reason: 'TRAILING_STOP_TRIGGERED' };
        }
      }

      await new Promise(resolve => setTimeout(resolve, CHECK_INTERVAL));
    } catch (error) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'waitForOrderExecution');
    }
  }

  // –ï—Å–ª–∏ –æ—Ä–¥–µ—Ä –Ω–µ –∏—Å–ø–æ–ª–Ω–µ–Ω –∑–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è, –æ—Ç–º–µ–Ω—è–µ–º –µ–≥–æ
  await log(`‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${order.orderId}. –û—Ç–º–µ–Ω–∞.`, 'warn', 'waitForOrderExecution');
  await cancelOrder(symbol, order.orderId);
  return { success: false, reason: 'TIMEOUT' };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞
async function checkOrderStatus(orderId, symbol) {
  try {
    await log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ ${orderId}`, 'info', 'checkOrderStatus');
    const orderInfo = await bybitClient.getActiveOrder({
      category: 'spot',
      symbol: symbol,
      orderId: orderId
    });

    if (!orderInfo || !orderInfo.result) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞');
    }

    await log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${orderInfo.result.status}`, 'info', 'checkOrderStatus');
    return orderInfo.result;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${error.message}`, 'error', 'checkOrderStatus');
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞
async function placeOrder(symbol, side, size, price, analysisResult) {
  try {
    await log(`üîî –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: symbol=${symbol}, side=${side}, size=${size}, price=${price}, analysisResult=${JSON.stringify(analysisResult)}`, 'info', 'placeOrder');
    const normalizedSide = side.toUpperCase();

    const usdToRubRate = await getCachedUsdRubRate();
    const orderValueRub = new Decimal(size).times(price).times(usdToRubRate);

    await log(`–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞: ${symbol} ${normalizedSide} ${size} –ø–æ —Ü–µ–Ω–µ ${price}. –†–µ–∂–∏–º: ${currentTradingMode}`, 'info', 'placeOrder');

    const client = currentTradingMode === 'test' ? testBybitClient : bybitClient;

    const orderId = Date.now().toString();

    const order = {
      orderId,
      symbol,
      side: normalizedSide,
      price,
      size,
      status: '–í –û–ñ–ò–î–ê–ù–ò–ò',
      createdAt: new Date().toISOString(),
      signalStrength: analysisResult.signalStrength
    };

    await log(`–í –û–ñ–ò–î–ê–ù–ò–ò –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (ID ${orderId})`, 'info', 'placeOrder');

    let balanceBefore;
    let balanceAfter;

    if (currentTradingMode === 'test') {
        balanceBefore = await getVirtualBalance('ETH');
    }

    let orderResult;

    if (currentTradingMode === 'test') {
      balanceAfter = await updateTestPortfolio(normalizedSide, size, price);

      orderResult = {
        success: true,
        order: {
          ...order,
          status: 'FILLED'
        }
      };
    } else {
      orderResult = await client.submitOrder({
        category: 'spot',
        symbol: symbol,
        side: normalizedSide,
        orderType: 'LIMIT',
        qty: size.toString(),
        price: price.toString(),
        timeInForce: 'GTC'
      });

      if (orderResult.retCode !== 0) {
        throw new Error(`–û—à–∏–±–∫–∞ API Bybit: ${orderResult.retMsg}`);
      }
    }

    if (orderResult.success) {
      order.status = 'FILLED';

      let profitLossEth;

      if (currentTradingMode === 'test') {
          profitLossEth = new Decimal(balanceAfter.ETH).minus(balanceBefore);
      } else {
          const portfolioBeforeTrade = await getPortfolioValue();
          const portfolioAfterTrade = await getPortfolioValue();
          profitLossEth = new Decimal(portfolioAfterTrade).minus(portfolioBeforeTrade).dividedBy(price);
      }

      totalTrades++;
      if (profitLossEth.greaterThan(0)) {
        profitableTrades++;
      } else if (profitLossEth.lessThan(0)) {
        unprofitableTrades++;
      }

      const kpi = await calculateStrategyKPI();
      const currentPortfolioValueETH = currentTradingMode === 'test' ? balanceAfter.ETH : await getPortfolioValue();
      const currentPortfolioValueRUB = new Decimal(currentPortfolioValueETH).times(price).times(usdToRubRate);

      const logMessage = `
üîî –ù–û–í–´–ô –û–†–î–ï–† (ID: ${orderId})
‚è∞ –í—Ä–µ–º—è: ${moment().format('YYYY-MM-DD HH:mm:ss')}
üìä –¢–∏–ø: ${normalizedSide}
üí∞ –°—É–º–º–∞: ${size.toFixed(8)} ETH (${orderValueRub.toFixed(2)} RUB)
üí± –¶–µ–Ω–∞: ${price.toFixed(2)} USD
üíº –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${currentPortfolioValueETH.toFixed(8)} ETH (${currentPortfolioValueRUB.toFixed(2)} RUB)
üìà –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLossEth.toFixed(8)} ETH (${profitLossEth.times(price).times(usdToRubRate).toFixed(2)} RUB)
üìä KPI —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏:
–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${totalTrades}
–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${profitableTrades}
–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${unprofitableTrades}
–í–∏–Ω—Ä–µ–π—Ç: ${kpi.winRate.toFixed(2)}%
–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${kpi.totalProfitETH.toFixed(8)} ETH (${kpi.totalProfitRUB.toFixed(2)} RUB)
–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${kpi.averageProfitETH.toFixed(8)} ETH (${kpi.averageProfitRUB.toFixed(2)} RUB)`;

      await log(logMessage, 'info', 'placeOrder', true);

      return order;
    } else {
      order.status = 'REJECTED';
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: ${orderResult.reason}`, 'error', 'placeOrder');
      return order;
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'placeOrder');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
async function saveGridState() {
  try {
    await log('–ù–∞—á–∞–ª–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'saveGridState');
    const gridState = {
      orders: await getActiveOrders('ETHUSDT'),
      parameters: {
        GRID_STEP_PERCENTAGE,
        GRID_LEVELS
      },
      lastUpdate: new Date().toISOString()
    };

    const stateFile = path.join(__dirname, 'gridState.json');
    await fs.writeJson(stateFile, gridState);
    await log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: ${stateFile}`, 'info', 'saveGridState');
    await log('–û–∫–æ–Ω—á–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤', 'info','saveGridState');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏: ${error.message}`, 'error', 'saveGridState');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤
async function restoreGridState() {
  try {
    await log('–ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'restoreGridState');
    const stateFile = path.join(__dirname, 'gridState.json');
    if (await fs.pathExists(stateFile)) {
      const gridState = await fs.readJson(stateFile);

      // üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º let –¥–ª—è GRID_STEP_PERCENTAGE –∏ GRID_LEVELS
      GRID_STEP_PERCENTAGE = gridState.parameters.GRID_STEP_PERCENTAGE;  
      GRID_LEVELS = gridState.parameters.GRID_LEVELS;

      await log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. GRID_STEP_PERCENTAGE: ${GRID_STEP_PERCENTAGE}, GRID_LEVELS: ${GRID_LEVELS}`, 'info', 'restoreGridState');
      return gridState.orders;
    }
    await log('–§–∞–π–ª —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'warn', 'restoreGridState');
    return null;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∫–∏: ${error.message}`, 'error', 'restoreGridState');
    return null;
  }
}

// –í—ã–∑—ã–≤–∞–π—Ç–µ saveGridState –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∏ –ø–æ—Å–ª–µ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π:
setInterval(saveGridState, 15 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏
async function monitorAndUpdateGrid(symbol) {
  try {
    await log(`üîç –ù–∞—á–∞–ª–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏ –¥–ª—è ${symbol}`, 'info', 'monitorAndUpdateGrid');
    
    const openOrders = await getActiveOrders(symbol);
    await log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${openOrders.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`, 'detail', 'monitorAndUpdateGrid');
    
    const currentPrice = await getPrice(symbol);
    await log(`üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${symbol}: ${currentPrice}`, 'detail', 'monitorAndUpdateGrid');
    
    const prediction = await getNeuralNetworkPrediction(symbol);
    await log(`üß† –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: ${JSON.stringify(prediction)}`, 'detail', 'monitorAndUpdateGrid');
    
    const marketConditions = await analyzeMarketConditions();
    
    for (const order of openOrders) {
      const orderPrice = parseFloat(order.price);
      const priceDifference = Math.abs(currentPrice - orderPrice) / currentPrice;

      if (priceDifference > 0.05) { // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 5%
        await cancelOrder(symbol, order.orderId);
        const newPrice = calculateNewPrice(currentPrice, prediction, marketConditions);
        const adaptiveHoldTime = calculateAdaptiveHoldTime(marketConditions, order.side);
        const newOrder = await placeOrderWithAdvancedExecution(symbol, order.side, order.qty, newPrice);
        
        if (newOrder.success) {
          await log(`‚úÖ –û—Ä–¥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω: ${order.side} ${order.qty} ${symbol} –ø–æ —Ü–µ–Ω–µ ${newPrice}. –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${adaptiveHoldTime}ms`, 'info', 'monitorAndUpdateGrid');
        } else {
          await log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ—Ä–¥–µ—Ä: ${order.side} ${order.qty} ${symbol}. –ü—Ä–∏—á–∏–Ω–∞: ${newOrder.reason}`, 'warn', 'monitorAndUpdateGrid');
        }
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –æ—Ä–¥–µ—Ä–∞
    if (openOrders.length < 500) {
      const newOrders = await placeAdditionalGridOrders(symbol, currentPrice, openOrders.length);
      await log(`‚ûï –†–∞–∑–º–µ—â–µ–Ω–æ ${newOrders.length} –Ω–æ–≤—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`, 'info', 'monitorAndUpdateGrid');
    }

    await log(`‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–ª—è ${symbol} –∑–∞–≤–µ—Ä—à–µ–Ω—ã`, 'info', 'monitorAndUpdateGrid');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∫–∏: ${error.message}`, 'error', 'monitorAndUpdateGrid');
    await handleApiError(error, 'monitorAndUpdateGrid');
  }
}


// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤ —Å–µ—Ç–∫–∏
async function placeAdditionalGridOrders(symbol, currentPrice, existingOrdersCount) {
  const totalOrdersNeeded = 500;
  const ordersToPlace = totalOrdersNeeded - existingOrdersCount;
  const newOrders = [];

  let availableBalance = await getAvailableBalance('USDT');
  const initialBalance = availableBalance;

  for (let i = 0; i < ordersToPlace && availableBalance > 0; i++) {
    const side = i % 2 === 0 ? 'BUY' : 'SELL';
    const priceOffset = (GRID_STEP_PERCENTAGE / 100) * currentPrice * (Math.floor(i / 2) + 1);
    const price = side === 'BUY' ? currentPrice - priceOffset : currentPrice + priceOffset;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ 10% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ä–¥–µ—Ä–∞
      const maxOrderSize = Math.min(initialBalance * 0.1 / price, availableBalance / price);
      const orderSize = Math.min(calculateOrderSize(price, availableBalance), maxOrderSize);

      if (orderSize * price > availableBalance) {
        await log(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalance.toFixed(8)} USDT`, 'warn', 'placeAdditionalGridOrders');
        break;
      }

      const order = await placeOrder(symbol, side, orderSize, price);
      newOrders.push(order);
      availableBalance -= orderSize * price;

      await log(`–†–∞–∑–º–µ—â–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ä–¥–µ—Ä: ${side} ${orderSize.toFixed(8)} ${symbol} –ø–æ —Ü–µ–Ω–µ ${price} USD`, 'info', 'placeAdditionalGridOrders');
    } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'placeAdditionalGridOrders');
    }

    if (newOrders.length + existingOrdersCount >= 500) {
      await log('–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –≤ 500 –æ—Ä–¥–µ—Ä–æ–≤. –ü—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è.', 'warn', 'placeAdditionalGridOrders');
      break;
    }
  }

  await log(`–†–∞–∑–º–µ—â–µ–Ω–æ ${newOrders.length} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤`, 'info', 'placeAdditionalGridOrders');
  return newOrders;
}


// –ú–µ—Ö–∞–Ω–∏–∑–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏ –∏ —É–±—ã—Ç–∫–æ–≤
async function trackProfitLoss() {
  const ordersFile = path.join(__dirname, 'orders.json');
  let orders = [];
  if (await fs.pathExists(ordersFile)) {
      orders = await fs.readJson(ordersFile);
  }

  let totalProfit = 0;
  for (const order of orders) {
      if (order.status === 'FILLED') {
          if (order.side === 'BUY') {
              totalProfit -= order.price * order.qty;
          } else {
              totalProfit += order.price * order.qty;
          }
      }
  }

  await log(`–¢–µ–∫—É—â–∞—è –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${totalProfit.toFixed(2)} USDT`, 'info', 'trackProfitLoss');
  return totalProfit;
}

// –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
setInterval(trackProfitLoss, 60 * 60 * 1000); // –∫–∞–∂–¥—ã–π —á–∞—Å

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞
async function placeStopLossOrder(symbol, side, price, quantity) {
  try {
    await log(`üõë –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞: ${symbol} ${side} ${quantity} –ø–æ —Ü–µ–Ω–µ ${price}`, 'info', 'placeStopLossOrder');
    
    const decimalPrice = new Decimal(price);
    const decimalQuantity = new Decimal(quantity);

    if (currentTradingMode === 'test') {
      await log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ ${decimalPrice}`, 'info', 'placeStopLossOrder');
      return { success: true, message: '–¢–µ—Å—Ç–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä' };
    }

    const order = await bybitClient.submitOrder({
      category: 'spot',
      symbol: symbol,
      side: side,
      orderType: 'STOP',
      qty: decimalQuantity.toFixed(4),
      price: decimalPrice.toFixed(2),
      stopPrice: decimalPrice.toFixed(2),
      timeInForce: 'GTC'
    });

    await log(`‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: ${JSON.stringify(order)}`, 'info', 'placeStopLossOrder');
    return order;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'placeStopLossOrder');
    return { success: false, message: error.message };
  }
}


// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–µ—Ç–∫–∏
async function adjustGridParameters() {
  const profit = await trackProfitLoss();

  if (profit > 0) {
      // –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–≥ —Å–µ—Ç–∫–∏
      GRID_STEP_PERCENTAGE *= 1.1;
  } else {
      // –ï—Å–ª–∏ –ø—Ä–∏–±—ã–ª—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è, —É–º–µ–Ω—å—à–∞–µ–º —à–∞–≥ —Å–µ—Ç–∫–∏
      GRID_STEP_PERCENTAGE *= 0.9;
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∞–≥–∞ —Å–µ—Ç–∫–∏
  GRID_STEP_PERCENTAGE = Math.max(0.1, Math.min(GRID_STEP_PERCENTAGE, 5));

  await log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–µ—Ç–∫–∏ —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω—ã. –ù–æ–≤—ã–π —à–∞–≥: ${GRID_STEP_PERCENTAGE}%`, 'info', 'adjustGridParameters');

  // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  await cancelAllOrders('ETHUSDT');
  await placeGridOrders('ETHUSDT');
}

// –í—ã–∑—ã–≤–∞–π—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
setInterval(adjustGridParameters, 24 * 60 * 60 * 1000); // –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function runTradingStrategy() {
  try {
    await log('–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'info', 'runTradingStrategy');
    const savedOrders = await restoreGridState();
    if (savedOrders && savedOrders.length > 0) {
      await log('–ù–∞–π–¥–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞, –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'runTradingStrategy');
      await updateExistingOrders(savedOrders);
    } else {
      await log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –æ—Ä–¥–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Ç–∫–∏ –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'runTradingStrategy');
      await placeGridOrders('ETHUSDT');
    }

    await log('–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ç–∫–∏', 'info', 'runTradingStrategy');
    setInterval(async () => {
      try {
        await monitorAndUpdateGrid('ETHUSDT');
      } catch (monitorError) {
        await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Ç–∫–∏: ${monitorError.message}`, 'error', 'runTradingStrategy');
        await handleApiError(monitorError, 'monitorAndUpdateGrid');
      }
    }, 2 * 60 * 1000);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    try {
      const historicalData = await fetchHistoricalData('ETHUSDT', '15', 1000);
      await log(`–ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`, 'info', 'runTradingStrategy');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      
    } catch (historyError) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${historyError.message}`, 'error', 'runTradingStrategy');
      await handleApiError(historyError, 'fetchHistoricalData');
    }

    await log('–¢–æ—Ä–≥–æ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞', 'info', 'runTradingStrategy');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`, 'error', 'runTradingStrategy');
    await handleApiError(error, 'runTradingStrategy');
    await sendTelegramNotification(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`);
    
    // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 5 * 60 * 1000));
    await runTradingStrategy(); // –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
  }
}
// –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
runTradingStrategy();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è LSTM 
async function prepareInputDataForLSTM(symbol, interval = '15m', sequenceLength = 50, numSequences = 1) {
  const startTime = Date.now();
  try {
    await log(`üöÄ –ù–∞—á–∞–ª–æ prepareInputDataForLSTM –¥–ª—è ${symbol}`, 'info', 'prepareInputDataForLSTM');
    await log(`üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: interval=${interval}, sequenceLength=${sequenceLength}, numSequences=${numSequences}`, 'debug', 'prepareInputDataForLSTM');

    if (!symbol || typeof symbol !== 'string') {
      throw new Error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª');
    }

    const dataNeededForIndicators = 100;
    const totalDataNeeded = sequenceLength * numSequences + dataNeededForIndicators;
    await log(`üìà –ó–∞–ø—Ä–æ—Å ${totalDataNeeded} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`, 'debug', 'prepareInputDataForLSTM');

    const historicalData = await fetchHistoricalData(symbol, interval, totalDataNeeded);

    if (!historicalData || !Array.isArray(historicalData) || historicalData.length === 0) {
      throw new Error("‚ùå –û—à–∏–±–∫–∞: historicalData –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω");
    }

    await log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`, 'info', 'prepareInputDataForLSTM');

    if (historicalData.length < totalDataNeeded) {
      await log(`‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω–æ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.`, 'warn', 'prepareInputDataForLSTM');
      sequenceLength = Math.floor((historicalData.length - dataNeededForIndicators) / numSequences);
      if (sequenceLength <= 0) {
        throw new Error(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π`);
      }
      await log(`üîÑ –ù–æ–≤–∞—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${sequenceLength}`, 'info', 'prepareInputDataForLSTM');
    }

    const sequences = [];
    for (let i = 0; i < numSequences; i++) {
      const sequence = [];
      for (let j = 0; j < sequenceLength; j++) {
        const index = i * sequenceLength + j + dataNeededForIndicators;

        if (index >= historicalData.length) {
          await log(`‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}`, 'warn', 'prepareInputDataForLSTM');
          break;
        }

        const data = historicalData[index];

        if (!validateCandleData(data)) {
          await log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ—á–∏ –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}: ${JSON.stringify(data)}`, 'error', 'prepareInputDataForLSTM');
          continue;
        }

        const normalizedData = normalizeCandleData(data);
        
        const startIndex = Math.max(0, index - dataNeededForIndicators);
        const endIndex = index + 1;

        const closePrices = historicalData.slice(startIndex, endIndex).map(d => d.close);
        const volumes = historicalData.slice(startIndex, endIndex).map(d => d.volume);

        const indicators = await calculateIndicators(closePrices, volumes, historicalData.slice(startIndex, endIndex));

        const timestepData = [...normalizedData, ...indicators];

        if (!validateTimestepData(timestepData)) {
          await log(`‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ timestep –Ω–∞ –∏–Ω–¥–µ–∫—Å–µ ${index}`, 'error', 'prepareInputDataForLSTM');
          continue;
        }

        sequence.push(timestepData);
      }

      if (sequence.length > 0) {
        sequences.push(sequence);
        await log(`‚úÖ –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${i + 1}/${numSequences}, –¥–ª–∏–Ω–∞: ${sequence.length}`, 'debug', 'prepareInputDataForLSTM');
      } else {
        await log(`‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å ${i + 1} –ø—É—Å—Ç–∞`, 'warn', 'prepareInputDataForLSTM');
      }
    }

    if (sequences.length === 0) {
      throw new Error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏');
    }

    await log(`‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä: ${sequences.length}x${sequences[0].length}x${sequences[0][0].length}`, 'info', 'prepareInputDataForLSTM');
    
    const executionTime = Date.now() - startTime;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`, 'info', 'prepareInputDataForLSTM');

    return sequences;
  } catch (error) {
    const executionTime = Date.now() - startTime;
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ prepareInputDataForLSTM: ${error.message}. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`, 'error', 'prepareInputDataForLSTM');
    return [];
  }
}

function validateCandleData(data) {
  return isValidNumber(data.open) && 
         isValidNumber(data.high) && 
         isValidNumber(data.low) && 
         isValidNumber(data.close) && 
         isValidNumber(data.volume);
}

function normalizeCandleData(data) {
  return [
    normalize(data.open, 0, 10000),
    normalize(data.high, 0, 10000),
    normalize(data.low, 0, 10000),
    normalize(data.close, 0, 10000),
    normalize(data.volume, 0, 1000000),
  ];
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
 * @param {any} value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–º —á–∏—Å–ª–æ–º
 */
function isValidNumber(value) {
  return typeof value === 'number' && !isNaN(value) && isFinite(value);
}

function validateTimestepData(data) {
  return Array.isArray(data) && data.every(isValidNumber);
}

/**
 * –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
 * @param {number} value –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
 * @param {number} min –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @param {number} max –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
 * @returns {number} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
 */
function normalize(value, min, max) {
  if (!isValidNumber(value) || !isValidNumber(min) || !isValidNumber(max)) {
    return 0.5;
  }
  if (min === max) return 0.5;
  const normalizedValue = (value - min) / (max - min);
  return isValidNumber(normalizedValue) ? Math.max(0, Math.min(1, normalizedValue)) : 0.5;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è)
async function calculateIndicators(closePrices, volumes, data) {
  try {
    await log(`üßÆ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤`, 'debug', 'calculateIndicators');

    if (!Array.isArray(closePrices) || closePrices.length < 2 || 
        !Array.isArray(volumes) || volumes.length < 2 || 
        !Array.isArray(data) || data.length < 2) {
      throw new Error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤');
    }

    const sma20 = await calculateSMA(closePrices, Math.min(20, closePrices.length));
    const ema50 = await calculateEMA(closePrices, Math.min(50, closePrices.length));
    const rsi = await calculateRSI(closePrices, Math.min(14, closePrices.length - 1));
    const macd = await calculateMACD(closePrices, 12, 26, 9);
    const obv = calculateOBV(closePrices, volumes);
    const bbands = calculateBollingerBands(closePrices, Math.min(20, closePrices.length));
    const atr = calculateATR(data, Math.min(14, data.length - 1));
    const adx = calculateADX(data, Math.min(14, data.length - 1));

    const indicators = [
      normalize(sma20, 0, 10000),
      normalize(ema50, 0, 10000),
      normalize(rsi, 0, 100),
      normalize(macd[0], -100, 100),
      normalize(macd[1], -100, 100),
      normalize(macd[2], -100, 100),
      normalize(obv, -1000000, 1000000),
      normalize(bbands.upper, 0, 10000),
      normalize(bbands.lower, 0, 10000),
      normalize(atr, 0, 1000),
      normalize(adx, 0, 100),
    ];

    await log(`üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —Ä–∞—Å—Å—á–∏—Ç–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ`, 'debug', 'calculateIndicators');
    return indicators;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤: ${error.message}`, 'error', 'calculateIndicators');
    return new Array(11).fill(0.5); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function prepareInputDataForNN(symbol, interval = '15m', lookback = 100) {
  try {
    await log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: —Å–∏–º–≤–æ–ª=${symbol}, –∏–Ω—Ç–µ—Ä–≤–∞–ª=${interval}, lookback=${lookback}`, 'info', 'prepareInputDataForNN');

    const historicalData = await fetchHistoricalData(symbol, interval, lookback + 700);
    await log(`–ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Å–≤–µ—á–µ–π`, 'info', 'prepareInputDataForNN');

    if (historicalData.length < lookback + 700) {
      throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ª—É—á–µ–Ω–æ: ${historicalData.length}, —Ç—Ä–µ–±—É–µ—Ç—Å—è: ${lookback + 700}`);
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞—Å—Å–∏–≤–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const input = [];

    // –¶–∏–∫–ª –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º 700 —Å–≤–µ—á–∞–º
    const startIndex = Math.max(0, historicalData.length - 700);
    for (let i = startIndex; i < historicalData.length; i++) {
      const data = historicalData[i];

      const normalizedData = [
        normalize(data.open, 0, 10000),
        normalize(data.high, 0, 10000),
        normalize(data.low, 0, 10000),
        normalize(data.close, 0, 10000),
        normalize(data.volume, 0, 1000000)
      ];

      const closePrices = historicalData.slice(Math.max(0, i - lookback), i + 1).map(d => d.close);
      const volumes = historicalData.slice(Math.max(0, i - lookback), i + 1).map(d => d.volume);

      const sma20 = calculateSMA(closePrices, 20);
      const ema50 = calculateEMA(closePrices, 50);
      const rsi = calculateRSI(closePrices);
      const macd = calculateMACD(closePrices);
      const obv = calculateOBV(closePrices, volumes);
      const bbands = calculateBollingerBands(closePrices);
      const atr = calculateATR(historicalData.slice(Math.max(0, i - lookback), i + 1));
      const adx = calculateADX(historicalData.slice(Math.max(0, i - lookback), i + 1));

      const indicators = [
        normalize(sma20, 0, 10000),
        normalize(ema50, 0, 10000),
        normalize(rsi, 0, 100),
        normalize(macd[0], -100, 100),
        normalize(macd[1], -100, 100),
        normalize(macd[2], -100, 100),
        normalize(obv, -1000000, 1000000),
        normalize(bbands.upper, 0, 10000),
        normalize(bbands.lower, 0, 10000),
        normalize(atr, 0, 1000),
        normalize(adx, 0, 100)
      ];

      const candleData = [...normalizedData, ...indicators];

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      if (candleData.some(val => isNaN(val) || !isFinite(val))) {
        await log(`–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–∏ ${i}`, 'warn', 'prepareInputDataForNN');
        continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É —Å–≤–µ—á—É
      }

      input.push(candleData);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (input.length !== 700) {
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${input.length}. –û–∂–∏–¥–∞–ª–æ—Å—å 700.`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (input[0].length !== 16) {
      throw new Error(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: ${input[0].length}. –û–∂–∏–¥–∞–ª–æ—Å—å 16.`);
    }

    await log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –†–∞–∑–º–µ—Ä –≤—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞: ${input.length}x${input[0].length}`, 'info', 'prepareInputDataForNN');

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–º–µ—Ä–Ω—ã–π –º–∞—Å—Å–∏–≤
    const flattenedInput = input.flat();

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if (flattenedInput.some(val => isNaN(val) || !isFinite(val))) {
      throw new Error('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
    }

    return flattenedInput;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error', 'prepareInputDataForNN');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return new Array(700 * 16).fill(0.5);
  }
}

//////// –ù–ï–ô–†–û–ù–ù–ê–Ø –°–ï–¢–¨ ////////////

//–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
async function prepareTrainingData(historicalData, timeframe) {
  const trainingData = [];
  const lookback = 50; // –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
  const featuresPerTimestamp = 5; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∞–≥ (open, high, low, close, volume)
  const additionalFeatures = 9; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã)
  const totalFeaturesPerTimestamp = featuresPerTimestamp + additionalFeatures;

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ timeframe
  const step = getStepSize(timeframe);

  for (let i = lookback; i < historicalData.length; i += step) {
    const input = [];
    for (let k = i - lookback; k < i; k++) {
      const dataPoint = [
        normalize(historicalData[k].open, 0, 10000),
        normalize(historicalData[k].high, 0, 10000),
        normalize(historicalData[k].low, 0, 10000),
        normalize(historicalData[k].close, 0, 10000),
        normalize(historicalData[k].volume, 0, 1000000)
      ];

      const closesForIndicators = historicalData.slice(Math.max(0, k - 100), k + 1).map(d => d.close);
      const volumesForIndicators = historicalData.slice(Math.max(0, k - 100), k + 1).map(d => d.volume);
      
      const sma = calculateSMA(closesForIndicators, 20);
      const ema = calculateEMA(closesForIndicators, 20);
      const rsi = calculateRSI(closesForIndicators);
      const macd = calculateMACD(closesForIndicators);
      const obv = calculateOBV(closesForIndicators, volumesForIndicators);
      const bbandsUpper = calculateBollingerBands(closesForIndicators, 20, 2).upper;
      const bbandsLower = calculateBollingerBands(closesForIndicators, 20, 2).lower;

      const indicators = [
        normalize(sma, 0, 10000),
        normalize(ema, 0, 10000),
        normalize(rsi, 0, 100),
        normalize(macd[0], -100, 100),
        normalize(macd[1], -100, 100),
        normalize(macd[2], -100, 100),
        normalize(obv, -1000000, 1000000),
        normalize(bbandsUpper, 0, 10000),
        normalize(bbandsLower, 0, 10000)
      ];

      input.push(...dataPoint, ...indicators);
    }
     // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É
     if (input.length !== lookback * totalFeaturesPerTimestamp) {
      await log(`–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤. –û–∂–∏–¥–∞–ª–æ—Å—å ${lookback * totalFeaturesPerTimestamp}, –ø–æ–ª—É—á–µ–Ω–æ ${input.length}`, 'warn', 'prepareTrainingData');
    }


    if (input.some(isNaN) || input.some(value => !isFinite(value))) {
      continue;
    }

    const currentClose = historicalData[i].close;
    const nextClose = i + 1 < historicalData.length ? historicalData[i + 1].close : currentClose;
    const percentChange = (nextClose - currentClose) / currentClose * 100;
    
    let output;
    if (percentChange > 0.5) output = [1, 0, 0]; // –°–∏–ª—å–Ω—ã–π —Ä–æ—Å—Ç
    else if (percentChange < -0.5) output = [0, 1, 0]; // –°–∏–ª—å–Ω–æ–µ –ø–∞–¥–µ–Ω–∏–µ
    else output = [0, 0, 1]; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ

    trainingData.push({
      input: input,
      output: output,
      timeframe: timeframe,
      totalFeatures: input.length
    });
  }

  return trainingData;
}

function getStepSize(timeframe) {
  switch(timeframe) {
    case '1m': return 1;
    case '5m': return 5;
    case '15m': return 15;
    case '1h': return 60;
    case '4h': return 240;
    case '1d': return 1440;
    default: return 1;
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function trainNeuralNetwork() {
  await log(chalk.cyan('–ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...'), 'detail', 'trainNeuralNetwork');

  try {
    const epochsPerTraining = 10; // –ù–µ–±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    let neuralNet;

    // –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    const lastModel = await loadLatestModel();
    if (lastModel) {
      neuralNet = lastModel.model;
      await log(chalk.green('–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å'), 'detail', 'trainNeuralNetwork');
    } else {
      // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      neuralNet = new brain.NeuralNetwork({
        hiddenLayers: [700, 512, 256, 128, 64], // 700 –≤—Ö–æ–¥–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–æ–≤
        activation: 'leaky-relu',
        learningRate: 0.003,
        momentum: 0.2,
        regularization: 'l2',
        regRate: 0.001,
      });
      await log(chalk.yellow('–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏'), 'detail', 'trainNeuralNetwork');
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    await log(chalk.cyan('–ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...'), 'detail', 'trainNeuralNetwork');
    const allTrainingData = await prepareAllTrainingData();
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    if (allTrainingData.length === 0) {
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
    }

    // –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    const splitIndex = Math.floor(allTrainingData.length * 0.8);
    const trainingData = allTrainingData.slice(0, splitIndex);
    const testData = allTrainingData.slice(splitIndex);

    // –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    await log(chalk.cyan(`–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ø–æ—Ö: ${epochsPerTraining}`), 'detail', 'trainNeuralNetwork');
    
    const trainingOptions = {
      iterations: epochsPerTraining,
      errorThresh: 0.003,
      log: true,
      logPeriod: 1,
      learningRate: 0.01,
      momentum: 0.1,
      callback: async (stats) => {
        const accuracy = calculateAccuracy(neuralNet, testData);

        await log(chalk.green(`–≠–ø–æ—Ö–∞ ${stats.iterations}/${epochsPerTraining}:`), 'detail', 'trainNeuralNetwork');
        await log(chalk.green(`  –û—à–∏–±–∫–∞: ${stats.error.toFixed(4)}`), 'detail', 'trainNeuralNetwork');
        await log(chalk.green(`  –¢–æ—á–Ω–æ—Å—Ç—å: ${accuracy.toFixed(2)}%`), 'detail', 'trainNeuralNetwork');

        if (stats.iterations % 10 === 0) {
          await saveModel(neuralNet, stats.iterations);
          await log(chalk.blue(`  –ú–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —ç–ø–æ—Ö–∏ ${stats.iterations}`), 'detail', 'trainNeuralNetwork');
        }
      },
      callbackPeriod: 1,
    };

    await neuralNet.trainAsync(trainingData, trainingOptions);

    await saveModel(neuralNet, 'final');
    await log(chalk.green('–û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'), 'detail', 'trainNeuralNetwork');

    const finalAccuracy = calculateAccuracy(neuralNet, testData);
    lastKnownAccuracy = finalAccuracy.toFixed(2);
    io.emit('neuralNetworkAccuracy', { accuracy: lastKnownAccuracy });;

    await log(chalk.cyan('–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.'), 'detail', 'trainNeuralNetwork');

    return neuralNet;
  } catch (error) {
    await log(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${error.message}`), 'error', 'trainNeuralNetwork');
    await sendTelegramMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${error.message}`);
    return null;
  }
}

async function incrementalTraining(neuralNet) {
  try {
    await log(chalk.cyan('–ù–∞—á–∞–ª–æ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...'), 'detail', 'incrementalTraining');
    
    const newData = await prepareNewTrainingData(); // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    
    if (newData.length === 0) {
      await log(chalk.yellow('–ù–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è'), 'detail', 'incrementalTraining');
      return neuralNet;
    }

    const trainingOptions = {
      iterations: 10, // –ú–µ–Ω—å—à–µ –∏—Ç–µ—Ä–∞—Ü–∏–π –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
      errorThresh: 0.003,
      log: true,
      logPeriod: 1,
      learningRate: 0.01, // –ú–µ–Ω—å—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
      momentum: 0.1,
      callback: async (stats) => {
        await log(chalk.green(`–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –∏—Ç–µ—Ä–∞—Ü–∏—è ${stats.iterations}:`), 'detail', 'incrementalTraining');
        await log(chalk.green(`  –û—à–∏–±–∫–∞: ${stats.error.toFixed(4)}`), 'detail', 'incrementalTraining');
      },
      callbackPeriod: 1,
    };

    await neuralNet.trainAsync(newData, trainingOptions);

    await saveModel(neuralNet, 'incremental');
    await log(chalk.green('–ú–æ–¥–µ–ª—å –ø–æ—Å–ª–µ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞'), 'detail', 'incrementalTraining');

    return neuralNet;
  } catch (error) {
    await log(chalk.red(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: ${error.message}`), 'error', 'incrementalTraining');
    await sendTelegramMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏: ${error.message}`);
    return neuralNet; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–æ–¥–µ–ª—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
async function loadLatestModel() {
  const modelSavePath = path.join(__dirname, 'trainedModel');
  try {
    await log('–ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏', 'info', 'loadLatestModel');
    
    const files = await fs.readdir(modelSavePath);
    
    if (files.includes('neural_net_epoch_final.json')) {
      await log('–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏', 'info', 'loadLatestModel');
      const modelJSON = await fs.readJson(path.join(modelSavePath, 'neural_net_epoch_final.json'));
      const model = new brain.NeuralNetwork();
      model.fromJSON(modelJSON);
      
      if (!model.run || typeof model.run !== 'function') {
        throw new Error('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –º–µ—Ç–æ–¥ run –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const testInput = new Array(700).fill(0.5); // –ü—Ä–∏–º–µ—Ä –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const testOutput = model.run(testInput);
      if (!testOutput || typeof testOutput !== 'object' || Object.values(testOutput).length !== 3) {
        throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
      
      await log('–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞', 'info', 'loadLatestModel');
      return { model, epoch: 'final' };
    }
    
    const modelFiles = files.filter(file => file.startsWith('neural_net_epoch_') && file.endsWith('.json'));
    
    if (modelFiles.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π');
    }

    modelFiles.sort((a, b) => {
      const epochA = parseInt(a.match(/epoch_(\d+)/)[1]);
      const epochB = parseInt(b.match(/epoch_(\d+)/)[1]);
      return epochB - epochA;
    });

    const latestFile = modelFiles[0];
    const epoch = parseInt(latestFile.match(/epoch_(\d+)/)[1]);
    
    await log(`–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏: ${latestFile}`, 'info', 'loadLatestModel');
    
    const modelJSON = await fs.readJson(path.join(modelSavePath, latestFile));
    const model = new brain.NeuralNetwork();
    model.fromJSON(modelJSON);
    
    if (!model.run || typeof model.run !== 'function') {
      throw new Error('–ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: –º–µ—Ç–æ–¥ run –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }
    
    await log(`–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —ç–ø–æ—Ö–∏ ${epoch} –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞`, 'info', 'loadLatestModel');

    return { model, epoch };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –º–æ–¥–µ–ª–∏: ${error.message}`, 'error', 'loadLatestModel');
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
async function saveModel(model, epoch) {
  const modelSavePath = path.join(__dirname, 'trainedModel');
  try {
    await fs.ensureDir(modelSavePath);
    const modelJSON = model.toJSON();
    await fs.writeJson(path.join(modelSavePath, `neural_net_epoch_${epoch}.json`), modelJSON);
    await log(`–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ—Å–ª–µ —ç–ø–æ—Ö–∏ ${epoch}`, 'info', 'saveModel');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: ${error.message}`, 'error', 'saveModel');
  }
}

function calculateAccuracy(neuralNet, testData) {
  let correct = 0;
  for (const item of testData) {
    const output = neuralNet.run(item.input);
    const predicted = output.indexOf(Math.max(...output));
    const actual = item.output.indexOf(Math.max(...item.output));
    if (predicted === actual) {
      correct++;
    }
  }
  return (correct / testData.length) * 100;
}

/**
 * –í—ã—á–∏—Å–ª—è–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * @param {brain.recurrent.LSTM} model –ú–æ–¥–µ–ª—å LSTM
 * @param {Array} trainingData –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
 * @returns {number} –¢–æ—á–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
 */
function calculateAccuracy(model, trainingData) {
  let correct = 0;
  for (const sample of trainingData) {
    const prediction = model.run(sample.input);
    const predictedClass = prediction.indexOf(Math.max(...prediction));
    const actualClass = sample.output.indexOf(Math.max(...sample.output));
    if (predictedClass === actualClass) {
      correct++;
    }
  }
  return (correct / trainingData.length) * 100;
}

// –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function prepareAllTrainingData() {
  const intervals = ['1', '5', '15', '30', '60', '240', '1440'];
  let allTrainingData = [];

  for (const interval of intervals) {
    await log(chalk.cyan(`–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ${interval}...`), 'detail', 'prepareAllTrainingData');
    const historicalData = await fetchHistoricalDataForTraining(interval);
    await log(chalk.cyan(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ${interval}...`), 'detail', 'prepareAllTrainingData');
    const intervalTrainingData = await prepareTrainingData(historicalData, interval);
    allTrainingData = allTrainingData.concat(intervalTrainingData);
    await log(chalk.green(`–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ ${interval} –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã. –í—Å–µ–≥–æ –ø—Ä–∏–º–µ—Ä–æ–≤: ${intervalTrainingData.length}`), 'detail', 'prepareAllTrainingData');
  }

  // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  allTrainingData = shuffleArray(allTrainingData);
  if (allTrainingData.length > 100000) {
    allTrainingData = allTrainingData.slice(0, 100000);
    await log(chalk.yellow(`–î–∞–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –¥–æ 100000 –ø—Ä–∏–º–µ—Ä–æ–≤`), 'detail', 'prepareAllTrainingData');
  }
  await log(chalk.green(`–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—É—á–∞—é—â–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤: ${allTrainingData.length}`), 'detail', 'prepareAllTrainingData');

  return allTrainingData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è –º–∞—Å—Å–∏–≤–∞
function shuffleArray(array) {
  for (let i = array.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [array[i], array[j]] = [array[j], array[i]];
  }
  return array;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function predictWithNeuralNetwork(model, input) {
  const maxRetries = 3;
  const initialRetryDelay = 1000; // 1 —Å–µ–∫—É–Ω–¥–∞

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries} –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏`, 'info', 'predictWithNeuralNetwork');
      
      if (!model || typeof model.run !== 'function') {
        throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—Ä–µ–∑–∞–µ–º –∏–ª–∏ –¥–æ–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      let processedInput = input;
      if (input.length > 700) {
        processedInput = input.slice(0, 700);
      } else if (input.length < 700) {
        processedInput = input.concat(new Array(700 - input.length).fill(0));
      }

      await log(`–î–ª–∏–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞ input: ${processedInput.length}`, 'detail', 'predictWithNeuralNetwork');
      
      const prediction = model.run(processedInput);
      await log(`–°—ã—Ä–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${JSON.stringify(prediction)}`, 'detail', 'predictWithNeuralNetwork');
      
      if (!prediction || typeof prediction !== 'object') {
        throw new Error(`–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${JSON.stringify(prediction)}`);
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –º–∞—Å—Å–∏–≤, –µ—Å–ª–∏ –æ–Ω–æ —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º
      const predictionArray = Array.isArray(prediction) ? prediction : Object.values(prediction);

      if (predictionArray.length !== 3) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –û–∂–∏–¥–∞–µ—Ç—Å—è 3, –ø–æ–ª—É—á–µ–Ω–æ ${predictionArray.length}`);
      }
      
      if (predictionArray.some(isNaN) || predictionArray.some(val => val === null || val === undefined || val < 0 || val > 1)) {
        throw new Error(`–ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: ${JSON.stringify(predictionArray)}`);
      }
      
      // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
      const sum = predictionArray.reduce((a, b) => a + b, 0);
      if (sum === 0) {
        throw new Error('–°—É–º–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π —Ä–∞–≤–Ω–∞ –Ω—É–ª—é');
      }
      const normalizedPrediction = predictionArray.map(p => p / sum);
      
      await log(`–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: ${JSON.stringify(normalizedPrediction)}`, 'detail', 'predictWithNeuralNetwork');
      return normalizedPrediction;
    } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}): ${error.message}`, 'error', 'predictWithNeuralNetwork');
      
      if (attempt === maxRetries) {
        await log('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–µ —É–¥–∞–ª–∏—Å—å. –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.', 'warn', 'predictWithNeuralNetwork');
        return [0.33, 0.33, 0.34]; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      }
      
      const retryDelay = initialRetryDelay * Math.pow(2, attempt - 1);
      await log(`–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π: ${retryDelay}–º—Å`, 'info', 'predictWithNeuralNetwork');
      await new Promise(resolve => setTimeout(resolve, retryDelay));
    }
  }
}


// –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
function validateInputData(input) {
  if (!Array.isArray(input)) {
    throw new Error('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º');
  }

  if (input.length === 0) {
    throw new Error('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º');
  }

  if (input.some(value => typeof value !== 'number')) {
    throw new Error('–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏');
  }

  // –£–¥–∞–ª–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ NaN, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ 0
  if (input.some(value => !isFinite(value))) {
    throw new Error('–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è');
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–∂–∏–¥–∞–µ–º—É—é –¥–ª–∏–Ω—É –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  const expectedLength = 50 * 14; // 50 –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —à–∞–≥–æ–≤, 14 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –Ω–∞ –∫–∞–∂–¥—ã–π —à–∞–≥
  if (input.length !== expectedLength) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è ${expectedLength}, –ø–æ–ª—É—á–µ–Ω–æ ${input.length}`);
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 0 –¥–æ 1)
  if (input.some(value => value < 0 || value > 1)) {
    throw new Error('–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1');
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function fetchHistoricalDataForTraining(symbol = 'ETHUSDT', interval = '15', limit = 1000, startDate = null, endDate = null) {
  try {
    await log(`–ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: symbol=${symbol}, interval=${interval}, limit=${limit}, startDate=${startDate}, endDate=${endDate}`, 'info', 'fetchHistoricalDataForTraining');

    const bybitInterval = convertIntervalToBybitFormat(interval);
    let allHistoricalData = [];
    let currentLimit = limit;
    let startTime = startDate ? new Date(startDate).getTime() : undefined;

    while (currentLimit > 0) {
      try {
        const response = await bybitClient.getKline({
          category: 'spot',
          symbol: symbol,
          interval: bybitInterval,
          limit: Math.min(currentLimit, 200),
          start: startTime,
          end: endDate ? new Date(endDate).getTime() : undefined
        });

        if (!response || !response.result || !Array.isArray(response.result.list)) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Bybit: ${JSON.stringify(response)}`);
        }

        if (response.retCode !== 0) {
          throw new Error(`–û—à–∏–±–∫–∞ Bybit API (retCode: ${response.retCode}): ${response.retMsg}`);
        }

        const historicalData = response.result.list.map(item => ({
          time: parseInt(item[0]),
          open: parseFloat(item[1]),
          high: parseFloat(item[2]),
          low: parseFloat(item[3]),
          close: parseFloat(item[4]),
          volume: parseFloat(item[5])
        }));

        allHistoricalData = allHistoricalData.concat(historicalData);
        currentLimit -= historicalData.length;

        if (historicalData.length > 0) {
          startTime = historicalData[historicalData.length - 1].time + 1;
        } else {
          break;
        }

        await log(`–ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} —Å–≤–µ—á–µ–π. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å: ${currentLimit}`, 'info', 'fetchHistoricalDataForTraining');
        
        await new Promise(resolve => setTimeout(resolve, 1000));
      } catch (error) {
        await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`, 'warn', 'fetchHistoricalDataForTraining');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }

    if (allHistoricalData.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ');
    }

    await log(`–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${allHistoricalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`, 'info', 'fetchHistoricalDataForTraining');
    return allHistoricalData;

  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error', 'fetchHistoricalDataForTraining');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function checkEnsembleAccuracy(testData) {
  const neuralNet = await loadLatestModel();
  
  let correctPredictions = 0;
  let totalPredictions = 0;
  
  for (let i = 50; i < testData.length - 1; i++) {
    const input = prepareInputData(testData.slice(i - 50, i));
    const prediction = await predictWithNeuralNetwork(neuralNet.model, input);

    const predictedDirection = getPredictedDirection(prediction);
    const actualDirection = getActualDirection(testData[i], testData[i + 1]);
    
    if (predictedDirection === actualDirection) {
      correctPredictions++;
    }
    totalPredictions++;
  }
  
  const accuracy = (correctPredictions / totalPredictions) * 100;
  return accuracy.toFixed(2);

}

// 
function getPredictedDirection(output) {
  const [up, down, neutral] = output;
  if (up > down && up > neutral) return 'up';
  if (down > up && down > neutral) return 'down';
  return 'neutral';
}

function getActualDirection(currentData, nextData) {
  if (nextData.close > currentData.close) return 'up';
  if (nextData.close < currentData.close) return 'down';
  return 'neutral';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
async function incrementalTraining(newData) {
  const neuralNet = await loadLatestModel();
  const rf = await trainRandomForest(await prepareTrainingData(newData));
  
  const trainingData = await prepareTrainingData(newData);
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
  await neuralNet.model.trainAsync(trainingData, {
    iterations: 100,
    errorThresh: 0.005,
    log: true,
    logPeriod: 10
  });

  await saveModel(neuralNet.model, 'incremental');
  
  return { neuralNet: neuralNet.model, rf };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
async function predictShortTermPriceMovement(timeframe) {
  const neuralNet = await loadLatestModel();
  const recentData = await fetchRecentData(timeframe);
  const input = prepareInputData(recentData.slice(-50));
  
  // –ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
  const prediction = await predictWithNeuralNetwork(neuralNet.model, input);

  const [upProbability, downProbability, neutralProbability] = prediction;
  let predictionResult;
  if (upProbability > downProbability && upProbability > neutralProbability) {
    predictionResult = '–†–æ—Å—Ç';
  } else if (downProbability > upProbability && downProbability > neutralProbability) {
    predictionResult = '–ü–∞–¥–µ–Ω–∏–µ';
  } else {
    predictionResult = '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ';
  }

  return {
    prediction: predictionResult,
    upProbability: (upProbability * 100).toFixed(2),
    downProbability: (downProbability * 100).toFixed(2),
    neutralProbability: (neutralProbability * 100).toFixed(2)
  };
}


// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function fetchRecentData(symbol, interval, limit = 100) {
  const validIntervals = ['1', '3', '5', '15', '30', '60', '120', '240', '360', '720', 'D', 'W', 'M'];
  const intervalMap = {
    '1m': '1',
    '3m': '3',
    '5m': '5',
    '15m': '15',
    '30m': '30',
    '1h': '60',
    '2h': '120',
    '4h': '240',
    '6h': '360',
    '12h': '720',
    '1d': 'D',
    '1w': 'W',
    '1M': 'M'
  };

  const mappedInterval = intervalMap[interval] || interval;

  if (!validIntervals.includes(mappedInterval)) {
    throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: ${interval}`);
  }

  const maxRetries = 3;
  const retryDelay = 5000; // 5 —Å–µ–∫—É–Ω–¥

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      await log(`–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∏–∑ ${maxRetries} –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö...`, 'info', 'fetchRecentData');
      
      const response = await bybitClient.getKline({
        category: 'spot',
        symbol: symbol,
        interval: mappedInterval,
        limit: limit
      });

      if (response.retCode !== 0) {
        throw new Error(`–û—à–∏–±–∫–∞ API Bybit: ${response.retMsg}`);
      }

      if (!response.result || !response.result.list || response.result.list.length === 0) {
        throw new Error('–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ API –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö');
      }

      await log(`–ü–æ–ª—É—á–µ–Ω–æ ${response.result.list.length} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö`, 'info', 'fetchRecentData');

      return response.result.list.map(item => ({
        time: parseInt(item[0]),
        open: parseFloat(item[1]),
        high: parseFloat(item[2]),
        low: parseFloat(item[3]),
        close: parseFloat(item[4]),
        volume: parseFloat(item[5])
      })).reverse();

    } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}): ${error.message}`, 'error', 'fetchRecentData');
      if (attempt === maxRetries) {
        throw error;
      }

      await new Promise(resolve => setTimeout(resolve, retryDelay));
    }
  }
}
////////// —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
async function temporaryPauseTrading(error) {
  try {
    const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    await log(`‚ö†Ô∏è –ù–∞—á–∞–ª–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${errorMessage}`, 'warn', 'temporaryPauseTrading');
    
    global.isTradingPaused = true;
    
    await sendTelegramMessage(`‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${errorMessage}`);
    
    await savePauseInfo({
      timestamp: new Date().toISOString(),
      reason: errorMessage,
      stackTrace: error.stack || '–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'
    });

    try {
      const cancelResult = await cancelAllOrders();
      await log(`üö´ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${JSON.stringify(cancelResult)}`, 'info', 'temporaryPauseTrading');
    } catch (cancelError) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${cancelError.message}`, 'error', 'temporaryPauseTrading');
    }

    const pauseDuration = 60 * 60 * 1000; // 1 —á–∞—Å
    await log(`‚è≥ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—Ä–≥–æ–≤–ª–∏ —á–µ—Ä–µ–∑ ${pauseDuration / 1000 / 60} –º–∏–Ω—É—Ç`, 'info', 'temporaryPauseTrading');
    
    setTimeout(async () => {
      try {
        global.isTradingPaused = false;
        await log('‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏', 'info', 'temporaryPauseTrading');
        await sendTelegramMessage('‚úÖ –¢–æ—Ä–≥–æ–≤–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
        
        const systemCheck = await performSystemCheck();
        if (systemCheck.status === 'ok') {
          await log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–∞, —Ç–æ—Ä–≥–æ–≤–ª—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞', 'info', 'temporaryPauseTrading');
        } else {
          await log(`‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –≤—ã—è–≤–∏–ª–∞ –ø—Ä–æ–±–ª–µ–º—ã: ${systemCheck.issues.join(', ')}`, 'warn', 'temporaryPauseTrading');
          await sendTelegramMessage(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${systemCheck.issues.join(', ')}`);
        }
      } catch (resumeError) {
        await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${resumeError.message}`, 'error', 'temporaryPauseTrading');
        await sendTelegramMessage(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${resumeError.message}`);
        await temporaryPauseTrading(resumeError);
      }
    }, pauseDuration);

  } catch (pauseError) {
    await log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: ${pauseError.message}`, 'error', 'temporaryPauseTrading');
    await sendTelegramMessage(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: ${pauseError.message}`);
    await emergencyShutdown(pauseError);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—É–∑–µ
async function savePauseInfo(info) {
  try {
    const pauseLogPath = path.join(__dirname, 'logs', 'pause_log.json');
    let pauseLog = [];
    
    try {
      const existingLog = await fs.readFile(pauseLogPath, 'utf8');
      pauseLog = JSON.parse(existingLog);
    } catch (readError) {
      // –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç–æ–π, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤
    }
    
    pauseLog.push(info);
    await fs.writeFile(pauseLogPath, JSON.stringify(pauseLog, null, 2));
    await log(`üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—É–∑–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: ${JSON.stringify(info)}`, 'info', 'savePauseInfo');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—É–∑–µ: ${error.message}`, 'error', 'savePauseInfo');
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function closeAllConnections() {
  try {
    await log('üîå –ù–∞—á–∞–ª–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', 'info', 'closeAllConnections');
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –≤–∞—à–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB:
    // await mongoose.connection.close();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit API (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
    // bybitClient.close(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–µ—Ç–æ–¥, –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

    await log('‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã', 'info', 'closeAllConnections');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${error.message}`, 'error', 'closeAllConnections');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
function clearAllScheduledTasks() {
  const highestTimeoutId = setTimeout(() => {}, 0);
  for (let i = 0; i < highestTimeoutId; i++) {
    clearTimeout(i);
  }
  
  const highestIntervalId = setInterval(() => {}, 0);
  for (let i = 0; i < highestIntervalId; i++) {
    clearInterval(i);
  }
  
  log('üßπ –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –æ—á–∏—â–µ–Ω—ã', 'info', 'clearAllScheduledTasks');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
async function performSystemCheck() {
  try {
    await log('üîç –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'info', 'performSystemCheck');
    
    const checks = [
      { name: 'API Connection', check: checkApiConnection },
      { name: 'Database Connection', check: checkDatabaseConnection },
      { name: 'Sufficient Balance', check: checkSufficientBalance },
      { name: 'Market Data Availability', check: checkMarketDataAvailability }
    ];
    
    const results = await Promise.all(checks.map(async ({ name, check }) => {
      try {
        await check();
        return { name, status: 'ok' };
      } catch (error) {
        return { name, status: 'error', message: error.message };
      }
    }));
    
    const issues = results.filter(result => result.status === 'error');
    const status = issues.length === 0 ? 'ok' : 'error';
    
    await log(`‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –°—Ç–∞—Ç—É—Å: ${status}`, 'info', 'performSystemCheck');
    return { 
      status, 
      issues: issues.map(issue => `${issue.name}: ${issue.message}`) 
    };
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`, 'error', 'performSystemCheck');
    return { 
      status: 'error', 
      issues: [`General: ${error.message}`] 
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–≤–∞—Ä–∏–π–Ω–æ–≥–æ –≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
async function emergencyShutdown(error) {
  await log(`–ó–∞–ø—É—â–µ–Ω–æ –∞–≤–∞—Ä–∏–π–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error.message}`, 'error', 'emergencyShutdown');
  
  try {
      await cancelAllOrders();
      
      const portfolioState = await getPortfolioState();
      await fs.writeFile(path.join(__dirname, 'logs', 'emergency_portfolio_state.json'), JSON.stringify(portfolioState, null, 2));
      
      await sendTelegramMessage('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –°–∏—Å—Ç–µ–º–∞ –∞–≤–∞—Ä–∏–π–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ.');
      
      clearAllScheduledTasks();
      
      await closeAllConnections();
      
      await log('–ê–≤–∞—Ä–∏–π–Ω–æ–µ –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', 'info', 'emergencyShutdown');
      
      process.exit(1);
  } catch (shutdownError) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤–∞—Ä–∏–π–Ω–æ–º –≤—ã–∫–ª—é—á–µ–Ω–∏–∏: ${shutdownError.message}`, 'error', 'emergencyShutdown');
      process.exit(1);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤
async function cancelAllOrders() {
  try {
    await log('üö´ –û—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'cancelAllOrders');
    const result = await bybitClient.cancelAllOrders({
      category: 'spot',
      symbol: 'ETHUSDT'
    });
    await log(`‚úÖ –í—Å–µ –æ—Ä–¥–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω—ã: ${JSON.stringify(result)}`, 'info', 'cancelAllOrders');
    return result;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –≤—Å–µ—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${error.message}`, 'error', 'cancelAllOrders');
    throw error;
  }
}

async function getActiveOrders(symbol) {
  try {
      const orders = await bybitClient.getActiveOrders({
          category: 'spot',
          symbol: symbol
      });
      return orders.result.list;
  } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${error.message}`, 'error', 'getActiveOrders');
      return [];
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ä–¥–µ—Ä–∞
async function cancelOrder(symbol, orderId) {
  try {
    await log(`üö´ –û—Ç–º–µ–Ω–∞ –æ—Ä–¥–µ—Ä–∞ ${orderId} –¥–ª—è —Å–∏–º–≤–æ–ª–∞ ${symbol}`, 'info', 'cancelOrder');
    const result = await bybitClient.cancelOrder({
      category: 'spot',
      symbol: symbol,
      orderId: orderId
    });
    await log(`‚úÖ –û—Ä–¥–µ—Ä ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω`, 'info', 'cancelOrder');
    return result;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${error.message}`, 'error', 'cancelOrder');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤
async function updateExistingOrders(savedOrders) {
  try {
    await log('–ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤', 'info', 'updateExistingOrders');
    const currentOrders = await getActiveOrders('ETHUSDT');
    const currentPrice = await getPrice('ETHUSDT');

    for (const savedOrder of savedOrders) {
      const existingOrder = currentOrders.find(o => o.orderId === savedOrder.orderId);
      if (!existingOrder) {
        await log(`–û—Ä–¥–µ—Ä ${savedOrder.orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ`, 'info', 'updateExistingOrders');
        await placeOrder('ETHUSDT', savedOrder.side, savedOrder.qty, savedOrder.price);
      } else if (Math.abs(existingOrder.price - currentPrice) / currentPrice > 0.05) {
        await log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ ${existingOrder.orderId} –∏–∑-–∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã`, 'info', 'updateExistingOrders');
        await cancelOrder('ETHUSDT', existingOrder.orderId);
        await placeOrder('ETHUSDT', existingOrder.side, existingOrder.qty, currentPrice);
      }
    }
    await log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info', 'updateExistingOrders');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –æ—Ä–¥–µ—Ä–æ–≤: ${error.message}`, 'error', 'updateExistingOrders');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
function prepareInputData(data) {
  const input = [];
  const lookback = 50; // –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞
  const featuresPerTimestamp = 14; // 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö + 9 –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
  const maxElements = 700; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ü–∏–∫–ª, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å maxElements
  const endIndex = Math.min(data.length, lookback + (maxElements / featuresPerTimestamp)); 

  for (let i = data.length - lookback; i < endIndex; i++) {
    const dataPoint = [
      normalize(data[i].open, 0, 10000),
      normalize(data[i].high, 0, 10000),
      normalize(data[i].low, 0, 10000),
      normalize(data[i].close, 0, 10000),
      normalize(data[i].volume, 0, 1000000)
    ];

    const closesForIndicators = data.slice(Math.max(0, i - 100), i + 1).map(d => d.close);
    const volumesForIndicators = data.slice(Math.max(0, i - 100), i + 1).map(d => d.volume);
    
    const sma = calculateSMA(closesForIndicators, 20);
    const ema = calculateEMA(closesForIndicators, 20);
    const rsi = calculateRSI(closesForIndicators);
    const macd = calculateMACD(closesForIndicators);
    const obv = calculateOBV(closesForIndicators, volumesForIndicators);
    const bbands = calculateBollingerBands(closesForIndicators, 20, 2);

    const indicators = [
      normalize(sma, 0, 10000),
      normalize(ema, 0, 10000),
      normalize(rsi, 0, 100),
      normalize(macd[0], -100, 100),
      normalize(macd[1], -100, 100),
      normalize(macd[2], -100, 100),
      normalize(obv, -1000000, 1000000),
      normalize(bbands.upper, 0, 10000),
      normalize(bbands.lower, 0, 10000)
    ];

    input.push(...dataPoint, ...indicators);
  }
  

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ NaN –∏ –∑–∞–º–µ–Ω–∞ –Ω–∞ 0
  const cleanedInput = input.map(value => isNaN(value) ? 0 : value);

  // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ä–∞–≤–Ω–∞ 700
  if (cleanedInput.length !== 700) {
    console.warn(`–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${cleanedInput.length}. –û–∂–∏–¥–∞–ª–æ—Å—å 700.`);
    return cleanedInput.slice(0, 700).concat(new Array(Math.max(0, 700 - cleanedInput.length)).fill(0));
  }

  return input;
}
//////// –ù–ï–ô–†–û–ù–ù–ê–Ø –°–ï–¢–¨////////////

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ Bollinger Bands
function calculateBollingerBands(data, period = 20, stdDev = 2) {
  const sma = calculateSMA(data, period);
  const variance = data.reduce((sum, value) => sum + Math.pow(value - sma, 2), 0) / period;
  const std = Math.sqrt(variance);
  return {
    upper: sma + stdDev * std,
    lower: sma - stdDev * std
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏
async function adaptTradingParameters() {
  try {
    const historicalData = await fetchHistoricalDataForTraining('ETHUSDT', '1h');
    const volatility = calculateVolatility(historicalData.map(d => d.close));
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
    if (volatility > 0.05) { // –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
      signalParams.rsiOverbought = 75;
      signalParams.rsiOversold = 25;
      signalParams.macdThreshold = 0.0002;
      signalParams.volumeThreshold = 2;
      signalParams.trendStrengthThreshold = 30;
    } else if (volatility < 0.02) { // –ù–∏–∑–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
      signalParams.rsiOverbought = 65;
      signalParams.rsiOversold = 35;
      signalParams.macdThreshold = 0.0001;
      signalParams.volumeThreshold = 1.2;
      signalParams.trendStrengthThreshold = 20;
    } else { // –°—Ä–µ–¥–Ω—è—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å
      signalParams.rsiOverbought = 70;
      signalParams.rsiOversold = 30;
      signalParams.macdThreshold = 0.00015;
      signalParams.volumeThreshold = 1.5;
      signalParams.trendStrengthThreshold = 25;
    }

    await log(`–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–æ—Ä–≥–æ–≤–ª–∏ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –∫ —Ç–µ–∫—É—â–µ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏: ${volatility.toFixed(4)}`, 'info', 'adaptTradingParameters');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'adaptTradingParameters');
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
async function analyzeCorrelations() {
  try {
    const assets = ['BTCUSDT', 'XRPUSDT', 'ADAUSDT', 'DOGEUSDT'];
    const correlations = {};

    const ethData = await fetchHistoricalDataForTraining('1d');
    const ethReturns = calculateReturns(ethData.map(d => d.close));

    for (const asset of assets) {
      const assetData = await bybitClient.getKline({
        category: 'spot',
        symbol: asset,
        interval: '1440',  // 1 –¥–µ–Ω—å
        limit: ethData.length
      });
      if (!assetData.result || !Array.isArray(assetData.result.list)) {
        throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${asset}`);
      }
      const assetReturns = calculateReturns(assetData.result.list.map(d => parseFloat(d[4])));
      correlations[asset] = calculateCorrelation(ethReturns, assetReturns);
    }

    return correlations;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π: ${error.message}`, 'error', 'analyzeCorrelations');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
function calculateReturns(prices) {
  return prices.slice(1).map((price, index) => (price - prices[index]) / prices[index]);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–∏
function calculateCorrelation(x, y) {
  const n = x.length;
  const sum1 = x.reduce((a, b) => a + b) * y.reduce((a, b) => a + b);
  const sum2 = x.reduce((a, b) => a + b * b) * y.reduce((a, b) => a + b * b);
  const sum3 = x.map((a, i) => a * y[i]).reduce((a, b) => a + b);
  return (n * sum3 - sum1) / Math.sqrt((n * sum2 - sum1 * sum1));
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function optimizeStrategyParameters() {
  try {
    await log('üöÄ –ù–∞—á–∞–ª–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'info', 'optimizeStrategyParameters');

    // –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    const currentParams = {
      minSignalStrength: signalParams.minSignalStrength,
      riskFactor: signalParams.riskFactor,
      gridLevels: signalParams.gridLevels,
      takeProfitMultiplier: signalParams.takeProfitMultiplier,
      stopLossMultiplier: signalParams.stopLossMultiplier
    };

    await log(`üìä –¢–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(currentParams)}`, 'info', 'optimizeStrategyParameters');

    // –î–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    const ranges = {
      minSignalStrength: [0.5, 0.6, 0.7, 0.8],
      riskFactor: [0.01, 0.02, 0.03, 0.04],
      gridLevels: [5, 10, 15, 20],
      takeProfitMultiplier: [1.5, 2, 2.5, 3],
      stopLossMultiplier: [0.5, 0.75, 1, 1.25]
    };

    let bestParams = { ...currentParams };
    let bestPerformance = -Infinity;

    // –ü–µ—Ä–µ–±–æ—Ä –∫–æ–º–±–∏–Ω–∞—Ü–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    for (const minSignalStrength of ranges.minSignalStrength) {
      for (const riskFactor of ranges.riskFactor) {
        for (const gridLevels of ranges.gridLevels) {
          for (const takeProfitMultiplier of ranges.takeProfitMultiplier) {
            for (const stopLossMultiplier of ranges.stopLossMultiplier) {
              const testParams = {
                minSignalStrength,
                riskFactor,
                gridLevels,
                takeProfitMultiplier,
                stopLossMultiplier
              };

              await log(`üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: ${JSON.stringify(testParams)}`, 'info', 'optimizeStrategyParameters');

              try {
                // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                const backtestResult = await backtest(await fetchHistoricalData('ETHUSDT', '15m', 1000), {
                  symbol: 'ETHUSDT',
                  initialBalance: 1,
                  ...testParams
                });

                await log(`üìà –†–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞: –ü—Ä–∏–±—ã–ª—å ${backtestResult.profitPercentage.toFixed(2)}%, –í–∏–Ω—Ä–µ–π—Ç ${backtestResult.winRate.toFixed(2)}%`, 'info', 'optimizeStrategyParameters');

                // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–æ–¥ —Å–≤–æ–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
                const performance = backtestResult.profitPercentage * backtestResult.winRate;

                if (performance > bestPerformance) {
                  bestPerformance = performance;
                  bestParams = testParams;
                  await log(`üèÜ –ù–æ–≤—ã–µ –ª—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–π–¥–µ–Ω—ã! –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${performance.toFixed(2)}`, 'info', 'optimizeStrategyParameters');
                }
              } catch (backtestError) {
                await log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: ${backtestError.message}`, 'warn', 'optimizeStrategyParameters');
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é, –ø—Ä–æ–ø—É—Å–∫–∞—è –Ω–µ—É–¥–∞—á–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
                continue;
              }
            }
          }
        }
      }
    }

    await log(`‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –õ—É—á—à–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(bestParams)}`, 'info', 'optimizeStrategyParameters');
    await log(`üåü –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${((bestPerformance / (currentParams.minSignalStrength * currentParams.riskFactor) - 1) * 100).toFixed(2)}%`, 'info', 'optimizeStrategyParameters');

    return bestParams;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`, 'error', 'optimizeStrategyParameters');
    // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    return {
      minSignalStrength: signalParams.minSignalStrength,
      riskFactor: signalParams.riskFactor,
      gridLevels: signalParams.gridLevels,
      takeProfitMultiplier: signalParams.takeProfitMultiplier,
      stopLossMultiplier: signalParams.stopLossMultiplier
    };
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ ATR (Average True Range)
function calculateATR(data, period = 14) {
  const trueRanges = data.slice(1).map((candle, index) => {
    const previousCandle = data[index];
    const highLow = candle.high - candle.low;
    const highCloseDiff = Math.abs(candle.high - previousCandle.close);
    const lowCloseDiff = Math.abs(candle.low - previousCandle.close);
    return Math.max(highLow, highCloseDiff, lowCloseDiff);
  });

  return calculateSMA(trueRanges, period);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞
async function runInitialBacktest() {
  if (!isBacktestEnabled) {
    await log('–ë—ç–∫—Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–∫–ª—é—á–µ–Ω', 'info', 'runInitialBacktest');
    return null;
  }

  try {
    await log('–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞', 'info', 'runInitialBacktest');

    const symbol = 'ETHUSDT';
    const interval = '15m';
    const lookback = 1000; // –ù–∞–ø—Ä–∏–º–µ—Ä, 1000 —Å–≤–µ—á–µ–π

    const historicalData = await fetchHistoricalData(symbol, interval, lookback);

    const initialBalanceRUB = 10000;
    const usdToRubRate = await getUsdToRubRate();
    const initialBalanceETH = initialBalanceRUB / (usdToRubRate * await getPrice('ETHUSDT'));
    
    await log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalanceETH.toFixed(8)} ETH (${initialBalanceRUB.toFixed(2)} RUB)`, 'info', 'runInitialBacktest');

    const params = {
      symbol: symbol,
      initialBalance: initialBalanceETH,
      minSignalStrength: 0.6,
      riskFactor: 0.02,
      trailingStopUpdateThreshold: 0.01,
      trailingStopDistance: 0.02
    };
    
    await log('–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞...', 'info', 'runInitialBacktest');
    const result = await backtest(historicalData, params);

    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—á–µ—Ç –≥–æ–¥–æ–≤–æ–π –∏ –º–µ—Å—è—á–Ω–æ–π –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç–∏
    const days = lookback * 15 / (24 * 60); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π –≤ –¥–Ω–∏
    result.annualizedReturn = calculateAnnualizedReturn(result.profitPercentage, days);
    result.monthlyReturn = calculateMonthlyReturn(result.profitPercentage, days);
    result.dailyReturn = calculateDailyReturn(result.profitPercentage, days);
    
    await log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:`, 'info', 'runInitialBacktest');
    await log(`–ü—Ä–∏–±—ã–ª—å: ${result.profit.toFixed(8)} ETH (${(result.profit * ethPrice * usdToRubRate).toFixed(2)} RUB)`, 'info', 'runInitialBacktest');
    await log(`–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∏–±—ã–ª–∏: ${result.profitPercentage.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${result.annualizedReturn.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${result.monthlyReturn.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${result.totalTrades}`, 'info', 'runInitialBacktest');
    await log(`–í—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${result.winningTrades}`, 'info', 'runInitialBacktest');
    await log(`–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${result.winRate.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${result.averageClosePrice.toFixed(8)} ETH (${(result.averageClosePrice * ethPrice * usdToRubRate).toFixed(2)} RUB)`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: ${result.averageOpenPrice.toFixed(8)} ETH (${(result.averageOpenPrice * ethPrice * usdToRubRate).toFixed(2)} RUB)`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Å–¥–µ–ª–∫–∏: ${result.averageTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–π —Å–¥–µ–ª–∫–∏: ${result.averageWinningTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Ä–∞–∂–µ–Ω–∏—è: ${result.averageLosingTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');
    await log(`–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –≤ —Å—Ä–µ–¥–Ω–µ–º: ${result.averageTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π: ${result.losingTradesPercentage.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${result.winningTradesPercentage.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –ø–æ–±–µ–¥: ${result.winningTradesPercentage.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –ø—Ä–æ–∏–≥—Ä—ã—à–µ–π: ${result.losingTradesPercentage.toFixed(2)}%`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –ø–æ—Ä–∞–∂–µ–Ω–∏–π –≤ —Å—Ä–µ–¥–Ω–µ–º: ${result.averageLosingTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');
    await log(`–î–æ–ª—è –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ –≤ —Å—Ä–µ–¥–Ω–µ–º: ${result.averageWinningTradeLength.toFixed(2)} –º–∏–Ω—É—Ç`, 'info', 'runInitialBacktest');

    await logBacktestResult(result);
    await log('–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω', 'info', 'runInitialBacktest');
    await log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: ${JSON.stringify(result)}`, 'info', 'runInitialBacktest');

    return result;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±—ç–∫—Ç–µ—Å—Ç–∞: ${error.message}`, 'error', 'runInitialBacktest');
    return null;
  }
}

function calculateAnnualizedReturn(profitPercent, days) {
  return (Math.pow(1 + profitPercent / 100, 365 / days) - 1) * 100;
}

function calculateMonthlyReturn(profitPercent, days) {
  return (Math.pow(1 + profitPercent / 100, 30 / days) - 1) * 100;
}

async function logBacktestResult(result) {
  const backtestLogPath = path.join(__dirname, 'logs', 'backtest_results.json');
  try {
    let backtestHistory = [];
    if (await fs.pathExists(backtestLogPath)) {
      backtestHistory = await fs.readJson(backtestLogPath);
    }
    const resultWithTimestamp = {
      timestamp: new Date().toISOString(),
      ...result
    };
    backtestHistory.push(resultWithTimestamp);
    await fs.writeJson(backtestLogPath, backtestHistory, { spaces: 2 });
    await log('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ —Ñ–∞–π–ª', 'info', 'logBacktestResult');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞: ${error.message}`, 'error', 'logBacktestResult');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞ –≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ
async function simulateOrderExecution(signal, positionSize, entryPrice, stopLossPrice, takeProfitPrice, portfolio, currentCandle, historicalData, marketConditions) {
  try {
      await log(`üîÑ –ù–∞—á–∞–ª–æ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: ${signal} ${positionSize} ETH –ø–æ —Ü–µ–Ω–µ ${entryPrice}`, 'info', 'simulateOrderExecution');
  
      const holdTime = calculateAdaptiveHoldTime(marketConditions, signal);
      await log(`‚è±Ô∏è –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${holdTime} –º—Å`, 'info', 'simulateOrderExecution');
  
      let exitPrice = entryPrice;
      let exitReason = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      let i = 0;
      const maxCandles = Math.ceil(holdTime / (15 * 60 * 1000)); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 15-–º–∏–Ω—É—Ç–Ω—ã—Ö —Å–≤–µ—á–µ–π
  
      while (i < maxCandles) {
        const nextCandle = historicalData[historicalData.indexOf(currentCandle) + i + 1];
        if (!nextCandle) break;

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
          const slippage = (Math.random() * marketConditions.volatility * 2 + 0.001); // –ü—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
          const highPriceWithSlippage = nextCandle.high * (1 + slippage);
          const lowPriceWithSlippage = nextCandle.low * (1 - slippage);

        if (signal === 'buy') {
          if (lowPriceWithSlippage <= stopLossPrice) {
            exitPrice = stopLossPrice;
            exitReason = '–°—Ç–æ–ø-–ª–æ—Å—Å';
            break;
          } else if (highPriceWithSlippage >= takeProfitPrice) {
            exitPrice = takeProfitPrice;
            exitReason = '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç';
            break;
          }
        } else { // –¥–ª—è —Å–∏–≥–Ω–∞–ª–∞ 'sell'
          if (highPriceWithSlippage >= stopLossPrice) {
            exitPrice = stopLossPrice;
            exitReason = '–°—Ç–æ–ø-–ª–æ—Å—Å';
            break;
          } else if (lowPriceWithSlippage <= takeProfitPrice) {
            exitPrice = takeProfitPrice;
            exitReason = '–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç';
            break;
          }
        }
  
        i++;
      }
  
      if (exitReason === '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ') {

        // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ
        const slippage = (Math.random() * marketConditions.volatility * 2 + 0.001);

        exitPrice = historicalData[historicalData.indexOf(currentCandle) + i].close  * (1 + slippage) ;
        exitReason = '–í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ';
      }

      const profitLoss = signal === 'buy' ? 
        (exitPrice - entryPrice) * positionSize :
        (entryPrice - exitPrice) * positionSize;
  
      const updatedPortfolio = {...portfolio};
      updatedPortfolio.USDT = new Decimal(updatedPortfolio.USDT); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal
      updatedPortfolio.ETH = new Decimal(updatedPortfolio.ETH); // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ Decimal

      if (signal === 'buy') {
        updatedPortfolio.USDT = updatedPortfolio.USDT.minus(positionSize.times(entryPrice));
        updatedPortfolio.ETH = updatedPortfolio.ETH.plus(positionSize);
        updatedPortfolio.USDT = updatedPortfolio.USDT.plus(positionSize.times(exitPrice));
        updatedPortfolio.ETH = updatedPortfolio.ETH.minus(positionSize);
      } else {
        updatedPortfolio.ETH = updatedPortfolio.ETH.minus(positionSize);
        updatedPortfolio.USDT = updatedPortfolio.USDT.plus(positionSize.times(entryPrice));
        updatedPortfolio.ETH = updatedPortfolio.ETH.plus(positionSize);
        updatedPortfolio.USDT = updatedPortfolio.USDT.minus(positionSize.times(exitPrice));
      }
  
      // –ü—Ä–∏–≤–æ–¥–∏–º –æ–±—Ä–∞—Ç–Ω–æ –∫ —á–∏—Å–ª–∞–º
      updatedPortfolio.USDT = updatedPortfolio.USDT.toNumber();
      updatedPortfolio.ETH = updatedPortfolio.ETH.toNumber();
  
      await log(`üìä –°–∏–º—É–ª—è—Ü–∏—è –æ—Ä–¥–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:
      üîÑ –¢–∏–ø: ${signal}
      üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${positionSize.toFixed(8)} ETH
      üìà –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entryPrice.toFixed(2)} USDT
      üìâ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${exitPrice.toFixed(2)} USDT
      üí∏ –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profitLoss.toFixed(2)} USDT
      üèÅ –ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: ${exitReason}
      ‚è±Ô∏è –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${i * 15} –º–∏–Ω—É—Ç`, 'info', 'simulateOrderExecution');
  
      return {
        type: signal,
        positionSize,
        entryPrice,
        exitPrice,
        profitLoss,
        exitReason,
        holdTime: i * 15, // –≤ –º–∏–Ω—É—Ç–∞—Ö
        updatedPortfolio
      };
    } catch (error) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'simulateOrderExecution');
      throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
function analyzeBacktestResults(trades, finalPortfolio) {
  const initialBalance = 10000; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å USDT
  const totalProfit = finalPortfolio.USDT - initialBalance;
  const profitPercentage = (totalProfit / initialBalance) * 100;
  const winningTrades = trades.filter(trade => trade.profitLoss > 0);
  const losingTrades = trades.filter(trade => trade.profitLoss <= 0);

  return {
    totalTrades: trades.length,
    winningTrades: winningTrades.length,
    losingTrades: losingTrades.length,
    winRate: (winningTrades.length / trades.length) * 100,
    totalProfit: totalProfit,
    profitPercentage: profitPercentage,
    finalBalance: finalPortfolio.USDT,
    averageTradeProfit: totalProfit / trades.length,
    averageHoldTime: trades.reduce((sum, trade) => sum + trade.holdTime, 0) / trades.length
  };
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–∫–∏ –≤ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–µ
async function simulateTrade(signal, signalStrength, marketConditions, riskParams, portfolio, currentCandle) {
  try {
    console.log(chalk.yellow(`üîÑ –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏: –°–∏–≥–Ω–∞–ª ${signal}, –°–∏–ª–∞ ${signalStrength}`));

    const currentPrice = currentCandle.close;
    const usdToRubRate = await getUsdToRubRateWithRetry();
    const positionSize = await calculateDynamicPositionSize(symbol, riskParams.risk, marketConditions.volatility, signalStrength);

    if (positionSize < MIN_POSITION_SIZE) {
      console.log(chalk.yellow(`‚ö†Ô∏è –°–∏–º—É–ª—è—Ü–∏—è: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (${positionSize} ETH) –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ. –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`));
      return null;
    }

    const stopLossPrice = calculateStopLossPrice(currentPrice, riskParams.stopLossPercent, signal);
    const takeProfitPrice = calculateTakeProfitPrice(currentPrice, riskParams.takeProfitPercent, signal);

    console.log(chalk.yellow(`üéØ –°–∏–º—É–ª—è—Ü–∏—è: –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossPrice.toFixed(2)} USD (${(stopLossPrice * usdToRubRate).toFixed(2)} RUB), –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfitPrice.toFixed(2)} USD (${(takeProfitPrice * usdToRubRate).toFixed(2)} RUB)`));

    const tradeResult = await simulateOrderExecution(signal, positionSize, currentPrice, stopLossPrice, takeProfitPrice, portfolio, currentCandle);

    if (tradeResult) {
      tradeResult.profitLossRUB = tradeResult.profitLoss * usdToRubRate;
      console.log(chalk.yellow(`üìä –°–∏–º—É–ª—è—Ü–∏—è —Å–¥–µ–ª–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${tradeResult.profitLossRUB.toFixed(2)} RUB`));
    }

    return tradeResult;
  } catch (error) {
    console.log(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –≤ —Å–∏–º—É–ª—è—Ü–∏–∏ —Å–¥–µ–ª–∫–∏: ${error.message}`));
    return null;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
async function analyzeBacktestResults(trades, finalPortfolio, initialBalanceRUB) {
  const usdToRubRate = await getUsdToRubRate();
  const ethPrice = await getPrice('ETHUSDT');
  const finalBalanceRUB = finalPortfolio.ETH * ethPrice * usdToRubRate + finalPortfolio.RUB;
  const totalProfit = finalBalanceRUB - initialBalanceRUB;
  const profitPercentage = (totalProfit / initialBalanceRUB) * 100;
  const winningTrades = trades.filter(trade => trade.profitLossRUB > 0);
  const losingTrades = trades.filter(trade => trade.profitLossRUB <= 0);

  return {
    totalTrades: trades.length,
    winningTrades: winningTrades.length,
    losingTrades: losingTrades.length,
    winRate: (winningTrades.length / trades.length) * 100,
    totalProfit: totalProfit.toFixed(2),
    profitPercentage: profitPercentage.toFixed(2),
    initialBalance: initialBalanceRUB.toFixed(2),
    finalBalance: finalBalanceRUB.toFixed(2),
    averageTradeProfit: (totalProfit / trades.length).toFixed(2),
    maxDrawdown: calculateMaxDrawdown(trades).toFixed(2),
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
 * @param {number} seconds –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatTime(seconds) {
  const hours = Math.floor(seconds / 3600);
  const minutes = Math.floor((seconds % 3600) / 60);
  const secs = Math.floor(seconds % 60);
  return `${hours}—á ${minutes}–º ${secs}—Å`;
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
function calculateMaxDrawdown(trades) {
  let peak = new Decimal(0);
  let maxDrawdown = new Decimal(0);
  let runningTotal = new Decimal(0);

  for (const trade of trades) {
    runningTotal = runningTotal.plus(trade.profitLoss);
    if (runningTotal.greaterThan(peak)) {
      peak = runningTotal;
    }
    const drawdown = peak.greaterThan(0) ? peak.minus(runningTotal).dividedBy(peak) : new Decimal(0);
    if (drawdown.greaterThan(maxDrawdown)) {
      maxDrawdown = drawdown;
    }
  }

  return maxDrawdown.times(100); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞
async function backtest(historicalData, params) {
  const startTime = Date.now();
  try {
    await log('–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞', 'info', 'backtest');
    const usdToRubRate = await getUsdToRubRate();

    let portfolio = {
      ETH: params.initialBalance,
      USDT: 0
    };

    let trades = [];
    let maxDrawdown = 0;
    let highestBalance = params.initialBalance;
    let totalProfit = 0;
    let winningTrades = 0;
    let losingTrades = 0;

    await log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${params.initialBalance.toFixed(8)} ETH (${(params.initialBalance * historicalData[0].close * usdToRubRate).toFixed(2)} RUB)`, 'info', 'backtest');

    for (let i = 100; i < historicalData.length; i++) {
      const inputData = historicalData.slice(i - 100, i);
      const analysisResult = await analyzeDataWithNN(params.symbol, '15m', inputData);

      const { signal, signalStrength, currentPrice } = analysisResult;

      await log(`–î–µ–Ω—å ${i-99}: –¶–µ–Ω–∞ ${currentPrice.toFixed(2)} USD, –°–∏–≥–Ω–∞–ª: ${signal}, –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${signalStrength.toFixed(4)}`, 'detail', 'backtest');

      if (signal !== 'hold' && signalStrength >= params.minSignalStrength) {
        const positionSize = await calculateDynamicPositionSize(params.symbol, params.riskFactor);
        
        const slippage = 1 + (Math.random() * 0.002 - 0.001);
        const executionPrice = currentPrice * slippage;

        if (signal === 'buy' && portfolio.USDT >= positionSize * executionPrice) {
          const buyAmount = positionSize / executionPrice;
          portfolio.USDT -= positionSize;
          portfolio.ETH += buyAmount;

          const trade = {
            type: 'buy',
            price: executionPrice,
            amount: buyAmount,
            date: historicalData[i].date,
            openIndex: i
          };
          trades.push(trade);

          await log(`–ë—ç–∫—Ç–µ—Å—Ç: –ü–æ–∫—É–ø–∫–∞ ${buyAmount.toFixed(8)} ETH –ø–æ —Ü–µ–Ω–µ ${executionPrice} USD`, 'info', 'backtest');
          
          const tradeResult = await closeTradeInBacktest(trade, historicalData, i, trades, portfolio);
          totalProfit += tradeResult.profit;
          if (tradeResult.profit > 0) winningTrades++;
          else losingTrades++;
        } else if (signal === 'sell' && portfolio.ETH >= positionSize / executionPrice) {
          const sellAmount = positionSize / executionPrice;
          portfolio.USDT += positionSize;
          portfolio.ETH -= sellAmount;

          const trade = {
            type: 'sell',
            price: executionPrice,
            amount: sellAmount,
            date: historicalData[i].date,
            openIndex: i
          };
          trades.push(trade);

          await log(`–ë—ç–∫—Ç–µ—Å—Ç: –ü—Ä–æ–¥–∞–∂–∞ ${sellAmount.toFixed(8)} ETH –ø–æ —Ü–µ–Ω–µ ${executionPrice} USD`, 'info', 'backtest');
          
          const tradeResult = await closeTradeInBacktest(trade, historicalData, i, trades, portfolio);
          totalProfit += tradeResult.profit;
          if (tradeResult.profit > 0) winningTrades++;
          else losingTrades++;
        }
      }

      const currentBalance = portfolio.ETH + (portfolio.USDT / currentPrice);
      if (currentBalance > highestBalance) {
        highestBalance = currentBalance;
      } else {
        const drawdown = (highestBalance - currentBalance) / highestBalance;
        if (drawdown > maxDrawdown) {
          maxDrawdown = drawdown;
        }
      }

      await log(`–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance.toFixed(8)} ETH (${(currentBalance * currentPrice * usdToRubRate).toFixed(2)} RUB)`, 'detail', 'backtest');
    }

    const finalPrice = historicalData[historicalData.length - 1].close;
    const finalBalanceETH = portfolio.ETH + (portfolio.USDT / finalPrice);
    const profit = finalBalanceETH - params.initialBalance;
    const profitPercentage = (profit / params.initialBalance) * 100;

    const closedTrades = trades.filter(t => t.closePrice);

    const result = {
      initialBalance: params.initialBalance,
      finalBalance: finalBalanceETH,
      profit: profit,
      profitPercentage: profitPercentage,
      maxDrawdown: maxDrawdown * 100,
      totalTrades: closedTrades.length,
      winningTrades: winningTrades,
      losingTrades: losingTrades,
      winRate: (winningTrades / closedTrades.length) * 100,
      averageProfit: totalProfit / closedTrades.length,
      totalProfit: totalProfit,
      trades: closedTrades
    };

    await log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞:`, 'info', 'backtest');
    await log(`–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${params.initialBalance.toFixed(8)} ETH`, 'info', 'backtest');
    await log(`–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalanceETH.toFixed(8)} ETH`, 'info', 'backtest');
    await log(`–ü—Ä–∏–±—ã–ª—å: ${profit.toFixed(8)} ETH (${profitPercentage.toFixed(2)}%)`, 'info', 'backtest');
    await log(`–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${totalProfit.toFixed(8)} ETH`, 'info', 'backtest');
    await log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${(maxDrawdown * 100).toFixed(2)}%`, 'info', 'backtest');
    await log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${closedTrades.length}`, 'info', 'backtest');
    await log(`–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${winningTrades}`, 'info', 'backtest');
    await log(`–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${losingTrades}`, 'info', 'backtest');
    await log(`–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${result.winRate.toFixed(2)}%`, 'info', 'backtest');
    await log(`–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${result.averageProfit.toFixed(8)} ETH`, 'info', 'backtest');

    const endTime = Date.now();
    const executionTimeMinutes = ((endTime - startTime) / 60000).toFixed(2);
    const timeMessage = chalk.bgCyan.black(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞: ${executionTimeMinutes} –º–∏–Ω—É—Ç`);
    
    await log(timeMessage, 'info', 'backtest');
    console.log(timeMessage);

    return result;
  } catch (error) {
    const endTime = Date.now();
    const executionTimeMinutes = ((endTime - startTime) / 60000).toFixed(2);
    const timeMessage = chalk.bgRed.white(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±—ç–∫—Ç–µ—Å—Ç–∞ (—Å –æ—à–∏–±–∫–æ–π): ${executionTimeMinutes} –º–∏–Ω—É—Ç`);
    
    await log(timeMessage, 'error', 'backtest');
    console.log(timeMessage);
    
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: ${error.message}`, 'error', 'backtest');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞
async function placeTakeProfitOrder(symbol, side, price, amount) {
  try {
    await log(`üéØ –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞: ${symbol} ${side} ${amount} –ø–æ —Ü–µ–Ω–µ ${price}`, 'info', 'placeTakeProfitOrder');
    
    if (currentTradingMode === 'test') {
      await log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –†–∞–∑–º–µ—â–µ–Ω–∏–µ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞ –¥–ª—è ${symbol} –ø–æ —Ü–µ–Ω–µ ${price}`, 'info', 'placeTakeProfitOrder');
      return { success: true, message: '–¢–µ—Å—Ç–æ–≤—ã–π —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä' };
    }

    const order = await bybitClient.submitOrder({
      category: 'spot',
      symbol: symbol,
      side: side,
      orderType: 'LIMIT',
      qty: amount.toString(),
      price: price.toString(),
      timeInForce: 'GTC',
      reduceOnly: true,
      closeOnTrigger: true
    });

    await log(`‚úÖ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä —Ä–∞–∑–º–µ—â–µ–Ω: ${JSON.stringify(order)}`, 'info', 'placeTakeProfitOrder');
    return order;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞: ${error.message}`, 'error', 'placeTakeProfitOrder');
    return { success: false, message: error.message };
  }
}

async function closeTradeInBacktest(trade, historicalData, currentIndex, trades, portfolio) {
  // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–¥–µ–ª–∫—É —á–µ—Ä–µ–∑ —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤ (–æ—Ç 1 –¥–æ 20)
  const closeIndex = Math.min(currentIndex + Math.floor(Math.random() * 20) + 1, historicalData.length - 1);
  const closePrice = historicalData[closeIndex].close;

  // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø—Ä–æ—Å–∫–∞–ª—å–∑—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
  const slippage = 1 + (Math.random() * 0.002 - 0.001);
  const executionClosePrice = closePrice * slippage;

  const entryValue = trade.price * trade.amount;
  const exitValue = executionClosePrice * trade.amount;
  const commission = (entryValue + exitValue) * 0.001; // 0.1% –∫–æ–º–∏—Å—Å–∏—è

  let profit;
  if (trade.type === 'buy') {
    profit = exitValue - entryValue - commission;
    portfolio.USDT += exitValue - commission;
    portfolio.ETH -= trade.amount;
  } else {
    profit = entryValue - exitValue - commission;
    portfolio.ETH += trade.amount;
    portfolio.USDT -= exitValue + commission;
  }

  trade.closePrice = executionClosePrice;
  trade.closeIndex = closeIndex;
  trade.closeDate = historicalData[closeIndex].date;
  trade.profit = profit;
  trade.profitPercentage = (profit / entryValue) * 100;
  trade.commission = commission;

  await log(`–ë—ç–∫—Ç–µ—Å—Ç: –ó–∞–∫—Ä—ã—Ç–∞ —Å–¥–µ–ª–∫–∞ ${trade.type} ${trade.amount.toFixed(8)} ETH. –ü—Ä–∏–±—ã–ª—å: ${profit.toFixed(8)} ETH (${trade.profitPercentage.toFixed(2)}%)`, 'info', 'backtest');

  return { profit };
}
// –ö–æ–Ω–µ—Ü —Ç–æ—Ä–≥–æ–≤–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
async function getUsdToRubRateWithRetry(maxRetries = 5, initialDelay = 1000) {
  let retryCount = 0;
  while (retryCount < maxRetries) {
    try {
      return await getUsdToRubRate();
    } catch (error) {
      if (error.response && error.response.status === 429) {
        retryCount++;
        const delay = initialDelay * Math.pow(2, retryCount);
        await log(`–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å 429, –æ–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (${retryCount}/${maxRetries})`, 'warn', 'getUsdToRubRateWithRetry');
        await new Promise(resolve => setTimeout(resolve, delay));
      } else {
        throw error;
      }
    }
  }
  throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
}

// üíæ –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB –Ω–∞ 1 —á–∞—Å
const usdRubRateCache = new NodeCache({ stdTTL: 1 * 60 * 60 });

/**
 * üí± –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å USD/RUB —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @param {number} maxRetries - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞.
 * @param {number} retryDelay - –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö.
 * @returns {Promise<Decimal>} –ö—É—Ä—Å USD/RUB.
 */
async function getUsdToRubRate(maxRetries = 3, retryDelay = 3000) {
  try {
    await log('üîç –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB', 'info', 'getUsdToRubRate');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cachedRate = usdRubRateCache.get('usdRubRate');
    if (cachedRate) {
      await log(`üí∞ –ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω –∏–∑ –∫—ç—à–∞: ${cachedRate}`, 'info', 'getUsdToRubRate');
      return new Decimal(cachedRate);
    }

    // üìä –ú–∞—Å—Å–∏–≤ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
    const dataSources = [
      {
        name: 'Exchange Rate API',
        fetchRate: async () => {
          const response = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', {
            timeout: 5000,
            headers: { 'User-Agent': 'YourAppName/1.0' }
          });
          if (response.data && response.data.rates && response.data.rates.RUB) {
            return response.data.rates.RUB;
          }
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Exchange Rate API');
        }
      },
      {
        name: 'Open Exchange Rates',
        fetchRate: async () => {
          const response = await axios.get(`https://openexchangerates.org/api/latest.json?app_id=${process.env.OPEN_EXCHANGE_RATES_APP_ID}`, {
            timeout: 5000,
            headers: { 'User-Agent': 'YourAppName/1.0' }
          });
          if (response.data && response.data.rates && response.data.rates.RUB) {
            return response.data.rates.RUB;
          }
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Open Exchange Rates');
        }
      },
      // üîÑ –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å
    ];

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      await log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∏–∑ ${maxRetries} –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USD/RUB`, 'info', 'getUsdToRubRate');

      for (const source of dataSources) {
        try {
          const rate = await source.fetchRate();
          if (!isNaN(rate) && rate > 0) {
            await log(`‚úÖ –ö—É—Ä—Å USD/RUB –ø–æ–ª—É—á–µ–Ω –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ${source.name}: ${rate}`, 'info', 'getUsdToRubRate');
            
            // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å –≤ –∫—ç—à
            usdRubRateCache.set('usdRubRate', rate);
            
            return new Decimal(rate);
          } else {
            throw new Error(`–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞: ${rate}`);
          }
        } catch (error) {
          await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –∏–∑ ${source.name}: ${error.message}`, 'warn', 'getUsdToRubRate');
        }
      }

      if (attempt < maxRetries) {
        await log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`, 'info', 'getUsdToRubRate');
        await new Promise(resolve => setTimeout(resolve, retryDelay));
      }
    }

    // üö® –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    const fallbackRate = 92.71;
    await log(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/RUB. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è: ${fallbackRate}`, 'warn', 'getUsdToRubRate');
    return fallbackRate;

  } catch (error) {
    await log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ USD/RUB: ${error.message}`, 'error', 'getUsdToRubRate');
    return new Decimal(92.71); // –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
async function initializeTestPortfolio() {
  const ethPrice = await getPrice('ETHUSDT');
  const usdToRubRate = await getUsdToRubRate();
  const initialEthAmount = INITIAL_BALANCE_RUB / (ethPrice * usdToRubRate);
  testPortfolio.ETH = initialEthAmount;
  testPortfolio.RUB = INITIAL_BALANCE_RUB;
  await log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${initialEthAmount.toFixed(8)} ETH (${testPortfolio.RUB.toFixed(2)} RUB)`, 'info', 'initializeTestPortfolio');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
function calculateDynamicPositionSize(balance, _risk, volatility) {
  const basePositionSize = balance * RISK_PER_TRADE;
  const volatilityAdjustment = 1 - (volatility / 0.1); // –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –≤—ã—Å–æ–∫–æ–π –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç–∏
  return Math.min(basePositionSize * volatilityAdjustment, balance * MAX_POSITION_SIZE);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
async function fetchCandlestickData(symbol, interval, startTime, endTime, limit = 1000) {
  try {
    await log(`–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: —Å–∏–º–≤–æ–ª=${symbol}, –∏–Ω—Ç–µ—Ä–≤–∞–ª=${interval}, startTime=${startTime}, endTime=${endTime}, –ª–∏–º–∏—Ç=${limit}`, 'info', 'fetchCandlestickData');

    const response = await bybitClient.getKline({
      category: 'spot',
      symbol: symbol,
      interval: interval,
      startTime: startTime,
      endTime: endTime,
      limit: limit
    });

    if (!response.result || !response.result.list) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API');
    }

    const chartData = response.result.list.map(item => ({
      x: new Date(parseInt(item[0])),
      y: parseFloat(item[4]) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ü–µ–Ω—É –∑–∞–∫—Ä—ã—Ç–∏—è (close) –¥–ª—è –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    }));

    await log(`–ü–æ–ª—É—á–µ–Ω–æ ${chartData.length} —Ç–æ—á–µ–∫ –¥–∞–Ω–Ω—ã—Ö`, 'info', 'fetchCandlestickData');
    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞:', chartData);

    return chartData;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: ${error.message}`, 'error', 'fetchCandlestickData');
    await sendTelegramMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: ${error.message}`);
    throw error;
  }
}



// –ú–∞—Ä—à—Ä—É—Ç—ã API


// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
app.get('/strategy-metrics', async (_req, res) => {
  try {
    const metrics = await getLatestMetrics();
    res.json(metrics);
  } catch (error) {
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏' });
  }
});


// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
app.get('/candlestick-data/:symbol/:interval', async (req, res) => {
  const { symbol, interval } = req.params;
  const { startTime, endTime, limit } = req.query;

  try {
    const chartData = await fetchCandlestickData(symbol, interval, startTime, endTime, limit);
    res.json(chartData);
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –≤ –º–∞—Ä—à—Ä—É—Ç–µ /candlestick-data: ${error.message}`);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞', details: error.message });
  }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ETH/USD
app.get('/price/ETHUSD', async (_req, res) => {
  await log('–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã ETH/USD...', 'detail', 'GET /price/ETHUSD');
  try {
    const price = await getPrice('ETHUSDT');
    await log(`–¶–µ–Ω–∞ ETH/USD –ø–æ–ª—É—á–µ–Ω–∞: ${price}`, 'detail', 'GET /price/ETHUSD');
    await logRouteData('price_ETHUSD', { price });
    res.json({ price });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã ETH/USD', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã ETH/RUB
app.get('/price/ETHRUB', async (_req, res) => {
  await log('–ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã ETH/RUB...', 'detail', 'GET /price/ETHRUB');
  try {
    const price = await getPrice('ETHUSDT');
    const usdToRub = await axios.get('https://api.exchangerate-api.com/v4/latest/USD', { timeout: 5000 });
    const ethRubPrice = parseFloat(price) * usdToRub.data.rates.RUB;
    await log(`–¶–µ–Ω–∞ ETH/RUB –ø–æ–ª—É—á–µ–Ω–∞: ${ethRubPrice}`, 'detail', 'GET /price/ETHRUB');
    await logRouteData('price_ETHRUB', { ethRubPrice });
    res.json({ price: ethRubPrice });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã ETH/RUB', error);
  }
});

app.get('/manual-trade-analysis', async (req, res) => {
  try {
    const { startDate, endDate } = req.query;
    
    if (!startDate || !endDate) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å startDate –∏ endDate' });
    }

    const analysis = await analyzeTrades(startDate, endDate);
    
    res.json(analysis);
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä—É—á–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'manualTradeAnalysis');
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∞–ª–∏–∑–∞ —Å–¥–µ–ª–æ–∫' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö ETH/USD
app.get('/historical/ETHUSD/:period', async (req, res) => {
  const { period } = req.params;
  await log(`–ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${period}...`, 'detail', 'GET /historical/ETHUSD/:period');
  try {
    const endTime = Date.now();
    let interval;
    let limit = 1000;

    switch (period) {
      case '1m':
        interval = '1';
        break;
      case '5m':
        interval = '5';
        break;
      case '15m':
        interval = '15';
        break;
      case '30m':
        interval = '30';
        break;
      case '1h':
        interval = '60';
        break;
      case '4h':
        interval = '240';
        break;
      default:
        interval = '15';
    }

    const response = await bybitClient.getKline({
      category: 'spot',
      symbol: 'ETHUSDT',
      interval: interval,
      limit: limit,
      end: endTime,
    });

    if (!response || !response.result || !Array.isArray(response.result.list) || response.result.list.length === 0) {
      console.error('–û—Ç–≤–µ—Ç API Bybit:', JSON.stringify(response, null, 2));
      throw new Error('–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å Bybit.');
    }

    const historicalData = response.result.list.map((item) => ({
      date: moment(parseInt(item[0])).format('YYYY-MM-DD HH:mm:ss'),
      open: parseFloat(item[1]),
      high: parseFloat(item[2]),
      low: parseFloat(item[3]),
      close: parseFloat(item[4]),
      volume: parseFloat(item[5]),
    }));

    await log('–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã.', 'detail', 'GET /historical/ETHUSD/:period');

    const analysisResult = await analyzeData(historicalData);
    await log('–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω.', 'detail', 'GET /historical/ETHUSD/:period');

    await autoTrade(analysisResult);
    await logRouteData(`historical_ETHUSD_${period}`, { historicalData, analysisResult });

    res.json(analysisResult);
    io.emit('newData', analysisResult); // –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ socket.io
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö', error);
  }
});



// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞
async function saveBacktestResult(result) {
  try {
    const backtestDir = path.join(__dirname, 'backtest_results');
    const backtestPath = path.join(backtestDir, `backtest_${Date.now()}.json`);
    
    await fs.mkdir(backtestDir, { recursive: true });
    
    const usdToRubRate = await getUsdToRubRate();
    const ethPrice = await getPrice('ETHUSDT');
    
    const formattedResult = {
      "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": new Date().toISOString(),
      "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (ETH)": result.initialBalance.toFixed(8),
      "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (RUB)": (result.initialBalance * ethPrice * usdToRubRate).toFixed(2),
      "–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å (ETH)": result.finalBalance.toFixed(8),
      "–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å (RUB)": (result.finalBalance * ethPrice * usdToRubRate).toFixed(2),
      "–ü—Ä–∏–±—ã–ª—å (ETH)": result.profit.toFixed(8),
      "–ü—Ä–∏–±—ã–ª—å (RUB)": (result.profit * ethPrice * usdToRubRate).toFixed(2),
      "–ü—Ä–∏–±—ã–ª—å (%)": result.profitPercentage.toFixed(2),
      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞ (%)": result.maxDrawdown.toFixed(2),
      "–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)": result.annualizedReturn.toFixed(2),
      "–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)": result.monthlyReturn.toFixed(2),
      "–î–Ω–µ–≤–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å (%)": result.dailyReturn.toFixed(2),
      "–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫": result.totalTrades,
      "–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫": result.profitableTrades,
      "–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫": result.unprofitableTrades,
      "–ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫": result.winRate.toFixed(2),
      "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É (ETH)": result.averageProfit.toFixed(8),
      "–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É (RUB)": (result.averageProfit * ethPrice * usdToRubRate).toFixed(2),
      "–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ (%)": ((result.profitPercentage / result.maxDrawdown) * 100).toFixed(2)
    };

    await fs.writeFile(backtestPath, JSON.stringify(formattedResult, null, 2));
    await log(`–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${backtestPath}`, 'info', 'saveBacktestResult');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—ç–∫—Ç–µ—Å—Ç–∞: ${error.message}`, 'error', 'saveBacktestResult');
    throw error;
  }
}

// –û–±–Ω–æ–≤–∏–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞
app.post('/backtest', async (req, res) => {
  try {
    const { startDate, endDate } = req.body;
    await log(`–ù–∞—á–∞–ª–æ –±—ç–∫—Ç–µ—Å—Ç–∞: startDate=${startDate}, endDate=${endDate}`, 'info', 'POST /backtest');
    const historicalData = await fetchHistoricalDataForTraining('15m', startDate, endDate);
    const result = await backtest(historicalData, {
      gridLevels: 10,
      profitMargin: 0.02,
      riskFactor: 1
    });
    await saveBacktestResult(result);
    await log(`–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(result)}`, 'info', 'POST /backtest');
    
    const response = {
      —Å–æ–æ–±—â–µ–Ω–∏–µ: '–ë—ç–∫—Ç–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω',
      —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã: {
        '–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å': `${result.finalBalanceUSD.toFixed(2)} USD`,
        '–ü—Ä–∏–±—ã–ª—å': `${result.profitRUB.toFixed(2)} —Ä—É–±. (${result.profitPercent.toFixed(2)}%)`,
        '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞': `${result.maxDrawdown.toFixed(2)}%`,
        '–ì–æ–¥–æ–≤–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': `${result.annualizedReturn.toFixed(2)}%`,
        '–ú–µ—Å—è—á–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å': `${result.monthlyReturn.toFixed(2)}%`,
        '–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫': result.tradesCount,
        '–ü—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫': result.positiveTradesCount,
        '–£–±—ã—Ç–æ—á–Ω—ã—Ö —Å–¥–µ–ª–æ–∫': result.negativeTradesCount,
        '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏': `${result.strategyEfficiency.toFixed(2)}%`,
        '–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è': {
          'ETH': `${result.finalPortfolio.ETH.toFixed(8)} ETH`,
          'USDT': `${result.finalPortfolio.USDT.toFixed(2)} USDT`
        }
      }
    };
    
    res.json(response);
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –±—ç–∫—Ç–µ—Å—Ç–∞: ${error.message}`, 'error', 'POST /backtest');
    res.status(500).json({ –æ—à–∏–±–∫–∞: error.message });
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
app.post('/switch-mode', async (req, res) => {
  try {
    const { mode } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π —Ä–µ–∂–∏–º–∞
    if (mode !== 'live' && mode !== 'test') {
      return res.status(400).json({ 
        success: false, 
        message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞. –í—ã–±–µ—Ä–∏—Ç–µ "live" –∏–ª–∏ "test".' 
      });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    currentTradingMode = mode;

    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
    await log(`–†–µ–∂–∏–º —Ç–æ—Ä–≥–æ–≤–ª–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${mode}`, 'info', 'switchTradingMode');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
    res.json({ 
      success: true, 
      message: `–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${mode}`, 
      currentMode: mode 
    });
  } catch (error) {
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'switchTradingMode');

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É —Å –æ—à–∏–±–∫–æ–π
    res.status(500).json({ 
      success: false, 
      message: error.message 
    });
  }
});

app.get('/trading-mode', (_req, res) => {
  res.json({ mode: currentTradingMode });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏
app.get('/trading-mode', (_req, res) => {
  res.json({ mode: currentTradingMode });
});

app.post('/log-action', (req, res) => {
  const { action, details } = req.body;
  console.log(`User action: ${action}`, details);
  // –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–æ–≥–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ —Ñ–∞–π–ª
  res.sendStatus(200);
});

app.post('/neural-network/toggle-training', (req, res) => {
  const { enabled } = req.body;
  if (typeof enabled === 'boolean') {
    isNeuralNetworkTrainingEnabled = enabled;
    log(`–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`, 'info', 'toggleNeuralNetworkTraining');
    res.json({ success: true, message: `–û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ ${enabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}` });
  } else {
    res.status(400).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –û–∂–∏–¥–∞–µ—Ç—Å—è { enabled: boolean }' });
  }
});


app.get('/neural-network/training-status', (_req, res) => {
  res.json({ enabled: isNeuralNetworkTrainingEnabled });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
app.post('/trade', async (req, res) => {
  const { action, amount, signalId } = req.body;
  await logRouteData('trade_request', { action, amount, signalId });

  if (!action || (action !== 'buy' && action !== 'sell')) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä action' });
  }

  if (!signalId) {
    return res.status(400).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä signalId' });
  }

  try {
    const { order, tradeHistory } = await executeTrade(action, amount, signalId);
    await logRouteData('trade_response', { order, tradeHistory });
    res.json({ 
      message: `–î–µ–π—Å—Ç–≤–∏–µ ${action} –≤—ã–ø–æ–ª–Ω–µ–Ω–æ`,
      order: order,
      tradeHistory: tradeHistory 
    });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–æ—Ä–≥–æ–≤–ª–µ', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
app.get('/trade-history', async (_req, res) => {
  try {
    if (await fs.pathExists(tradeHistoryPath)) {
      const tradeHistory = await fs.readJson(tradeHistoryPath);
      await logRouteData('trade_history', tradeHistory);
      res.json(tradeHistory);
    } else {
      res.status(404).json({ error: '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
app.get('/test-portfolio', async (_req, res) => {
  await logRouteData('test_portfolio', testPortfolio);
  res.json(testPortfolio);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
app.post('/update-test-portfolio', async (req, res) => {
  const { ethBalance, usdtBalance } = req.body;
  await logRouteData('update_test_portfolio_request', { ethBalance, usdtBalance });
  if (isNaN(ethBalance) || isNaN(usdtBalance)) {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞' });
  }

  try {
    testPortfolio.ETH = parseFloat(ethBalance);
    testPortfolio.USDT = parseFloat(usdtBalance);
    await fs.writeJson(testPortfolioPath, testPortfolio, { spaces: 2 });
    await logRouteData('update_test_portfolio_response', testPortfolio);
    res.json({ message: '–ë–∞–ª–∞–Ω—Å –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω', portfolio: testPortfolio });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
app.get('/portfolio', async (_req, res) => {
  try {
    const isConnected = await checkBybitConnection();
    if (!isConnected) {
      throw new Error('–ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit API');
    }

    const balances = await bybitClient.getWalletBalance({ accountType: "UNIFIED" });    await log(`–û—Ç–≤–µ—Ç –æ—Ç Bybit API: ${JSON.stringify(balances)}`, 'detail', 'GET /portfolio');
    
    if (!balances || !balances.result || !Array.isArray(balances.result.list)) {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç Bybit API: ${JSON.stringify(balances)}`);
    }

    const ethBalance = balances.result.list.find((b) => b.coin === 'ETH')?.free || '0';
    const usdtBalance = balances.result.list.find((b) => b.coin === 'USDT')?.free || '0';

    const portfolioData = { 
      ethBalance: parseFloat(ethBalance), 
      usdtBalance: parseFloat(usdtBalance) 
    };

    await logRouteData('portfolio', portfolioData);
    res.json(portfolioData);
  } catch (error) {
    await handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ä—Ç—Ñ–µ–ª—è', error);
  }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ ETH –≤ —Ä—É–±–ª—è—Ö
app.get('/portfolio/eth/rub', async (_req, res) => {
  try {
    const balances = await bybitClient.getWalletBalance({ accountType: "SPOT" });
    const ethBalance = balances.result.list.find((b) => b.coin === 'ETH').free;
    const usdToRub = await axios.get('https://api.exchangerate-api.com/v4/latest/USD');
    const ethRubBalance = parseFloat(ethBalance) * usdToRub.data.rates.RUB;
    await logRouteData('portfolio_eth_rub', { ethBalanceRub: ethRubBalance });
    res.json({ ethBalanceRub: ethRubBalance });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ ETH –≤ —Ä—É–±–ª—è—Ö', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ (—Ç–µ—Å—Ç–æ–≤—ã–π/—Ä–µ–∞–ª—å–Ω—ã–π)
app.post('/-mode', (req, res) => {
  const { mode } = req.body;
  if (mode === 'live' || mode === 'test') {
      currentTradingMode = mode;
      res.json({ success: true, message: `–†–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${mode}`, currentMode: mode });
  } else {
      res.status(400).json({ success: false, message: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
app.post('/add-signal', async (req, res) => {
  const signal = req.body;
  await logRouteData('add_signal_request', signal);
  signals.unshift(signal);
  await logRouteData('add_signal_response', { message: '–°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω', signal });
  res.json({ message: '–°–∏–≥–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω', signal });
  io.emit('signal', signal);

  const telegramMessage = `–ù–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª: ${signal.type}\n–î–µ—Ç–∞–ª–∏: ${JSON.stringify(signal.signalData, null, 2)}`;
  await sendTelegramMessage(telegramMessage);
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
app.get('/signals', async (_req, res) => {
  await logRouteData('get_signals', signals);
  res.json(signals);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫
app.delete('/trade-history', async (_req, res) => {
  try {
    await fs.writeJson(tradeHistoryPath, []);
    await logRouteData('delete_trade_history', { message: '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    res.json({ message: '–ò—Å—Ç–æ—Ä–∏—è —Å–¥–µ–ª–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–¥–µ–ª–æ–∫', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
app.post('/manage-positions', async (_req, res) => {
  try {
    const marketConditions = await analyzeMarketConditions();
    await manageOpenPositions(marketConditions);
    await logRouteData('manage_positions', { message: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
    res.json({ message: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏—è–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit
app.get('/check-connection', async (_req, res) => {
  try {
    const isConnected = await checkBybitConnection();
    await logRouteData('check_connection', { isConnected });
    res.json({ isConnected });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit', error);
  }
});

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏
function checkClientConnection(clientSocket) {
  if (!clientSocket || !clientSocket.connected) {
    return false; 
  }
  return true;
}

// –ù–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º
app.get('/client-connected', async (req, res) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∫–ª–∏–µ–Ω—Ç
    const isClientConnected = io.sockets.connected.size > 0; 

    if (isClientConnected) {
      await log('–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω', 'info', 'GET /client-connected');
      res.json({ isConnected: true }); 
    } else {
      await log('–ö–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω', 'info', 'GET /client-connected');
      res.json({ isConnected: false }); 
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º: ${error.message}`, 'error', 'GET /client-connected');
    res.status(500).json({ isConnected: false, error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è' }); 
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω—É–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
app.post('/reset-statistics', async (_req, res) => {
  try {
    testPortfolio.ETH = 0;
    testPortfolio.USDT = 10000;
    await fs.writeJson(testPortfolioPath, testPortfolio, { spaces: 2 });
    await fs.writeJson(tradeHistoryPath, []);
    await logRouteData('reset_statistics', { message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞', portfolio: testPortfolio });
    res.json({ message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω—É–ª–µ–Ω–∞', portfolio: testPortfolio });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω—É–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∑–∞ 24 —á–∞—Å–∞
app.get('/portfolio-stats-24h', async (_req, res) => {
  try {
    const stats = await getPortfolioStats24h();
    await logRouteData('portfolio_stats_24h', stats);
    res.json(stats);
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${error.message}`, 'error', 'GET /portfolio-stats-24h');
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
app.get('/neural-network/accuracy', async (_req, res) => {
  try {
    const testData = await fetchHistoricalDataForTraining('15m');
    const neuralNet = await loadLatestModel();
    if (!neuralNet) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    const accuracy = calculateAccuracy(neuralNet.model, testData);
    res.json({ accuracy: accuracy.toFixed(2) });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
app.post('/neural-network/train', async (_req, res) => {
  try {
    const newData = await fetchRecentData('15m');
    await incrementalTraining(newData);
    await logRouteData('neural_network_train', { message: '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
    res.json({ message: '–ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ' });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã
app.get('/predict/short-term/:timeframe', async (req, res) => {
  const { timeframe } = req.params;
  try {
    const prediction = await predictShortTermPriceMovement(timeframe);
    await logRouteData(`predict_short_term_${timeframe}`, prediction);
    res.json(prediction);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è —Ü–µ–Ω—ã', error);
  }
});

// –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
app.get('/settings/signal-sensitivity', (_req, res) => {
  res.json(signalSensitivity);
});



// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
app.post('/settings/signal-params', async (req, res) => {
  const newParams = req.body;
  await logRouteData('settings_signal_params_request', newParams);
  if (typeof newParams !== 'object') {
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤' });
  }
  
 // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
 Object.assign(signalParams, newParams);
  
 await logRouteData('settings_signal_params_response', { message: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', params: signalParams });
 res.json({ message: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã', params: signalParams });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤
app.get('/settings/signal-params', async (_req, res) => {
 await logRouteData('get_settings_signal_params', signalParams);
 res.json(signalParams);
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤
app.get('/logs/:type', async (req, res) => {
  const { type } = req.params;
  let logFile;

  switch (type) {
    case 'error':
      logFile = errorLogPath;
      break;
    case 'info':
      logFile = infoLogPath;
      break;
    case 'detail':
      logFile = detailLogPath;
      break;
    case 'performance':
      logFile = performanceLogPath;
      break;
    default:
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ª–æ–≥–∞' });
  }

  try {
    const logs = await fs.readFile(logFile, 'utf8');
    await logRouteData(`get_logs_${type}`, { logs: logs.split('\n') });
    res.json({ logs: logs.split('\n') });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤', error);
  }
});

app.get('/analyze-trades', async (req, res) => {
  const { startDate, endDate } = req.query;
  
  if (!startDate || !endDate) {
    return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å startDate –∏ endDate' });
  }

  try {
    const analysis = await analyzeTrades(startDate, endDate);
    res.json(analysis);
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'analyzeTradesRoute');
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å–¥–µ–ª–æ–∫' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π —Å –¥—Ä—É–≥–∏–º–∏ –∞–∫—Ç–∏–≤–∞–º–∏
app.get('/correlations', async (_req, res) => {
  try {
    const correlations = await analyzeCorrelations();
    await logRouteData('get_correlations', correlations);
    res.json(correlations);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π', error);
  }
});


// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
app.post('/adaptive-trade', async (_req, res) => {
  try {
    await adaptiveTrading();
    await logRouteData('adaptive_trade', { message: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' });
    res.json({ message: '–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞' });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
app.post('/optimize-strategy', async (_req, res) => {
  try {
    await optimizeStrategyParameters();
    await logRouteData('optimize_strategy', { message: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', params: signalParams });
    res.json({ message: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω—ã', params: signalParams });
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
app.get('/market-conditions', async (_req, res) => {
  try {
    const marketConditions = await analyzeMarketConditions();
    await logRouteData('market_conditions', marketConditions);
    res.json(marketConditions);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
app.get('/compare-prices', async (_req, res) => {
  try {
    const priceComparison = await comparePrices();
    await logRouteData('compare_prices', priceComparison);
    res.json(priceComparison);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω', error);
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
app.get('/news', async (_req, res) => {
  try {
    const newsAnalysis = await analyzeNews();
    await logRouteData('get_news', newsAnalysis);
    res.json(newsAnalysis);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π', error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å Bybit
async function checkAndSyncTime() {
  try {
    const localTime = Math.floor(Date.now() / 1000);
    const serverTime = await getBybitServerTime();
    const timeDiff = Math.abs(localTime - serverTime);
    
    await log(`üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –õ–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: ${localTime}, –°–µ—Ä–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: ${serverTime}`, 'info', 'checkAndSyncTime');
    
    if (timeDiff > 1) {  // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –±–æ–ª—å—à–µ 1 —Å–µ–∫—É–Ω–¥—ã
      await log(`‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏: ${timeDiff} —Å–µ–∫—É–Ω–¥. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...`, 'warn', 'checkAndSyncTime');
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      // –ù–∞–ø—Ä–∏–º–µ—Ä, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
      
      await log('üïí –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º Bybit', 'info', 'checkAndSyncTime');
    } else {
      await log('‚úÖ –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ', 'info', 'checkAndSyncTime');
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: ${error.message}`, 'error', 'checkAndSyncTime');
  }
}


// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(checkAndSyncTime, 60 * 60 * 1000);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async function handleError(res, message, error) {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ 'error' –æ–±—ä–µ–∫—Ç–æ–º –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω —Å–≤–æ–π—Å—Ç–≤–æ 'message'
  // –ï—Å–ª–∏ –¥–∞, —Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º 'error.message', –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
  const errorMessage = error && typeof error === 'object' && error.message ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'; 
  
  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ—É–Ω–∫—Ü–∏–∏, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–Ω–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
  await log(`${message}: ${errorMessage}`, 'error', 'handleError'); 

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –æ–±—ä–µ–∫—Ç–∞ –æ—à–∏–±–∫–∏ 'error' —Å–≤–æ–π—Å—Ç–≤–æ 'response' –∏ 'data'
  // –ï—Å–ª–∏ –¥–∞, —Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API
  if (error && error.response && error.response.data) {
    const errorData = error.response.data;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ API Bybit: 10002 –æ–∑–Ω–∞—á–∞–µ—Ç –æ—à–∏–±–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    if (errorData.retCode === 10002) {
      // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
      await log('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ —Å–µ—Ä–≤–µ—Ä–∞.', 'error', 'handleError');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API
    await log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API: ${JSON.stringify(errorData)}`, 'error', 'handleError'); 
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –∫–æ–¥–æ–º 500 (Internal Server Error) –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
  res.status(500).json({ error: `${message}: ${errorMessage}` });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π
async function analyzeMarketConditions() {
  try {
    await log('üîç –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π', 'info', 'analyzeMarketConditions');
    
    const recentData = await fetchRecentData('ETHUSDT', '1h', 100);
    if (!recentData || recentData.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ');
    }

    const volatility = calculateVolatility(recentData.map(d => d.close));
    const volume = average(recentData.map(d => d.volume));
    const trend = determineTrend(recentData.map(d => d.close));
    const sentiment = await analyzeSentiment();

    const conditions = {
      volatility,
      volume,
      trend,
      sentiment,
    };

    await log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π:
    üìà –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility.toFixed(4)}
    üìä –û–±—ä–µ–º: ${volume.toFixed(2)}
    üîÄ –¢—Ä–µ–Ω–¥: ${trend}
    üòä –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: ${sentiment.sentiment} (–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: ${sentiment.fearGreedIndex})`, 'info', 'analyzeMarketConditions');

    return conditions;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π: ${error.message}`, 'error', 'analyzeMarketConditions');
    return {
      volatility: 0,
      volume: 0,
      trend: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
      sentiment: { sentiment: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π', fearGreedIndex: 50 },
    };
  }
}


function calculateOrderSize(price, availableBalance) {
  const MIN_ORDER_SIZE = 0.00092; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –æ—Ä–¥–µ—Ä–∞
  const MAX_ORDER_VALUE = 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ä–¥–µ—Ä–∞ –≤ USD

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º 5% –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –≤–º–µ—Å—Ç–æ 1%
  const orderValue = Math.min(availableBalance * 0.05, MAX_ORDER_VALUE);

  return Math.max(orderValue / price, MIN_ORDER_SIZE);
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
function determineTrend(prices) {
  const sma20 = calculateSMA(prices, 20);
  const sma50 = calculateSMA(prices, 50);

  let trend;
  if (sma20 > sma50) {
    trend = '–í–æ—Å—Ö–æ–¥—è—â–∏–π';
  } else if (sma20 < sma50) {
    trend = '–ù–∏—Å—Ö–æ–¥—è—â–∏–π';
  } else {
    trend = '–ë–æ–∫–æ–≤–æ–π';
  }

  log(`üîÄ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞:
  üìà SMA20: ${sma20.toFixed(2)}
  üìâ SMA50: ${sma50.toFixed(2)}
  üîÄ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${trend}`, 'info', 'determineTrend');

  return trend;
}

// –§—É–Ω–∫—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
function dynamicRiskManagement(portfolio, marketConditions) {
  const { volatility, trend } = marketConditions;
  const basePositionSize = portfolio.RUB * 0.03;
  
  const adjustedPositionSize = basePositionSize * (1 + Math.abs(trend));
  const stopLossPercent = 1.5 + (volatility * 5);
  const takeProfitPercent = 3 + (volatility * 10);
  
  return {
    maxPositionSize: Math.min(adjustedPositionSize, portfolio.RUB * 0.15),
    stopLossPercent,
    takeProfitPercent
  };
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
async function periodicStrategyReassessment() {
  try {
    await log('–ù–∞—á–∞–ª–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'info', 'periodicStrategyReassessment');

    const recentTrades = await getRecentTrades(100);
    const winRate = calculateWinRate(recentTrades);
    const profitFactor = calculateProfitFactor(recentTrades);
    
    await log(`–¢–µ–∫—É—â–∏–π –≤–∏–Ω—Ä–µ–π—Ç: ${winRate.toFixed(2)}%, –ü—Ä–æ—Ñ–∏—Ç-—Ñ–∞–∫—Ç–æ—Ä: ${profitFactor.toFixed(2)}`, 'info', 'periodicStrategyReassessment');

    if (winRate < 40 || profitFactor < 1.2) {
      await log('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –Ω–∏–∑–∫–∞—è, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞', 'warn', 'periodicStrategyReassessment');
      await retrainNeuralNetwork();
      await optimizeStrategyParameters();
      
      // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –æ—Ä–¥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É
      await cancelAllOrders('ETHUSDT');
      await placeGridOrders('ETHUSDT');
      
      await log('–°—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∞, —Å–µ—Ç–∫–∞ –æ—Ä–¥–µ—Ä–æ–≤ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞', 'info', 'periodicStrategyReassessment');
    } else {
      await log('–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã', 'info', 'periodicStrategyReassessment');
    }

    await log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'info', 'periodicStrategyReassessment');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø–µ—Ä–µ–æ—Ü–µ–Ω–∫–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`, 'error', 'periodicStrategyReassessment');
    await handleApiError(error, 'periodicStrategyReassessment');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏
async function calculatePositionSize(symbol, risk, volatility) {
  try {
    await log(`üí∞ –ù–∞—á–∞–ª–æ —Ä–∞—Å—á–µ—Ç–∞ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –¥–ª—è ${symbol}`, 'info', 'calculatePositionSize');
    
    const availableBalance = await getAvailableBalance('ETH');
    await log(`üíº –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH: ${availableBalance.toString()}`, 'info', 'calculatePositionSize');

    const currentPrice = new Decimal(await getCachedPrice(symbol));
    await log(`üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ ${symbol}: ${currentPrice.toString()}`, 'info', 'calculatePositionSize');

    const usdToRubRate = new Decimal(await getCachedUsdRubRate());
    await log(`üí± –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å USD/RUB: ${usdToRubRate.toString()}`, 'info', 'calculatePositionSize');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º Decimal –¥–ª—è –≤—Å–µ—Ö —Ä–∞—Å—á–µ—Ç–æ–≤
    let positionSize = availableBalance.times(risk);
    await log(`üìä –ë–∞–∑–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∏—Å–∫–∞): ${positionSize.toString()}`, 'info', 'calculatePositionSize');

    const volatilityAdjustment = Decimal.max(new Decimal(0.5), new Decimal(1).minus(volatility));
    positionSize = positionSize.times(volatilityAdjustment);
    await log(`üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${positionSize.toString()}`, 'info', 'calculatePositionSize');

    const orderValueUSD = positionSize.times(currentPrice);
    if (orderValueUSD.lessThan(MIN_ORDER_VALUE_USD)) {
      positionSize = MIN_ORDER_VALUE_USD.dividedBy(currentPrice);
      await log(`‚ö†Ô∏è –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ —É–≤–µ–ª–∏—á–µ–Ω –¥–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ—Ä–¥–µ—Ä–∞: ${positionSize.toString()}`, 'info', 'calculatePositionSize');
    }

    positionSize = Decimal.min(positionSize, availableBalance.times(0.95)); // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–µ—Å—å –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å
    positionSize = Decimal.max(positionSize, MIN_POSITION_SIZE);

    // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 8 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
    positionSize = positionSize.toDecimalPlaces(8);

    const positionValueRUB = positionSize.times(currentPrice).times(usdToRubRate);
    await log(`üí∞ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${positionSize.toString()} ETH (${positionValueRUB.toFixed(2)} RUB)`, 'info', 'calculatePositionSize');
    return positionSize;


  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`, 'error', 'calculatePositionSize');
    return MIN_POSITION_SIZE; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
async function getCachedPrice(symbol, cacheDuration = 5000) {
  const now = Date.now();
  if (lastPrice && (now - lastPriceTime) < cacheDuration) {
    return lastPrice;
  }
  lastPrice = await getPrice(symbol);
  lastPriceTime = now;
  return lastPrice;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã ETHUSDT


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞ USD/RUB
async function getCachedUsdRubRate(maxAge = 60000) { // maxAge –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
  const now = Date.now();
  if (lastUsdRubRate && (now - lastUsdRubRateTime < maxAge)) {
    return lastUsdRubRate;
  }
  lastUsdRubRate = await getUsdToRubRate();
  lastUsdRubRateTime = now;
  return lastUsdRubRate;
}

// –í—ã–∑—ã–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
setInterval(periodicStrategyReassessment, 24 * 60 * 60 * 1000);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å —É—á–µ—Ç–æ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
const TRADE_COOLDOWN = 15 * 60 * 1000; // 15 –º–∏–Ω—É—Ç –º–µ–∂–¥—É —Å–¥–µ–ª–∫–∞–º–∏
let lastTradeTime = 0;
let isTradingActive = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π —Å–¥–µ–ª–∫–∏

async function executeTradewithRiskManagement(analysisResult, marketConditions, riskParams) {
  const startTime = Date.now();

  try {
    await log(`‚û°Ô∏è –ù–∞—á–∞–ª–æ executeTradewithRiskManagement üìà`, 'info', 'executeTradewithRiskManagement');
    await log(`‚û°Ô∏è –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: analysisResult=${JSON.stringify(analysisResult)}, 
    marketConditions=${JSON.stringify(marketConditions)}, 
    riskParams=${JSON.stringify(riskParams)}`, 'debug', 'executeTradewithRiskManagement');

    const signal = analysisResult.signal;
    const signalStrength = new Decimal(analysisResult.signalStrength);

    if (isTradingActive) {
      await log(`‚è≥ –°–¥–µ–ª–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é.`, 'info', 'executeTradewithRiskManagement');
      return null;
    }

    const now = Date.now();
    if (now - lastTradeTime < TRADE_COOLDOWN) {
      const remainingTime = TRADE_COOLDOWN - (now - lastTradeTime);
      await log(`‚è≥ –°–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ –¥–ª—è –Ω–æ–≤–æ–π —Å–¥–µ–ª–∫–∏. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ ${Math.floor(remainingTime/1000)} —Å–µ–∫—É–Ω–¥.`, 'info', 'executeTradewithRiskManagement');
      return null;
    }

    const symbol = 'ETHUSDT';
    await log(`üöÄ –ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –°–∏–º–≤–æ–ª: ${symbol}, –°–∏–≥–Ω–∞–ª: ${signal}, –°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${signalStrength}`, 'info', 'executeTradewithRiskManagement');

    if (!analysisResult || typeof analysisResult.currentPrice !== 'number' || isNaN(analysisResult.currentPrice)) {
      await log(`‚ùå –û—à–∏–±–∫–∞: analysisResult –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É: ${JSON.stringify(analysisResult)}`, 'error', 'executeTradewithRiskManagement');
      return null;
    }

    const currentPrice = new Decimal(analysisResult.currentPrice);
    const positionSize = await calculatePositionSize(symbol, riskParams.risk, marketConditions.volatility);

    if (positionSize.isNaN() || positionSize.isZero()) {
      await log(`‚ùå –û—à–∏–±–∫–∞: –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω (${positionSize}). –°–¥–µ–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.`, 'error', 'executeTradewithRiskManagement');
      return null;
    }
    
    const stopLossPrice = signal === 'buy'
        ? currentPrice.times(new Decimal(1).minus(riskParams.stopLossPercent))
        : currentPrice.times(new Decimal(1).plus(riskParams.stopLossPercent));
  
    const takeProfitPrice = signal === 'buy'
        ? currentPrice.times(new Decimal(1).plus(riskParams.takeProfitPercent))
        : currentPrice.times(new Decimal(1).minus(riskParams.takeProfitPercent));

    await log(`üìä –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:
    üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: ${positionSize} ETH
    üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice}
    üõë –°—Ç–æ–ø-–ª–æ—Å—Å: ${stopLossPrice}
    üéØ –¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç: ${takeProfitPrice}`, 'info', 'executeTradewithRiskManagement');

    const initialBalance = await getAvailableBalance('ETH');
    await log(`üíº –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance} ETH`, 'info', 'executeTradewithRiskManagement');

    if (signal === 'sell') {
      const availableBalanceETH = await getAvailableBalance('ETH');
      if (availableBalanceETH.lessThan(positionSize)) {
        await log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ETH –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏. –î–æ—Å—Ç—É–ø–Ω–æ: ${availableBalanceETH}, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ: ${positionSize}`, 'error', 'executeTradewithRiskManagement');
        return null;
      }
    }

    const order = await placeOrder(symbol, signal, positionSize, currentPrice, analysisResult);

    if (order) {
      await saveSignal({ symbol, type: signal, time: new Date(), data: order });//<-- –î–æ–±–∞–≤–ª–µ–Ω–æ
      isTradingActive = true;
      lastTradeTime = now;
      await log(`‚úÖ –û—Ä–¥–µ—Ä —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º–µ—â–µ–Ω: ${JSON.stringify(order)}`, 'info', 'executeTradewithRiskManagement');

      await placeStopLossOrder(symbol, signal === 'buy' ? 'sell' : 'buy', stopLossPrice, positionSize);
      await placeTakeProfitOrder(symbol, signal === 'buy' ? 'sell' : 'buy', takeProfitPrice, positionSize);

      await log(`üîí –°—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç –æ—Ä–¥–µ—Ä–∞ —Ä–∞–∑–º–µ—â–µ–Ω—ã`, 'info', 'executeTradewithRiskManagement');

      const adaptiveHoldTime = calculateAdaptiveHoldTime(marketConditions, signal);
      await log(`‚è±Ô∏è –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: ${adaptiveHoldTime} –º—Å`, 'info', 'executeTradewithRiskManagement');

      setTimeout(async () => {
        try {
          const result = await checkAndClosePosition(symbol, order, stopLossPrice, takeProfitPrice);

          if (result && result.closedOrder) {
            const finalBalance = await getAvailableBalance('ETH');
            const profit = finalBalance.minus(initialBalance);

            await log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏:
            üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${initialBalance} ETH
            üí∞ –ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance} ETH
            üíπ –ü—Ä–∏–±—ã–ª—å/–£–±—ã—Ç–æ–∫: ${profit} ETH (${profit.dividedBy(initialBalance).times(100).toFixed(2)}%)
            üîÑ –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç–∞`, 'info', 'executeTradewithRiskManagement');

          } else {
            await log(`üìä –ü–æ–∑–∏—Ü–∏—è –Ω–µ –±—ã–ª–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è`, 'info', 'executeTradewithRiskManagement');
          }

          isTradingActive = false;

        } catch (closeError) {
          await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø–æ–∑–∏—Ü–∏–∏: ${closeError.message}`, 'error', 'executeTradewithRiskManagement');
          isTradingActive = false;
        }
      }, adaptiveHoldTime);

      monitorTrailingStop(symbol, order, stopLossPrice, marketConditions.volatility);

      return order;
    } else {
      await log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –æ—Ä–¥–µ—Ä`, 'error', 'executeTradewithRiskManagement');
      return null;
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ executeTradewithRiskManagement: ${error.message}`, 'error', 'executeTradewithRiskManagement');
    isTradingActive = false;
    return null;
  } finally {
    const executionTime = Date.now() - startTime;
    await log(`‚¨ÖÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ executeTradewithRiskManagement üìà. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} –º—Å`, 'info', 'executeTradewithRiskManagement');
  }
}

// –§—É–Ω–∫—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
async function adaptiveTrading(symbol) {
  try {
    await log(`–ù–∞—á–∞–ª–æ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ –¥–ª—è ${symbol}`, 'info', 'adaptiveTrading');

    const analysisResult = await analyzeDataWithNN(symbol);
    
    if (analysisResult.signal !== 'hold' && analysisResult.signalStrength >= signalParams.minSignalStrength) {
      const order = await executeTrade(symbol, analysisResult);
      
      if (order) {
        await log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞: ${JSON.stringify(order)}`, 'info', 'adaptiveTrading');
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫
        await updateTradingStatistics(order);
        await updateStrategyMetrics();

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
        const message = `–í—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–¥–µ–ª–∫–∞:\n–°–∏–º–≤–æ–ª: ${symbol}\n–¢–∏–ø: ${analysisResult.signal}\n–¶–µ–Ω–∞: ${order.price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${order.qty}\n–°–∏–ª–∞ —Å–∏–≥–Ω–∞–ª–∞: ${analysisResult.signalStrength}`;
        await sendTelegramMessage(message);
      }
    } else {
      await log(`–ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏. –°–∏–≥–Ω–∞–ª: ${analysisResult.signal}, –°–∏–ª–∞: ${analysisResult.signalStrength}`, 'info', 'adaptiveTrading');
    }

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
    await manageOpenPositions(symbol);

    await log('–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info', 'adaptiveTrading');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ: ${error.message}`, 'error', 'adaptiveTrading');
    await handleApiError(error, 'adaptiveTrading');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö —É—Å–ª–æ–≤–∏–π

function calculateVolatility(prices) {
  const returns = prices.slice(1).map((price, index) => (price - prices[index]) / prices[index]);
  return Math.sqrt(returns.reduce((sum, ret) => sum + Math.pow(ret, 2), 0) / returns.length) * Math.sqrt(252);
}


// üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è getRecentTrades —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º –ø—Ä–æ–º–∏—Å–∞
async function getRecentTrades(symbol = 'ETHUSDT', limit = 50) {
  const startTime = Date.now();
  await log(`üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫ –¥–ª—è ${symbol}. –õ–∏–º–∏—Ç: ${limit}`, 'info', 'getRecentTrades');

  try {
    if (typeof symbol !== 'string' || symbol.trim() === '') {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª');
    }
    if (!Number.isInteger(limit) || limit <= 0) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ª–∏–º–∏—Ç');
    }

    const cachedTrades = await getCachedTrades(symbol);
    if (cachedTrades.length > 0) {
      await log(`üéâ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: ${cachedTrades.length}`, 'info', 'getRecentTrades');
      return cachedTrades.slice(0, limit);
    }

    await log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Bybit`, 'debug', 'getRecentTrades');
    const response = await bybitClient.getPublicTradingHistory({
      category: 'spot',
      symbol: symbol,
      limit: limit
    });

   // await log(`üìä –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API. –°—Ç–∞—Ç—É—Å: ${response.retCode}`, 'debug', 'getRecentTrades');

    if (!response || response.retCode !== 0) {
      throw new Error(`–û—à–∏–±–∫–∞ API Bybit: ${response.retMsg || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
    }

    if (!response.result || !Array.isArray(response.result.list)) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Bybit');
    }

    const trades = await response.result.list.reduce(async (validTrades, trade) => {
      try {
        if (!trade.execTime) {
          await log(`‚ÑπÔ∏è –°–¥–µ–ª–∫–∞ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${JSON.stringify(trade)}`, 'info', 'getRecentTrades');
          return validTrades;
        }

        const execTime = parseInt(trade.execTime);
        if (isNaN(execTime)) {
          await log(`‚ÑπÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è: ${trade.execTime}`, 'info', 'getRecentTrades');
          return validTrades;
        }

        (await validTrades).push({ // üêõ –î–æ–±–∞–≤–ª–µ–Ω await –ø–µ—Ä–µ–¥ validTrades
          id: trade.execId,
          time: new Date(execTime).toISOString(),
          side: trade.side,
          price: parseFloat(trade.execPrice) || 0,
          quantity: parseFloat(trade.execQty) || 0,
          fee: parseFloat(trade.execFee) || 0,
          feeAsset: trade.feeCurrency,
          value: parseFloat(trade.execValue) || 0
        });

        return validTrades;
      } catch (error) {
        await log(`‚ÑπÔ∏è –ü—Ä–æ–ø—É—â–µ–Ω–∞ —Å–¥–µ–ª–∫–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${error.message}`, 'info', 'getRecentTrades');
        return validTrades;
      }
    }, Promise.resolve([])); // üêõ –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–æ–º–∏—Å–∞ –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    await log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${trades.length} —Å–¥–µ–ª–æ–∫`, 'info', 'getRecentTrades');

    trades.sort((a, b) => new Date(b.time) - new Date(a.time)); // üêõ –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–º–∏—Å–∞

    await saveTradesToCache(symbol, trades);
    await log(`üíæ –°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à`, 'info', 'getRecentTrades');

    const executionTime = Date.now() - startTime;
    await log(`üèÅ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${executionTime}–º—Å`, 'info', 'getRecentTrades');

    return trades;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'getRecentTrades');

    if (error.response) {
      await log(`üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ API: ${JSON.stringify(error.response.data)}`, 'error', 'getRecentTrades');
    }

    return [];
  } finally {
    const totalExecutionTime = Date.now() - startTime;
    await log(`‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${totalExecutionTime}–º—Å`, 'info', 'getRecentTrades');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –∫—ç—à–∞
function generateCacheFileName(symbol) {
  return `trades_cache_${symbol.toLowerCase()}.json`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
async function getCachedTrades(symbol) {
  const cacheFileName = generateCacheFileName(symbol);
  const cachePath = path.join(__dirname, 'cache', cacheFileName);

  try {
      if (await fs.pathExists(cachePath)) {
          const cacheData = await fs.readJson(cachePath);
          const cacheAge = Date.now() - cacheData.timestamp;
          if (cacheAge < 5 * 60 * 1000) { // –ö—ç—à –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç
              return cacheData.trades;
          }
      }
  } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${error.message}`, 'error', 'getCachedTrades');
  }
  return [];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫ –≤ –∫—ç—à
async function saveTradesToCache(symbol, trades) {
  const cacheFileName = generateCacheFileName(symbol);
  const cachePath = path.join(__dirname, 'cache', cacheFileName);

  try {
      await fs.ensureDir(path.dirname(cachePath));
      await fs.writeJson(cachePath, { 
          timestamp: Date.now(),
          trades: trades
      });
      await log(`–°–¥–µ–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à –¥–ª—è ${symbol}`, 'info', 'saveTradesToCache');
  } catch (error) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–¥–µ–ª–æ–∫ –≤ –∫—ç—à: ${error.message}`, 'error', 'saveTradesToCache');
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
async function checkApiConnection() {
  try {
    await log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API', 'info', 'checkApiConnection');
    
    const serverTime = await bybitClient.getServerTime();
    
    if (serverTime.retCode !== 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞');
    }

    await log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å API —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info', 'checkApiConnection');
    return true;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API: ${error.message}`, 'error', 'checkApiConnection');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
async function checkDatabaseConnection() {
  try {
    await log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö', 'info', 'checkDatabaseConnection');
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –≤–∞—à–µ–π –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è MongoDB —ç—Ç–æ –º–æ–∂–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–∞–∫:
    // await mongoose.connection.db.admin().ping();

    await log('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info', 'checkDatabaseConnection');
    return true;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error', 'checkDatabaseConnection');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞
async function checkSufficientBalance() {
  try {
    await log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞', 'info', 'checkSufficientBalance');
    
    const balance = await bybitClient.getWalletBalance({ accountType: "SPOT" });
    
    if (!balance.result || !balance.result.list) {
      throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Bybit');
    }

    const usdtBalance = balance.result.list.find(b => b.coin === 'USDT')?.free || '0';
    
    if (parseFloat(usdtBalance) < 10) { // –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã 10 USDT
      throw new Error('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏');
    }

    await log(`–ë–∞–ª–∞–Ω—Å –¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏: ${usdtBalance} USDT`, 'info', 'checkSufficientBalance');
    return true;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–∞: ${error.message}`, 'error', 'checkSufficientBalance');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function checkMarketDataAvailability() {
  try {
    await log('–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö', 'info', 'checkMarketDataAvailability');
    
    const klineData = await bybitClient.getKline({ category: 'spot', symbol: 'ETHUSDT', interval: '1', limit: 1 });
    
    if (!klineData.result || !klineData.result.list || klineData.result.list.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
    }

    await log('–†—ã–Ω–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã', 'info', 'checkMarketDataAvailability');
    return true;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: ${error.message}`, 'error', 'checkMarketDataAvailability');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
async function closeAllConnections() {
  try {
    await log('–ù–∞—á–∞–ª–æ –∑–∞–∫—Ä—ã—Ç–∏—è –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π', 'info', 'closeAllConnections');
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –≤–∞—à–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
    // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB:
    // await mongoose.connection.close();

    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit API (–µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ)
    // bybitClient.close(); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –º–µ—Ç–æ–¥, –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

    await log('–í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç—ã', 'info', 'closeAllConnections');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: ${error.message}`, 'error', 'closeAllConnections');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
async function fetchHistoricalData(symbol, interval, limit, startDate = null, endDate = null) {
  const startTime = Date.now();
  try {
    await log(`üöÄ –ù–∞—á–∞–ª–æ fetchHistoricalData: symbol=${symbol}, interval=${interval}, limit=${limit}, startDate=${startDate || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}, endDate=${endDate || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, 'info', 'fetchHistoricalData');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'fetchHistoricalData');

    const bybitInterval = convertIntervalToBybitFormat(interval);
    await log(`üîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è Bybit: ${bybitInterval}`, 'debug', 'fetchHistoricalData');

    let allHistoricalData = [];
    let currentLimit = limit;
    let fromTime = startDate ? new Date(startDate).getTime() : undefined;
    let toTime = endDate ? new Date(endDate).getTime() : undefined;

    await log(`üï∞Ô∏è –ù–∞—á–∞–ª—å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: fromTime=${fromTime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}, toTime=${toTime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, 'debug', 'fetchHistoricalData');

    let iterationCount = 0;
    while (currentLimit > 0) {
      iterationCount++;
      await log(`üîÅ –ù–∞—á–∞–ª–æ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iterationCount}`, 'debug', 'fetchHistoricalData');

      try {
        const requestLimit = Math.min(currentLimit, 200);
        await log(`üìä –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö: limit=${requestLimit}, fromTime=${fromTime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}, toTime=${toTime || '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}`, 'debug', 'fetchHistoricalData');

        const requestStartTime = Date.now();
        const response = await bybitClient.getKline({
          category: 'spot',
          symbol: symbol,
          interval: bybitInterval,
          limit: requestLimit,
          start: fromTime,
          end: toTime
        });
        const requestDuration = Date.now() - requestStartTime;
        await log(`‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –∫ API: ${requestDuration}ms`, 'debug', 'fetchHistoricalData');

        // await log(`üì• –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API: ${JSON.stringify(response)}`, 'detail', 'fetchHistoricalData');

        if (response.retCode !== 0) {
          throw new Error(`–û—à–∏–±–∫–∞ Bybit API (retCode: ${response.retCode}): ${response.retMsg}`);
        }

        if (!response.result || !Array.isArray(response.result.list)) {
          throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API Bybit: ${JSON.stringify(response)}`);
        }

        const historicalData = response.result.list.map(item => ({
          time: parseInt(item[0]),
          open: parseFloat(item[1]),
          high: parseFloat(item[2]),
          low: parseFloat(item[3]),
          close: parseFloat(item[4]),
          volume: parseFloat(item[5])
        }));

        await log(`üìà –ü–æ–ª—É—á–µ–Ω–æ ${historicalData.length} —Å–≤–µ—á–µ–π`, 'info', 'fetchHistoricalData');
        await log(`üîç –ü—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–π —Å–≤–µ—á–∏: ${JSON.stringify(historicalData[0])}`, 'debug', 'fetchHistoricalData');

        allHistoricalData = allHistoricalData.concat(historicalData);
        currentLimit -= historicalData.length;

        if (historicalData.length > 0) {
          fromTime = historicalData[historicalData.length - 1].time + 1;
          await log(`‚è≠Ô∏è –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ fromTime: ${fromTime}`, 'debug', 'fetchHistoricalData');
        } else {
          await log('‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ü–∏–∫–ª–∞', 'warn', 'fetchHistoricalData');
          break;
        }

        await log(`üìä –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å: –ø–æ–ª—É—á–µ–Ω–æ ${allHistoricalData.length}, –æ—Å—Ç–∞–ª–æ—Å—å ${currentLimit}`, 'info', 'fetchHistoricalData');
        
        await log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º (1 —Å–µ–∫—É–Ω–¥–∞)', 'debug', 'fetchHistoricalData');
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      } catch (error) {
        await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...`, 'error', 'fetchHistoricalData');
        await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'fetchHistoricalData');
        await log('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º (5 —Å–µ–∫—É–Ω–¥)', 'debug', 'fetchHistoricalData');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }

      // await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ ${iterationCount}: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'fetchHistoricalData');
    }

    await log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–æ ${allHistoricalData.length} –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö`, 'info', 'fetchHistoricalData');
    await log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: –æ—Ç ${new Date(allHistoricalData[0].time)} –¥–æ ${new Date(allHistoricalData[allHistoricalData.length - 1].time)}`, 'info', 'fetchHistoricalData');
    
    const executionTime = Date.now() - startTime;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è fetchHistoricalData: ${executionTime}ms`, 'info', 'fetchHistoricalData');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'fetchHistoricalData');

    return allHistoricalData;

  } catch (error) {
    const executionTime = Date.now() - startTime;
    await log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ fetchHistoricalData: ${error.message}. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms`, 'error', 'fetchHistoricalData');
    await log(`üîç –°—Ç–µ–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'fetchHistoricalData');
   // await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'fetchHistoricalData');
    throw error;
  }
}

// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –¥–ª—è Bybit
function convertIntervalToBybitFormat(interval) {
  const intervalMap = {
    '1m': '1',
    '3m': '3',
    '5m': '5',
    '15m': '15',
    '30m': '30',
    '1h': '60',
    '2h': '120',
    '4h': '240',
    '6h': '360',
    '12h': '720',
    '1d': 'D',
    '1w': 'W',
    '1M': 'M'
  };
  return intervalMap[interval] || '15'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º 15-–º–∏–Ω—É—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
}
 
 /**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.
 * @returns {Promise<void>}
 */
 async function updateStrategyMetrics() {
  const startTime = Date.now();
  try {
    await log('üìä –ù–∞—á–∞–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏', 'info', 'updateStrategyMetrics');
    await log(`üíæ –ù–∞—á–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'updateStrategyMetrics');

    await log('üíº –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', 'debug', 'updateStrategyMetrics');
    const currentPortfolioValue = await getPortfolioValue();
    await log(`üí∞ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${currentPortfolioValue}`, 'info', 'updateStrategyMetrics');

    await log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫', 'debug', 'updateStrategyMetrics');
    const trades = await getRecentTrades();
    await log(`üìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–¥–µ–ª–æ–∫: ${trades.length}`, 'info', 'updateStrategyMetrics');

    await log('üßÆ –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –ø–æ–±–µ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫', 'debug', 'updateStrategyMetrics');
    const winRate = calculateWinRate(trades);
    await log(`üèÜ –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å –ø–æ–±–µ–¥–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: ${winRate}`, 'info', 'updateStrategyMetrics');

    await log('üßÆ –†–∞—Å—á–µ—Ç —Ñ–∞–∫—Ç–æ—Ä–∞ –ø—Ä–∏–±—ã–ª–∏', 'debug', 'updateStrategyMetrics');
    const profitFactor = calculateProfitFactor(trades);
    await log(`üíπ –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏: ${profitFactor}`, 'info', 'updateStrategyMetrics');

    await log('üßÆ –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞', 'debug', 'updateStrategyMetrics');
    const sharpeRatio = calculateSharpeRatio(trades);
    await log(`üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –®–∞—Ä–ø–∞: ${sharpeRatio}`, 'info', 'updateStrategyMetrics');

    const metrics = {
      portfolioValue: currentPortfolioValue,
      winRate: winRate,
      profitFactor: profitFactor,
      sharpeRatio: sharpeRatio
    };

    await log(`üìä –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${JSON.stringify(metrics)}`, 'info', 'updateStrategyMetrics');
    
    await log('üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö', 'debug', 'updateStrategyMetrics');
    await saveMetrics(metrics);
    await log('‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'info', 'updateStrategyMetrics');

    const executionTime = Date.now() - startTime;
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è updateStrategyMetrics: ${executionTime}ms`, 'info', 'updateStrategyMetrics');
    await log(`üíæ –ö–æ–Ω–µ—á–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'updateStrategyMetrics');
  } catch (error) {
    const executionTime = Date.now() - startTime;
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏: ${error.message}`, 'error', 'updateStrategyMetrics');
    await log(`üîç –°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${error.stack}`, 'debug', 'updateStrategyMetrics');
    await log(`‚è±Ô∏è –í—Ä–µ–º—è –¥–æ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏: ${executionTime}ms`, 'error', 'updateStrategyMetrics');
    await log(`üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ: ${JSON.stringify(process.memoryUsage())}`, 'debug', 'updateStrategyMetrics');
  }
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
 * @param {Array} trades - –ú–∞—Å—Å–∏–≤ —Å–¥–µ–ª–æ–∫.
 * @returns {number} –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫.
 */
function calculateWinRate(trades) {
  if (trades.length === 0) return 0;

  const winningTrades = trades.filter(trade => trade.profit > 0);
  return (winningTrades.length / trades.length) * 100;
}

/**
 * –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏ (–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –æ–±—â–µ–π –ø—Ä–∏–±—ã–ª–∏ –∫ –æ–±—â–µ–º—É —É–±—ã—Ç–∫—É).
 * @param {Array} trades - –ú–∞—Å—Å–∏–≤ —Å–¥–µ–ª–æ–∫.
 * @returns {number} –§–∞–∫—Ç–æ—Ä –ø—Ä–∏–±—ã–ª–∏.
 */
function calculateProfitFactor(trades) {
  const profits = trades.filter(trade => trade.profit > 0).reduce((sum, trade) => sum + trade.profit, 0);
  const losses = trades.filter(trade => trade.profit < 0).reduce((sum, trade) => sum + Math.abs(trade.profit), 0);

  if (losses === 0) return profits > 0 ? Infinity : 0;
  return profits / losses;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –®–∞—Ä–ø–∞
function calculateSharpeRatio(trades) {
  const returns = trades.map(trade => trade.profitLoss / trade.investment);
  const averageReturn = returns.reduce((sum, ret) => sum + ret, 0) / returns.length;
  const riskFreeRate = 0.02 / 252; // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –≥–æ–¥–æ–≤—É—é –±–µ–∑—Ä–∏—Å–∫–æ–≤—É—é —Å—Ç–∞–≤–∫—É 2% –∏ 252 —Ç–æ—Ä–≥–æ–≤—ã—Ö –¥–Ω—è
  const stdDev = Math.sqrt(returns.reduce((sum, ret) => sum + Math.pow(ret - averageReturn, 2), 0) / returns.length);

  return (averageReturn - riskFreeRate) / stdDev * Math.sqrt(252);
}

// –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
const METRICS_DIR = path.join(__dirname, 'metrics');
const METRICS_FILE = path.join(METRICS_DIR, 'trading_metrics.json');

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤ JSON —Ñ–∞–π–ª.
 * @param {Object} metrics - –û–±—ä–µ–∫—Ç —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏.
 * @returns {Promise<void>}
 */
async function saveMetrics(metrics) {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –º–µ—Ç—Ä–∏–∫, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    await fs.mkdir(METRICS_DIR, { recursive: true });

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫ –º–µ—Ç—Ä–∏–∫–∞–º
    const metricsWithTimestamp = {
      ...metrics,
      timestamp: new Date().toISOString()
    };

    // –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    let allMetrics = [];
    try {
      const data = await fs.readFile(METRICS_FILE, 'utf8');
      allMetrics = JSON.parse(data);
    } catch (error) {
      // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—É—Å—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      if (error.code !== 'ENOENT') {
        throw error;
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    allMetrics.push(metricsWithTimestamp);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ö—Ä–∞–Ω–∏–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000)
    const MAX_METRICS = 1000;
    if (allMetrics.length > MAX_METRICS) {
      allMetrics = allMetrics.slice(-MAX_METRICS);
    }

    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤ —Ñ–∞–π–ª
    await fs.writeFile(METRICS_FILE, JSON.stringify(allMetrics, null, 2));

    await log(`–ú–µ—Ç—Ä–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: ${JSON.stringify(metricsWithTimestamp)}`, 'info', 'saveMetrics');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–µ—Ç—Ä–∏–∫: ${error.message}`, 'error', 'saveMetrics');
    throw error;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞.
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏.
 */
async function getLatestMetrics() {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    try {
      await fs.access(METRICS_FILE);
    } catch (error) {
      if (error.code === 'ENOENT') {
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç
        return {};
      }
      throw error;
    }

    // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    const data = await fs.readFile(METRICS_FILE, 'utf8');
    const allMetrics = JSON.parse(data);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    const latestMetrics = allMetrics[allMetrics.length - 1] || {};

    await log(`–ü–æ–ª—É—á–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏: ${JSON.stringify(latestMetrics)}`, 'info', 'getLatestMetrics');
    return latestMetrics;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–µ—Ç—Ä–∏–∫: ${error.message}`, 'error', 'getLatestMetrics');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π
async function getOpenPositions(symbol, maxRetries = 3, retryDelay = 1000) {
  const startTime = Date.now();
  try {
    await log(`üöÄ –ù–∞—á–∞–ª–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è ${symbol} üíº`, 'info', 'getOpenPositions');

    if (!symbol) {
      throw new Error('‚ùå –°–∏–º–≤–æ–ª –Ω–µ —É–∫–∞–∑–∞–Ω');
    }

    let openPositions = [];

    for (let attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∏–∑ ${maxRetries}`, 'info', 'getOpenPositions');
        await syncTimeWithBybit();


        if (currentTradingMode === 'test') {
          // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ testPortfolio
          const balance = await getVirtualBalance();

          if(balance.ETH > 0) {
            openPositions.push({
              symbol: symbol,
              side: 'Buy',
              size: balance.ETH,
              entryPrice: lastPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É –∫–∞–∫ —Ü–µ–Ω—É –≤—Ö–æ–¥–∞
              // ... –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏
            });
          }

          await log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –û—Ç–∫—Ä—ã—Ç—ã–µ –ø–æ–∑–∏—Ü–∏–∏: ${JSON.stringify(openPositions, null, 2)}`, 'info', 'getOpenPositions');
          return openPositions;


        } else {
          // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Bybit API
          const positions = await bybitClient.getPosition({
            category: 'spot',
            symbol: symbol
          });

          if (!positions || positions.retCode !== 0) {
            const errorMsg = `–û—à–∏–±–∫–∞ Bybit API (–∫–æ–¥ ${positions?.retCode}): ${positions?.retMsg}`;
            await log(`‚ùå ${errorMsg}`, 'error', 'getOpenPositions');
            throw new Error(errorMsg);
          }

          if (!positions.result || !positions.result.list) {
            throw new Error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API');
          }

          openPositions = positions.result.list.filter(position => parseFloat(position.size) > 0).map(position => ({
            symbol: position.symbol,
            side: position.side,
            size: parseFloat(position.size),
            entryPrice: parseFloat(position.entryPrice),
            // ... –¥—Ä—É–≥–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∑–∏—Ü–∏–∏
          }));


          await log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${openPositions.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –¥–ª—è ${symbol} üíº`, 'info', 'getOpenPositions');
          return openPositions;
        }



      } catch (error) {
        if (attempt < maxRetries) {
          await log(`‚ùå –ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}. ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${retryDelay} –º—Å`, 'warn', 'getOpenPositions');
          await new Promise(resolve => setTimeout(resolve, retryDelay));
        } else {
          await log(`‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π: ${error.message}`, 'error', 'getOpenPositions');
          throw error; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        }
      }
    }
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –ø–æ–∑–∏—Ü–∏–π: ${error.message}`, 'error', 'getOpenPositions');
    return []; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
  } finally {
    const executionTime = Date.now() - startTime;
    await log(`üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ getOpenPositions. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} –º—Å`, 'info', 'getOpenPositions');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏
async function manageOpenPositions(symbol) {
  try {
    await log(`–ù–∞—á–∞–ª–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –¥–ª—è ${symbol}`, 'info', 'manageOpenPositions');

    const openPositions = await getOpenPositions(symbol);

    for (const position of openPositions) {
      const currentPrice = await getPrice(symbol);
      const analysisResult = await analyzeDataWithNN(symbol);

      if (position.side === 'BUY' && analysisResult.signal === 'sell') {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–ª–∏–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
        await closePosition(symbol, position, currentPrice);
      } else if (position.side === 'SELL' && analysisResult.signal === 'buy') {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é –ø–æ–∑–∏—Ü–∏—é
        await closePosition(symbol, position, currentPrice);
      } else {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ø-–ª–æ—Å—Å –∏ —Ç–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç
        const newStopLoss = calculateStopLoss(currentPrice, analysisResult.risk, position.side.toLowerCase());
        const newTakeProfit = calculateTakeProfit(currentPrice, analysisResult.risk, position.side.toLowerCase());
        
        await updatePositionLevels(symbol, position, newStopLoss, newTakeProfit);
      }
    }

    await log('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', 'info', 'manageOpenPositions');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –ø–æ–∑–∏—Ü–∏—è–º–∏: ${error.message}`, 'error', 'manageOpenPositions');
    await handleApiError(error, 'manageOpenPositions');
  }
}
// –†–∞—Å—á–µ—Ç —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
function calculateTrailingStop(currentPrice, risk, signal) {
  const trailingPercentage = risk.times(2); // –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–≤–æ–π–Ω–æ–π —Ä–∏—Å–∫ –¥–ª—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞
  return signal === 'buy' 
    ? currentPrice.times(new Decimal(1).minus(trailingPercentage))
    : currentPrice.times(new Decimal(1).plus(trailingPercentage));
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ 
async function monitorTrailingStop(symbol, order, initialTrailingStop, volatility) {
  const startTime = Date.now(); // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏

  await log(`‚û°Ô∏è –ù–∞—á–∞–ª–æ monitorTrailingStop üìà`, 'info', 'monitorTrailingStop');
  await log(
    `‚û°Ô∏è –í—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: symbol=${symbol}, order=${JSON.stringify(
      order
    )}, initialTrailingStop=${initialTrailingStop}, volatility=${volatility}`,
    'debug',
    'monitorTrailingStop'
  );

  let currentTrailingStop = initialTrailingStop;
  const checkInterval = 60000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

  const monitoringFunction = async () => {
    try {
      const currentPrice = await getPrice(symbol); // –¶–µ–Ω–∞ ETH –≤ USDT
      const usdToRubRate = await getUsdToRubRate(); // –ö—É—Ä—Å USD/RUB

      await log(
        `üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è ${symbol}`,
        'info',
        'monitorTrailingStop'
      );
      await log(
        `üíπ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${currentPrice} USD (${(
          currentPrice * usdToRubRate
        ).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ —Ü–µ–Ω—ã –≤ USD –∏ RUB
        'info',
        'monitorTrailingStop'
      );
      await log(
        `üõë –¢–µ–∫—É—â–∏–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø: ${currentTrailingStop} USD (${(
          currentTrailingStop * usdToRubRate
        ).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –≤ USD –∏ RUB
        'info',
        'monitorTrailingStop'
      );

      // üí∞ –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH (–æ–¥–∏–Ω —Ä–∞–∑ –∑–∞ —Ü–∏–∫–ª)
      const availableBalanceETH = await getAvailableBalance('ETH');
      await log(
        `üí∞ –î–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å ETH: ${availableBalanceETH} üí∞`,
        'info',
        'monitorTrailingStop'
      );

      // üßÆ –†–∞—Å—á–µ—Ç —Ä–∏—Å–∫–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏
      let risk;
      let currentPositionSize; // –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–¥–µ—Å—å
      if (order.side === 'BUY') {
        await log(`üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è BUY...`, 'debug', 'monitorTrailingStop');
        if (
          currentPrice >
          currentTrailingStop * (1 + signalParams.trailingStopUpdateThreshold)
        ) {
          // ‚úÖ  –†–∞—Å—á–µ—Ç risk —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ if
          risk = (currentPrice - currentTrailingStop) / currentTrailingStop;
          await log(
            `üßÆ  –†–∏—Å–∫ –¥–ª—è BUY: ${risk}`,
            'debug',
            'monitorTrailingStop'
          );

          // ‚õî –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ risk –¥–æ 1 (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
          risk = Math.min(risk, 1);
          await log(`‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫: ${risk}`, 'info', 'monitorTrailingStop');

          const newTrailingStop = currentPrice * (1 - risk); // –ù–æ–≤—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –≤ USDT
          
          const updateStopLossStartTime = Date.now(); // –ó–∞—Å–µ–∫–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
          await updateStopLoss(symbol, order.orderId, newTrailingStop);
          const updateStopLossExecutionTime = Date.now() - updateStopLossStartTime; // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
          await log(
            `‚è≥ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è updateStopLoss: ${updateStopLossExecutionTime} –º—Å ‚è≥`, // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            'debug', 
            'monitorTrailingStop'
          );

          currentTrailingStop = newTrailingStop;

          // ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º currentPositionSize
          currentPositionSize = await calculateDynamicPositionSize(
            availableBalanceETH,
            risk,
            order.signalStrength,
            volatility
          );
          await log(
            `üíº –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): ${currentPositionSize} ETH (${(currentPositionSize * currentPrice * usdToRubRate).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ ETH –∏ RUB
            'info',
            'monitorTrailingStop'
          );

          await log(
            `üìà –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentTrailingStop} USD (${(
              currentTrailingStop * usdToRubRate
            ).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –≤ USD –∏ RUB
            'info',
            'monitorTrailingStop'
          );
        } else {
          await log(`üí§ –£—Å–ª–æ–≤–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è BUY –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`, 'debug', 'monitorTrailingStop');
        }
      } else if (order.side === 'SELL') {
        await log(`üîé –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è SELL...`, 'debug', 'monitorTrailingStop');
        if (
          currentPrice <
          currentTrailingStop * (1 - signalParams.trailingStopUpdateThreshold)
        ) {
          // ‚úÖ  –†–∞—Å—á–µ—Ç risk —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ if
          risk = (currentTrailingStop - currentPrice) / currentTrailingStop;
          await log(
            `üßÆ  –†–∏—Å–∫ –¥–ª—è SELL: ${risk}`,
            'debug',
            'monitorTrailingStop'
          );

          // ‚õî –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ risk –¥–æ 1 (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
          risk = Math.min(risk, 1);
          await log(`‚ö†Ô∏è –¢–µ–∫—É—â–∏–π —Ä–∏—Å–∫: ${risk}`, 'info', 'monitorTrailingStop');
          
          const newTrailingStop = currentPrice * (1 + risk); // –ù–æ–≤—ã–π —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –≤ USDT
          await updateStopLoss(symbol, order.orderId, newTrailingStop);
          currentTrailingStop = newTrailingStop;

          // ‚úÖ –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º currentPositionSize
          currentPositionSize = await calculateDynamicPositionSize(
            availableBalanceETH,
            risk,
            order.signalStrength,
            volatility
          );
          await log(
            `üíº –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏ (–ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è): ${currentPositionSize} ETH (${(currentPositionSize * currentPrice * usdToRubRate).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–∑–∏—Ü–∏–∏ –≤ ETH –∏ RUB
            'info',
            'monitorTrailingStop'
          );
          await log(
            `üìâ –¢—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø –æ–±–Ω–æ–≤–ª–µ–Ω: ${currentTrailingStop} USD (${(
              currentTrailingStop * usdToRubRate
            ).toFixed(2)} RUB)`, // –í—ã–≤–æ–¥ –Ω–æ–≤–æ–≥–æ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –≤ USD –∏ RUB
            'info',
            'monitorTrailingStop'
          );
        } else {
          await log(`üí§ –£—Å–ª–æ–≤–∏—è —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞ –¥–ª—è SELL –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã`, 'debug', 'monitorTrailingStop');
        }
      }

      // –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
      setTimeout(monitoringFunction, checkInterval);
    } catch (error) {
      await log(
        `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ —Ç—Ä–µ–π–ª–∏–Ω–≥-—Å—Ç–æ–ø–∞: ${error.message}`,
        'error',
        'monitorTrailingStop'
      );
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      setTimeout(monitoringFunction, checkInterval);
    }
  };

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  monitoringFunction();

  const executionTime = Date.now() - startTime; // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
  await log(
    `‚¨ÖÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ monitorTrailingStop üìà. –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime} –º—Å`,
    'info',
    'monitorTrailingStop'
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
async function updateStopLoss(symbol, orderId, newStopLoss) {
  try {
    await log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞ –¥–ª—è –æ—Ä–¥–µ—Ä–∞ ${orderId}: ${newStopLoss}`, 'info', 'updateStopLoss');
    
    if (currentTradingMode === 'test') {
      await log(`üß™ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –°–∏–º—É–ª—è—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–ø-–ª–æ—Å—Å–∞`, 'info', 'updateStopLoss');
      return { success: true, message: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞' };
    }

    const result = await bybitClient.setTradingStop({
      category: 'spot',
      symbol: symbol,
      orderId: orderId,
      stopLoss: newStopLoss.toString()
    });
    
    await log(`‚úÖ –°—Ç–æ–ø-–ª–æ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: ${JSON.stringify(result)}`, 'info', 'updateStopLoss');
    return result;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞: ${error.message}`, 'error', 'updateStopLoss');
    throw error;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏
async function updatePositionLevels(symbol, position, newStopLoss, newTakeProfit) {
  try {
    await log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –¥–ª—è –ø–æ–∑–∏—Ü–∏–∏: ${JSON.stringify(position)}`, 'info', 'updatePositionLevels');
    
    const order = await bybitClient.setTradingStop({
      category: 'spot',
      symbol: symbol,
      positionIdx: position.positionIdx,
      stopLoss: newStopLoss.toString(),
      takeProfit: newTakeProfit.toString(),
    });

    await log(`–£—Ä–æ–≤–Ω–∏ –ø–æ–∑–∏—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: ${JSON.stringify(order)}`, 'info', 'updatePositionLevels');
    return order;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏: ${error.message}`, 'error', 'updatePositionLevels');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞
function calculateNewStopLoss(currentStopLoss, marketConditions) {
  const { volatility, trend } = marketConditions;
  let adjustment = 1;

  if (trend === '–í–æ—Å—Ö–æ–¥—è—â–∏–π') {
    adjustment += 0.005;
  } else if (trend === '–ù–∏—Å—Ö–æ–¥—è—â–∏–π') {
    adjustment -= 0.005;
  }

  adjustment += volatility;

  const newStopLoss = currentStopLoss * adjustment;

  log(`üî¢ –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ —Å—Ç–æ–ø-–ª–æ—Å—Å–∞:
  üìä –¢–µ–∫—É—â–∏–π —Å—Ç–æ–ø-–ª–æ—Å—Å: ${currentStopLoss}
  üìà –¢—Ä–µ–Ω–¥: ${trend}
  üìä –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å: ${volatility}
  üî¢ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏: ${adjustment}
  üÜï –ù–æ–≤—ã–π —Å—Ç–æ–ø-–ª–æ—Å—Å: ${newStopLoss}`, 'info', 'calculateNewStopLoss');

  return newStopLoss;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ü–µ–Ω
async function comparePrices() {
  try {
    const bybitPrice = await getPrice('ETHUSDT');
    
    await log(`–¶–µ–Ω–∞ –Ω–∞ Bybit: ${bybitPrice}`, 'info', 'comparePrices');

    return {
      bybitPrice: bybitPrice
    };
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: ${error.message}`, 'error', 'comparePrices');
    throw error;
  }
}


// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π
async function checkApiKeys() {
  try {
    await log('üîë –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π', 'info', 'checkApiKeys');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö API –∫–ª—é—á–µ–π
    const realServerTime = await bybitClient.getServerTime();
    if (realServerTime.retCode === 0) {
      await log('‚úÖ –†–µ–∞–ª—å–Ω—ã–µ API –∫–ª—é—á–∏ –≤–µ—Ä–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã', 'info', 'checkApiKeys');
    } else {
      throw new Error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${realServerTime.retMsg}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö API –∫–ª—é—á–µ–π
    const testServerTime = await testBybitClient.getServerTime();
    if (testServerTime.retCode === 0) {
      await log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ API –∫–ª—é—á–∏ –≤–µ—Ä–Ω—ã –∏ –∞–∫—Ç–∏–≤–Ω—ã', 'info', 'checkApiKeys');
    } else {
      throw new Error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞: ${testServerTime.retMsg}`);
    }

    await log('üîë –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ', 'info', 'checkApiKeys');
    return true;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API –∫–ª—é—á–µ–π: ${error.message}`, 'error', 'checkApiKeys');
    return false;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message) {
  try {
    await log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: ${message}`, 'info', 'sendTelegramNotification');
    await sendTelegramMessage(message);
    await log('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ', 'info', 'sendTelegramNotification');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: ${error.message}`, 'error', 'sendTelegramNotification');
  }
}

// –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞
checkApiKeys();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Bybit
async function checkBybitConnection(client = null) {
  try {
    if (!client) {
      client = currentTradingMode === 'test' ? testBybitClient : bybitClient;
    }
    const serverTime = await client.getServerTime();
    if (serverTime.retCode === 0) {
      await log(`–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${currentTradingMode === 'test' ? '—Ç–µ—Å—Ç–æ–≤—ã–º' : '—Ä–µ–∞–ª—å–Ω—ã–º'} API Bybit —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`, 'info', 'checkBybitConnection');
      return true;
    } else {
      throw new Error(`–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ ${currentTradingMode === 'test' ? '—Ç–µ—Å—Ç–æ–≤–æ–≥–æ' : '—Ä–µ–∞–ª—å–Ω–æ–≥–æ'} API Bybit`);
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å ${currentTradingMode === 'test' ? '—Ç–µ—Å—Ç–æ–≤—ã–º' : '—Ä–µ–∞–ª—å–Ω—ã–º'} API Bybit: ${error.message}`, 'error', 'checkBybitConnection');
    return false;
  }
}

app.use((req, _res, next) => {
  console.log(`${req.method} ${req.url}`);
  next();
});

app.use((err, _req, res, _next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});

// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ API
async function handleApiError(error, functionName) {
  if (error.response) {
    // –û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –æ—Ç–≤–µ—Ç–æ–º
    await log(`–û—à–∏–±–∫–∞ API –≤ ${functionName}: ${error.response.status} ${error.response.statusText}`, 'error', functionName);
    await log(`–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: ${JSON.stringify(error.response.data)}`, 'error', functionName);
    
    if (error.response.status === 401 || error.response.status === 403) {
      // –ü—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
      await log('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ API –∫–ª—é—á–∞.', 'error', functionName);
      await sendTelegramMessage('–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π.');
    } else if (error.response.status === 429) {
      // –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
      await log('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API. –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π.', 'warn', functionName);
      // –î–æ–±–∞–≤—å—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
      await new Promise(resolve => setTimeout(resolve, 60000)); // –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É
    }
  } else if (error.request) {
    // –û—à–∏–±–∫–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞
    await log(`–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –≤ ${functionName}: –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞`, 'error', functionName);
    await sendTelegramMessage('–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
  } else {
    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
    await log(`–û—à–∏–±–∫–∞ –≤ ${functionName}: ${error.message}`, 'error', functionName);
  }

  // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è, –º–æ–∂–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é
  if (isCriticalError(error)) {
    await temporaryPauseTrading(error);
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏
function isCriticalError(error) {
  // –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
  return error.message.includes('API key') || 
         error.message.includes('Insufficient balance') ||
         error.response && error.response.status >= 500;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
async function getVirtualBalance(asset) {
  try {
    await log(`üîç –ù–∞—á–∞–ª–æ getVirtualBalance –¥–ª—è ${asset || '–≤—Å–µ—Ö –∞–∫—Ç–∏–≤–æ–≤'}`, 'debug', 'getVirtualBalance');
    
    let balance = await fs.readJson(VIRTUAL_BALANCE_FILE);
    await log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'getVirtualBalance');

    if (!asset) {
      // –ï—Å–ª–∏ –∞–∫—Ç–∏–≤ –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å –±–∞–ª–∞–Ω—Å
      return balance;
    }

    if (!balance.hasOwnProperty(asset)) {
      throw new Error(`üö´ –ê–∫—Ç–∏–≤ ${asset} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ`);
    }

    await log(`üí∞ –í–æ–∑–≤—Ä–∞—â–∞–µ–º—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è ${asset}: ${balance[asset]}`, 'debug', 'getVirtualBalance');
    return balance[asset];
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ getVirtualBalance: ${error.message}`, 'error', 'getVirtualBalance');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ (–¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞)
async function updateVirtualBalance(asset, amount) {
  try {
    await log(`üîÑ –ù–∞—á–∞–ª–æ updateVirtualBalance. Asset: ${asset}, Amount: ${amount}`, 'debug', 'updateVirtualBalance');

    let balance = await fs.readJson(VIRTUAL_BALANCE_FILE);
    await log(`üìä –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'updateVirtualBalance');

    balance[asset] = amount;

    if (asset === 'RUB') {
      const usdToRubRate = await getUsdToRubRate();
      const ethPrice = await getPrice('ETHUSDT');
      balance.ETH = amount / (ethPrice * usdToRubRate);
      await log(`üßÆ –ü–µ—Ä–µ—Å—á–µ—Ç ETH: ${amount} / (${ethPrice} * ${usdToRubRate}) = ${balance.ETH}`, 'debug', 'updateVirtualBalance');
    }

    await fs.writeJson(VIRTUAL_BALANCE_FILE, balance, { spaces: 2 });
    await log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${JSON.stringify(balance)}`, 'debug', 'updateVirtualBalance');
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –≤ updateVirtualBalance: ${error.message}`, 'error', 'updateVirtualBalance');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function getTradingPerformance() {
  try {
    const trades = await getRecentTrades('ETHUSDT', 100);
    const portfolio = new Decimal(await getPortfolioValue());
    const initialBalance = new Decimal(10000); // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≤ RUB
    
    const totalProfit = portfolio.minus(initialBalance);
    const profitPercentage = portfolio.dividedBy(initialBalance).minus(1).times(100);
    
    const winningTrades = trades.filter(trade => new Decimal(trade.value).greaterThan(0));
    const losingTrades = trades.filter(trade => new Decimal(trade.value).lessThanOrEqualTo(0));
    
    const winRate = trades.length > 0 ? new Decimal(winningTrades.length).dividedBy(trades.length).times(100) : new Decimal(0);
    const averageProfit = trades.length > 0 ? trades.reduce((sum, trade) => sum.plus(trade.value), new Decimal(0)).dividedBy(trades.length) : new Decimal(0);
    
    const maxDrawdown = calculateMaxDrawdown(trades);
    
    const performance = {
      totalProfit: totalProfit.toFixed(2),
      profitPercentage: profitPercentage.toFixed(2),
      winRate: winRate.toFixed(2),
      averageProfit: averageProfit.toFixed(2),
      totalTrades: trades.length,
      winningTrades: winningTrades.length,
      losingTrades: losingTrades.length,
      currentPortfolioValue: portfolio.toFixed(2),
      maxDrawdown: maxDrawdown.toFixed(2)
    };
    
    await log(`–¢–µ–∫—É—â–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–æ—Ä–≥–æ–≤–ª–∏: ${JSON.stringify(performance)}`, 'info', 'getTradingPerformance');
    
    return performance;
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'getTradingPerformance');
    return {
      totalProfit: '0.00',
      profitPercentage: '0.00',
      winRate: '0.00',
      averageProfit: '0.00',
      totalTrades: 0,
      winningTrades: 0,
      losingTrades: 0,
      currentPortfolioValue: '10000.00',
      maxDrawdown: '0.00'
    };
  }
}

async function logTradingPerformance() {
  try {
    const performance = await getTradingPerformance();
    
    await log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏:', 'info', 'logTradingPerformance');
    await log(`–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: ${performance.totalProfit} RUB (${performance.profitPercentage}%)`, 'info', 'logTradingPerformance');
    await log(`–í–∏–Ω—Ä–µ–π—Ç: ${performance.winRate}%`, 'info', 'logTradingPerformance');
    await log(`–°—Ä–µ–¥–Ω—è—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ —Å–¥–µ–ª–∫—É: ${performance.averageProfit} RUB`, 'info', 'logTradingPerformance');
    await log(`–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${performance.totalTrades} (–≤—ã–∏–≥—Ä—ã—à–Ω—ã—Ö: ${performance.winningTrades}, –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—ã—Ö: ${performance.losingTrades})`, 'info', 'logTradingPerformance');
    await log(`–¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${performance.currentPortfolioValue} RUB`, 'info', 'logTradingPerformance');
    await log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: ${performance.maxDrawdown}%`, 'info', 'logTradingPerformance');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤–µ–±-—Å–æ–∫–µ—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    io.emit('tradingPerformance', performance);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
    await savePerformanceToFile(performance);

  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'logTradingPerformance');
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    await sendTelegramMessage(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(logTradingPerformance, 5 * 60 * 1000);

app.get('/trading-performance', async (_req, res) => {
  try {
    const performance = await getTradingPerformance();
    res.json(performance);
  } catch (error) {
    handleError(res, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏', error);
  }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª
async function savePerformanceToFile(performance) {
  const performancePath = path.join(__dirname, 'performance_history.json');
  try {
    let history = [];
    if (await fs.pathExists(performancePath)) {
      history = await fs.readJson(performancePath);
    }
    history.push({
      timestamp: new Date().toISOString(),
      ...performance
    });
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ 1000 –∑–∞–ø–∏—Å—è–º–∏
    if (history.length > 1000) {
      history = history.slice(-1000);
    }
    await fs.writeJson(performancePath, history, { spaces: 2 });
    await log('–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª', 'info', 'savePerformanceToFile');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —Ñ–∞–π–ª: ${error.message}`, 'error', 'savePerformanceToFile');
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
async function updateTradingStatistics(side, size, price, orderValueRub) {
  try {
    const normalizedSide = side.toUpperCase();
    await log(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${normalizedSide} ${size} ETH –ø–æ —Ü–µ–Ω–µ ${price} USD (${orderValueRub} RUB)`, 'info', 'updateTradingStatistics');

    // –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    let statistics = await loadTradingStatistics();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    statistics.totalTrades++;
    statistics.totalVolume = new Decimal(statistics.totalVolume).plus(size).toString();
    statistics.totalVolumeRub = new Decimal(statistics.totalVolumeRub).plus(orderValueRub).toString();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∏–ø—É —Å–¥–µ–ª–∫–∏ (–ø–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞)
    if (normalizedSide === 'BUY') {
      statistics.totalBuys++;
      statistics.totalBuyVolume = new Decimal(statistics.totalBuyVolume).plus(size).toString();
      statistics.totalBuyVolumeRub = new Decimal(statistics.totalBuyVolumeRub).plus(orderValueRub).toString();
      statistics.averageBuyPrice = new Decimal(statistics.averageBuyPrice).times(statistics.totalBuys - 1).plus(price).dividedBy(statistics.totalBuys).toString();
    } else if (normalizedSide === 'SELL') {
      statistics.totalSells++;
      statistics.totalSellVolume = new Decimal(statistics.totalSellVolume).plus(size).toString();
      statistics.totalSellVolumeRub = new Decimal(statistics.totalSellVolumeRub).plus(orderValueRub).toString();
      statistics.averageSellPrice = new Decimal(statistics.averageSellPrice).times(statistics.totalSells - 1).plus(price).dividedBy(statistics.totalSells).toString();
    }

    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–±—ã–ª–∏/—É–±—ã—Ç–∫–∞
    if (statistics.lastTradePrice) {
      const pnl = normalizedSide === 'SELL' 
        ? new Decimal(price).minus(statistics.lastTradePrice).times(size)
        : new Decimal(statistics.lastTradePrice).minus(price).times(size);
      statistics.totalPnL = new Decimal(statistics.totalPnL).plus(pnl).toString();
      statistics.totalPnLRub = new Decimal(statistics.totalPnLRub).plus(pnl.times(await getUsdToRubRate())).toString();

      if (pnl.greaterThan(0)) {
        statistics.profitableTrades++;
      } else if (pnl.lessThan(0)) {
        statistics.unprofitableTrades++;
      }
    }

    statistics.lastTradePrice = price.toString();
    statistics.lastTradeTime = new Date().toISOString();

    // –†–∞—Å—á–µ—Ç –≤–∏–Ω—Ä–µ–π—Ç–∞
    statistics.winRate = new Decimal(statistics.profitableTrades).dividedBy(statistics.totalTrades).times(100).toString();

    // –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–∏–±—ã–ª–∏ –Ω–∞ —Å–¥–µ–ª–∫—É
    statistics.averagePnL = new Decimal(statistics.totalPnL).dividedBy(statistics.totalTrades).toString();
    statistics.averagePnLRub = new Decimal(statistics.totalPnLRub).dividedBy(statistics.totalTrades).toString();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
    const currentDrawdown = new Decimal(statistics.peakBalance).minus(new Decimal(statistics.peakBalance).plus(statistics.totalPnLRub)).dividedBy(statistics.peakBalance).times(100);
    statistics.maxDrawdown = Decimal.max(statistics.maxDrawdown, currentDrawdown).toString();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∏–∫–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
    if (new Decimal(statistics.peakBalance).plus(statistics.totalPnLRub).greaterThan(statistics.peakBalance)) {
      statistics.peakBalance = new Decimal(statistics.peakBalance).plus(statistics.totalPnLRub).toString();
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await saveTradingStatistics(statistics);

    await log(`–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: ${statistics.totalTrades}, –í–∏–Ω—Ä–µ–π—Ç: ${new Decimal(statistics.winRate).toFixed(2)}%, –û–±—â–∏–π P&L: ${new Decimal(statistics.totalPnLRub).toFixed(2)} RUB`, 'info', 'updateTradingStatistics');

  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'updateTradingStatistics');
    throw error;
  }
}

// –ó–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
async function loadTradingStatistics() {
  const statisticsPath = path.join(__dirname, 'trading_statistics.json');
  try {
    if (await fs.pathExists(statisticsPath)) {
      return await fs.readJson(statisticsPath);
    } else {
      return {
        totalTrades: 0,
        totalVolume: 0,
        totalVolumeRub: 0,
        totalBuys: 0,
        totalSells: 0,
        totalBuyVolume: 0,
        totalSellVolume: 0,
        totalBuyVolumeRub: 0,
        totalSellVolumeRub: 0,
        averageBuyPrice: 0,
        averageSellPrice: 0,
        totalPnL: 0,
        totalPnLRub: 0,
        profitableTrades: 0,
        unprofitableTrades: 0,
        winRate: 0,
        averagePnL: 0,
        averagePnLRub: 0,
        maxDrawdown: 0,
        peakBalance: 10000, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å 10000 RUB
        lastTradePrice: null,
        lastTradeTime: null
      };
    }
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'loadTradingStatistics');
    throw error;
  }
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏
async function saveTradingStatistics(statistics) {
  const statisticsPath = path.join(__dirname, 'trading_statistics.json');
  try {
    await fs.writeJson(statisticsPath, statistics, { spaces: 2 });
    await log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞', 'info', 'saveTradingStatistics');
  } catch (error) {
    await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'saveTradingStatistics');
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
async function calculateCurrentAccuracy() {
  try {
    const testData = await fetchHistoricalDataForTraining('15m');
    const neuralNet = await loadLatestModel();
    if (!neuralNet) {
      throw new Error('–ú–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    const accuracy = calculateAccuracy(neuralNet.model, testData);
    return accuracy.toFixed(2);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏:', error);
    throw error;
  }
}

async function initializeNeuralNetwork() {
  try {
    await log('üß† –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏', 'info', 'initializeNeuralNetwork');
    
    let model = await loadLatestModel();
    if (!model) {
      await log('‚ö†Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...', 'warn', 'initializeNeuralNetwork');
      model = new brain.NeuralNetwork({
        hiddenLayers: [700, 512, 256, 128, 64],
        activation: 'leaky-relu',
        learningRate: 0.003,
        momentum: 0.2,
        regularization: 'l2',
        regRate: 0.001,
      });
      
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      // –ù–∞–ø—Ä–∏–º–µ—Ä: await trainInitialModel(model);
    }
    
    await log('‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞', 'info', 'initializeNeuralNetwork');
    return { model };
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${error.message}`, 'error', 'initializeNeuralNetwork');
    return null;
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(async () => {
  try {
    const accuracy = await calculateCurrentAccuracy();
    lastKnownAccuracy = accuracy;
    io.emit('neuralNetworkAccuracy', { accuracy: accuracy });
    console.log(`–¢–æ—á–Ω–æ—Å—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ${accuracy}%`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ—á–Ω–æ—Å—Ç–∏:', error);
  }
}, 3600000);

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∏—Å—Ç–µ–º—É
 * @returns {Promise<boolean>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
 */
async function initializeSystem() {
  try {
    await log('üöÄ –ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã', 'info', 'initializeSystem');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    neuralNet = await initializeNeuralNetwork();
    if (!neuralNet) {
      throw new Error('ü§Ø –£–ø—Å! –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å üß†');
    }
    await log('‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ üß†', 'info', 'initializeSystem');

    const symbol = 'ETHUSDT';
    const interval = '15m';

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const historicalData = await fetchHistoricalData(symbol, interval, 1000);

    if (historicalData.length < 100) {
      await log(`‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö (${historicalData.length}). –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å —Ä–∞—Å—á–µ—Ç–æ–≤.`, 'warn', 'initializeSystem');
    }

    // üß†üß†üß† LSTM üß†üß†üß†

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –æ–±—É—á–µ–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏
    try {
      await log('üß† –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è LSTM –º–æ–¥–µ–ª–∏ ü§ñ', 'info', 'initializeSystem');

      const lastSavedEpoch = await findLastSavedEpoch();
      await log(`üíæ –ù–∞–π–¥–µ–Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è —ç–ø–æ—Ö–∞ LSTM: ${lastSavedEpoch}`, 'info', 'initializeSystem');

      const preparedData = await prepareDataForLSTM(historicalData);
      global.lstmModel = await trainLSTMModel(preparedData, lastSavedEpoch + 1);

      await log('üéì LSTM –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! üéâ', 'info', 'initializeSystem');
    } catch (lstmError) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ LSTM –º–æ–¥–µ–ª–∏ ü§ñ: ${lstmError.message}`, 'error', 'initializeSystem');
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
      await sendTelegramNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ LSTM: ${lstmError.message}`);
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å LSTM –º–æ–¥–µ–ª—å ü§ñ'); //  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞.
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ LSTM –º–æ–¥–µ–ª–∏
    try {
      const lstmTestInput = await prepareInputDataForLSTM(symbol, interval, 50, 1);
      const lstmTestPrediction = predictWithLSTM(global.lstmModel, lstmTestInput[0]);
      await log(`üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ LSTM –º–æ–¥–µ–ª–∏ ü§ñ: ${JSON.stringify(lstmTestPrediction)}`, 'info', 'initializeSystem');
    } catch (lstmTestError) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ LSTM –º–æ–¥–µ–ª–∏ ü§ñ: ${lstmTestError.message}`, 'warn', 'initializeSystem');
    }

    // üß†üß†üß† Brain.js üß†üß†üß†

    // –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Brain.js
    try {
      await log('üß† –ù–∞—á–∞–ª–æ –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ Brain.js üß†', 'info', 'initializeSystem');
      neuralNet = await trainNeuralNetwork();
      if (!neuralNet) {
        await log('‚ùå –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ üß†', 'error', 'initializeSystem');
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å üß†'); //  –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏.
      }
      await log('‚úÖ –ù–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å Brain.js —É—Å–ø–µ—à–Ω–æ –æ–±—É—á–µ–Ω–∞! üéâ', 'info', 'initializeSystem');
    } catch (nnError) {
      await log(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ neuralNet: ${nnError.message}`, 'error', 'initializeSystem');
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ Telegram
      await sendTelegramNotification(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏: ${nnError.message}`);
      throw nnError; // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
    
    await checkApiKeys();
    await syncTimeWithBybit();
    await initializeOrUpdateVirtualBalance();
    
    await log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞! üöÄ', 'info', 'initializeSystem');
    return true;
  } catch (error) {
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`, 'error', 'initializeSystem');
    return false; 
  }
}



// –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ —Å–º–∞–π–ª–∏–∫–∞–º–∏
async function runTradingBot() {
  try {
    await log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...', 'info', 'runTradingBot');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã, –≤–∫–ª—é—á–∞—è –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
    if (!await initializeSystem()) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É. –¢–æ—Ä–≥–æ–≤–ª—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.');
    }

    const symbol = 'ETHUSDT';
    const interval = '15m';

    while (true) {
      try {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω
        lastEthUsdtPrice = await getPrice('ETHUSDT');
        lastEthUsdtPriceTime = Date.now();
        lastUsdRubRate = await getUsdToRubRate();
        lastUsdRubRateTime = Date.now();

        if (global.isTradingStopped) {
          await log('‚ö†Ô∏è –¢–æ—Ä–≥–æ–≤–ª—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.', 'warn', 'runTradingBot');
          break;
        }

        const marketConditions = await analyzeMarketConditions();
        await log(`üìä –¢–µ–∫—É—â–∏–µ —Ä—ã–Ω–æ—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: ${JSON.stringify(marketConditions)}`, 'info', 'runTradingBot');

        const analysisResult = await analyzeDataWithCombinedModels(symbol, interval);

        if (!analysisResult) {
          await log(`‚ùå –û—à–∏–±–∫–∞: analysisResult undefined. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é.`, 'error', 'runTradingBot');
          continue;
        }

        await log(`üß† –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞: signal=${analysisResult.signal}, signalStrength=${analysisResult.signalStrength}, currentPrice=${analysisResult.currentPrice}`, 'debug', 'runTradingBot');

        if (isTradingActive) {
          await log(`‚è≥ –°–¥–µ–ª–∫–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â—É—é –∏—Ç–µ—Ä–∞—Ü–∏—é.`, 'info', 'runTradingBot');
          continue;
        }

        if (!analysisResult.signalStrength || isNaN(analysisResult.signalStrength)) {
          await log(`‚ùå –û—à–∏–±–∫–∞: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π signalStrength: ${JSON.stringify(analysisResult)}`, 'error', 'runTradingBot');
          continue;
        }

        const signalStrength = new Decimal(analysisResult.signalStrength);
        const minSignalStrength = new Decimal(signalParams.minSignalStrength);

        if (analysisResult.signal !== 'hold' && signalStrength.greaterThanOrEqualTo(minSignalStrength)) {
          const riskParams = {
            risk: new Decimal(0.01),
            stopLossPercent: new Decimal(0.02),
            takeProfitPercent: new Decimal(0.03)
          };

          await executeTradewithRiskManagement(analysisResult, marketConditions, riskParams);
        } else {
          await log('üí§ –ù–µ—Ç —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏.', 'info', 'runTradingBot');
        }

        await adaptTradingParameters();

        const portfolioState = await getPortfolioState();
        await log(`üíº –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è: ${JSON.stringify(portfolioState)}`, 'info', 'runTradingBot');

        if (Date.now() - lastWeightAdjustmentTime > WEIGHT_ADJUSTMENT_INTERVAL) {
          await adjustModelWeights();
          lastWeightAdjustmentTime = Date.now();
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        if (Date.now() - lastNeuralNetworkTrainingTime > NEURAL_NETWORK_TRAINING_INTERVAL) {
          await retrainNeuralNetwork();
          lastNeuralNetworkTrainingTime = Date.now();
        }

        await new Promise(resolve => setTimeout(resolve, 60000)); // 1 –º–∏–Ω—É—Ç–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
      } catch (error) {
        await log(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ç–æ—Ä–≥–æ–≤–ª–∏: ${error.message}`, 'error', 'runTradingBot');
        await handleApiError(error, 'runTradingBot');
        await new Promise(resolve => setTimeout(resolve, 60000)); // –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      }
    }
  } catch (error) {
    await log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ runTradingBot: ${error.message}`, 'error', 'runTradingBot');
    await sendTelegramNotification(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–æ—Ä–≥–æ–≤–æ–º –±–æ—Ç–µ: ${error.message}`);
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
    await safelyShutdownBot();
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
    setTimeout(async () => {
      await log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞...', 'info', 'runTradingBot');
      runTradingBot();
    }, 300000);
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastWeightAdjustmentTime = 0;
const WEIGHT_ADJUSTMENT_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let lastNeuralNetworkTrainingTime = 0;
const NEURAL_NETWORK_TRAINING_INTERVAL = 24 * 60 * 60 * 1000; // 24 —á–∞—Å–∞

// –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞
runTradingBot();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('uncaughtException', async (error) => {
  await log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message}`, 'error', 'uncaughtException');
  await sendTelegramMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
  setTimeout(() => {
    process.exit(1);
  }, 5000);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –ø—Ä–æ–º–∏—Å–æ–≤
process.on('unhandledRejection', async (reason, _promise) => {
  let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
  let errorStack = '';
  
  if (reason instanceof Error) {
      errorMessage = reason.message;
      errorStack = reason.stack || '';
  } else if (typeof reason === 'string') {
      errorMessage = reason;
  } else if (reason && typeof reason === 'object') {
      errorMessage = reason.message || JSON.stringify(reason);
      errorStack = reason.stack || '';
  }
  
  await log(`–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ${errorMessage}`, 'error', 'unhandledRejection');
  if (errorStack) {
      await log(`–°—Ç–µ–∫ –æ—à–∏–±–∫–∏: ${errorStack}`, 'error', 'unhandledRejection');
  }
  
  try {
      await sendTelegramMessage(`–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞: ${errorMessage}`);
  } catch (telegramError) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ${telegramError.message}`, 'error', 'unhandledRejection');
  }
  
  try {
      await temporaryPauseTrading(new Error(errorMessage));
  } catch (pauseError) {
      await log(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–æ—Ä–≥–æ–≤–ª—é: ${pauseError.message}`, 'error', 'unhandledRejection');
  }
});


const PORT = 3000;

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(PORT, async () => {
  try {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    await log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`, 'info', 'serverStart');
    
    await initializeOrUpdateVirtualBalance(true);
    await syncTimeWithBybit();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã (–≤–∫–ª—é—á–∞—è LSTM –º–æ–¥–µ–ª—å)
    const systemInitialized = await initializeSystem();
    
    if (systemInitialized) {
      await log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', 'info', 'serverStart');
      runTradingBot();
      runInitialBacktest();
    } else {
      await log('‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –Ω–µ —É–¥–∞–ª–∞—Å—å. –°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.', 'warn', 'serverStart');
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ
    }
    
    console.log(`üìä –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}`);
    await log(`üìä –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É http://localhost:${PORT}`, 'info', 'serverStart');
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error', 'serverStart');
    process.exit(1);
  }
});

process.on('SIGINT', async () => {
  try {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...');
    await log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Ä–≤–µ—Ä–∞...', 'info', 'serverShutdown');
    
    await closeAllConnections();
    
    console.log('üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É');
    await log('üëã –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É', 'info', 'serverShutdown');
    process.exit(0);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`);
    await log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞: ${error.message}`, 'error', 'serverShutdown');
    process.exit(1);
  }
});

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Ç–µ—Å—Ç–∞—Ö
module.exports = {
  prepareInputDataForNN,
  executeTrade,
  createLSTMModel,
  trainLSTMModel,
  predictWithLSTM,
  prepareDataForLSTM,
  analyzeDataWithCombinedModels,
  initializeSystem,
  retrainLSTMModel,
  analyzeDataWithNN,
  checkEnsembleAccuracy,
  initializeTestPortfolio,
  sendTelegramMessage,
  normalize,
  isValidNumber,
  initializeSystem,
  fetchHistoricalDataForTraining,
  trainNeuralNetwork,
  calculateValidationError,
  incrementalTraining,
  predictShortTermPriceMovement,
  adaptTradingParameters,
  analyzeCorrelations,
  optimizeStrategyParameters,
  calculateDynamicPositionSize,
  analyzeMarketConditions,
  dynamicRiskManagement,
  executeTradewithRiskManagement,
  adaptiveTrading,
  placeGridOrders,
  monitorAndUpdateGrid,
  manageOpenPositions,
  checkBalance,
  getRecentTrades,
  getTradingPerformance,
  logTradingPerformance,
  savePerformanceToFile,
  calculateNewStopLoss,
  checkClientConnection,
  backtest,
  getAdjustedTime,
  comparePrices
};